/*
 * API_lcd.c
 *
 *  Created on: 14 mar. 2023
 *      Author: ipave
 */


#include "API_lcd.h"
#include "API_Lcd_port.h"
#include "API_delay.h"

static const uint8_t LCD_INIT_CMD[]={
		_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON,CLR_LCD
};

_Bool Init_Lcd(void){

   if(LCD_HW_init()==LCD_ERROR)return LCD_ERROR;
   DelayLcd(DELAY20ms);
   sacar(COMANDO_INI1,CONTROL);
   DelayLcd(DELAY10ms);
   sacar(COMANDO_INI1,CONTROL);
   DelayLcd(DELAY1ms);
   sacar(COMANDO_INI1,CONTROL);
   sacar(COMANDO_INI2,CONTROL);
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
   DelayLcd(DELAY2ms);
   return LCD_OK;

}

void DelayLcd(uint32_t demora) {
	  HAL_Delay(demora);
}


static void ControlLCD(uint8_t valor){
	EnviaLcd(valor,CONTROL);
}

static void DatoLcd (uint8_t dato){
	EnviaLcd(dato,DATOS);
}

void EnviaLcd (uint8_t valor,_Bool tipo){
    //me con quedo y envio los 4 bits mÃ¡s significaticos.

    LCD_Write_Byte((valor&HIGH_NIBBLE)+tipo+EN+BL);
	DelayLcd(DelayTime);
	LCD_Write_Byte((valor&HIGH_NIBBLE)+tipo+BL);
	DelayLcd(DelayTime);

  	//me quedo y envio los 4 bits menos significativos.

	LCD_Write_Byte((valor<<LOW_NIBBLE)+tipo+EN+BL);
	DelayLcd(DelayTime);
	LCD_Write_Byte((valor<<LOW_NIBBLE)+tipo+BL);
	DelayLcd(DelayTime);



}

void sacar (uint8_t valor, _Bool tipo){

	LCD_Write_Byte(valor+tipo+EN+BL);
	DelayLcd(DelayTime);
	LCD_Write_Byte(valor+tipo+BL);
	DelayLcd(DelayTime);
}


void OutTextLcd (uint8_t *texto){
	while(*texto)DatoLcd(*texto++);
}

void ClrLcd(void){
   ControlLcd(CLR_LCD);				//	Display Clear.
   DelayLcd(DELAY2ms);

}


void PosCaracH(uint8_t posH){
  ControlLCD(posH | LINEA1);
}

void PosCaracL(uint8_t posL){
  ControlLCD(posL | LINEA2);
}

void CursorOff(void){
  ControlLCD(DISPLAY_CONTROL+DISPLAY_ON);
}

void CursorOn(void){
  ControlLCD(DISPLAY_CONTROL+DISPLAY_ON+DISPLAY_ON);
}
