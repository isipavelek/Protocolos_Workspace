/*
 * API_lcd.c
 *
 *  Created on: 14 mar. 2023
 *      Author: ipave
 */


#include "API_lcd.h"
#include "API_Lcd_port.h"
#include "API_delay.h"

//SEÃ‘ALES DE CONTROL
#define CLR_LCD 1
#define RETURN_HOME (1<<1)
#define ENTRY_MODE (1<<2)
#define DISPLAY_CONTROL (1<<3)
#define CURSOR_DISPLAY_SHIFT (1<<4)
#define FUNTION_SET (1<<5)
#define SET_CGRAM (1<<6)
#define SET_DDRAM (1<<7)


#define DISPLAY_ON (1<<2)
#define CURSOR_ON (1<<1)
#define AUTOINCREMENT (1<<1)
#define _4BIT_MODE 0x28

static const uint8_t LCD_INIT_CMD[]={_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON};
_Bool LCD_Init(void){

   if(LCD_HW_init()==LCD_ERROR)return LCD_ERROR;
   LCDdelay(20);
   sacar(0x30,CONTROL);
   LCDdelay(10);
   sacar(0x30,CONTROL);
   LCDdelay(1);
   sacar(0x30,CONTROL);
   sacar(0x20,CONTROL);
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLCD(LCD_INIT_CMD[i]);
   return LCD_OK;

}

void LCDdelay(uint32_t demora) {
	  HAL_Delay(demora);
}


void ControlLCD(uint8_t valor){
	envia(valor,CONTROL);
}

void DatoLCD (uint8_t dato){
	envia(dato,DATOS);
}

void envia (uint8_t valor,_Bool tipo){
    sacar(valor&0xf0,tipo);
    sacar(valor<<4,tipo);
}

void sacar (uint8_t valor, _Bool tipo){

		LCD_Write_Byte(valor+tipo+EN+BL);
		LCDdelay(DelayTime);
		LCD_Write_Byte(valor+tipo+BL);
		LCDdelay(DelayTime);

}


void outtext (uint8_t *texto){
	while(*texto)
  	DatoLCD(*texto++);
}

void ClrLcd(void){
   unsigned int cnt;
   ControlLCD(CLR_CMD);				//	Display Clear.
   for(cnt=0;cnt<600;cnt++);	// El borrado del display tarda  1.52 ms.
}
