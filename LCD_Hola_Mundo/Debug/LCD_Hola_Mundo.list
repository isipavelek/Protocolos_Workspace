
LCD_Hola_Mundo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c4  080039c4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080039cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000a0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009671  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207f  00000000  00000000  000296b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002b738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e8  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027484  00000000  00000000  0002c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fc2  00000000  00000000  00053e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26b6  00000000  00000000  00065e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001484f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024d8  00000000  00000000  00148544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003974 	.word	0x08003974

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08003974 	.word	0x08003974

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <SystemClock_Config>:
  */

#include "API_init.h"

void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <SystemClock_Config+0xbc>)
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <SystemClock_Config+0xbc>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	6413      	str	r3, [r2, #64]	; 0x40
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <SystemClock_Config+0xbc>)
 8000508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <SystemClock_Config+0xc0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <SystemClock_Config+0xc0>)
 800051c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000520:	6013      	str	r3, [r2, #0]
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <SystemClock_Config+0xc0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052e:	2301      	movs	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000532:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000536:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000538:	2302      	movs	r3, #2
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000542:	2308      	movs	r3, #8
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000546:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054c:	2302      	movs	r3, #2
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000550:	2307      	movs	r3, #7
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fd15 	bl	8002f88 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8000564:	f000 f826 	bl	80005b4 <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000568:	f002 fcbe 	bl	8002ee8 <HAL_PWREx_EnableOverDrive>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8000572:	f000 f81f 	bl	80005b4 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000576:	230f      	movs	r3, #15
 8000578:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 800058e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000592:	2105      	movs	r1, #5
 8000594:	4618      	mov	r0, r3
 8000596:	f002 ff6f 	bl	8003478 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xb4>
    Error_Handler();
 80005a0:	f000 f808 	bl	80005b4 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	; 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 ff73 	bl	80014a4 <BSP_LED_On>
  while (1);
 80005be:	e7fe      	b.n	80005be <Error_Handler+0xa>

080005c0 <debounceFSM_init>:
static uint8_t estado=BUTTON_UP;
static delay_t estructura_tiempo;
static bool_t tecla=0;


void debounceFSM_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	delayInit(&estructura_tiempo,DEMORA_BASE);
 80005c4:	2128      	movs	r1, #40	; 0x28
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <debounceFSM_init+0x18>)
 80005c8:	f000 f898 	bl	80006fc <delayInit>
	estado=BUTTON_UP;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <debounceFSM_init+0x1c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038
 80005dc:	20000034 	.word	0x20000034

080005e0 <debounceFSM_update>:
void debounceFSM_update(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch (estado){
 80005e4:	4b2d      	ldr	r3, [pc, #180]	; (800069c <debounceFSM_update+0xbc>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d854      	bhi.n	8000696 <debounceFSM_update+0xb6>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <debounceFSM_update+0x14>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000605 	.word	0x08000605
 80005f8:	0800061d 	.word	0x0800061d
 80005fc:	08000647 	.word	0x08000647
 8000600:	0800065f 	.word	0x0800065f
			case (BUTTON_UP): if(Leer_Enc_Sw()){
 8000604:	f000 f916 	bl	8000834 <Leer_Enc_Sw>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d03c      	beq.n	8000688 <debounceFSM_update+0xa8>
								estado=BUTTON_FALLING;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <debounceFSM_update+0xbc>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
								delayRead(&estructura_tiempo);
 8000614:	4822      	ldr	r0, [pc, #136]	; (80006a0 <debounceFSM_update+0xc0>)
 8000616:	f000 f882 	bl	800071e <delayRead>
							}
							  break;
 800061a:	e035      	b.n	8000688 <debounceFSM_update+0xa8>
			case (BUTTON_FALLING): if(delayRead(&estructura_tiempo)){
 800061c:	4820      	ldr	r0, [pc, #128]	; (80006a0 <debounceFSM_update+0xc0>)
 800061e:	f000 f87e 	bl	800071e <delayRead>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d031      	beq.n	800068c <debounceFSM_update+0xac>
									 if(!Leer_Enc_Sw())estado=BUTTON_UP;
 8000628:	f000 f904 	bl	8000834 <Leer_Enc_Sw>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <debounceFSM_update+0x5a>
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <debounceFSM_update+0xbc>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
									 else {
										 buttonPressed();
										 estado=BUTTON_DOWN;
									 }
									}
								break;
 8000638:	e028      	b.n	800068c <debounceFSM_update+0xac>
										 buttonPressed();
 800063a:	f000 f833 	bl	80006a4 <buttonPressed>
										 estado=BUTTON_DOWN;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <debounceFSM_update+0xbc>)
 8000640:	2202      	movs	r2, #2
 8000642:	701a      	strb	r2, [r3, #0]
								break;
 8000644:	e022      	b.n	800068c <debounceFSM_update+0xac>
			case (BUTTON_DOWN):if(!Leer_Enc_Sw()){
 8000646:	f000 f8f5 	bl	8000834 <Leer_Enc_Sw>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11f      	bne.n	8000690 <debounceFSM_update+0xb0>
									estado=BUTTON_RAISING;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <debounceFSM_update+0xbc>)
 8000652:	2203      	movs	r2, #3
 8000654:	701a      	strb	r2, [r3, #0]
									delayRead(&estructura_tiempo);
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <debounceFSM_update+0xc0>)
 8000658:	f000 f861 	bl	800071e <delayRead>
								}

								break;
 800065c:	e018      	b.n	8000690 <debounceFSM_update+0xb0>
			case (BUTTON_RAISING):
								if(delayRead(&estructura_tiempo)){
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <debounceFSM_update+0xc0>)
 8000660:	f000 f85d 	bl	800071e <delayRead>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d014      	beq.n	8000694 <debounceFSM_update+0xb4>
									 if(Leer_Enc_Sw())estado=BUTTON_DOWN;
 800066a:	f000 f8e3 	bl	8000834 <Leer_Enc_Sw>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <debounceFSM_update+0x9c>
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <debounceFSM_update+0xbc>)
 8000676:	2202      	movs	r2, #2
 8000678:	701a      	strb	r2, [r3, #0]
									 else {
										 buttonReleased();
										 estado=BUTTON_UP;
									 }
								 }
								break;
 800067a:	e00b      	b.n	8000694 <debounceFSM_update+0xb4>
										 buttonReleased();
 800067c:	f000 f81e 	bl	80006bc <buttonReleased>
										 estado=BUTTON_UP;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <debounceFSM_update+0xbc>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
								break;
 8000686:	e005      	b.n	8000694 <debounceFSM_update+0xb4>
							  break;
 8000688:	bf00      	nop
 800068a:	e004      	b.n	8000696 <debounceFSM_update+0xb6>
								break;
 800068c:	bf00      	nop
 800068e:	e002      	b.n	8000696 <debounceFSM_update+0xb6>
								break;
 8000690:	bf00      	nop
 8000692:	e000      	b.n	8000696 <debounceFSM_update+0xb6>
								break;
 8000694:	bf00      	nop


	}
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000034 	.word	0x20000034
 80006a0:	20000038 	.word	0x20000038

080006a4 <buttonPressed>:

void buttonPressed(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	tecla=true;
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <buttonPressed+0x14>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	20000044 	.word	0x20000044

080006bc <buttonReleased>:
void buttonReleased(){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	tecla=false;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <buttonReleased+0x14>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000044 	.word	0x20000044

080006d4 <readKey>:


bool_t readKey(void){
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

	if(tecla==true){
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <readKey+0x24>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <readKey+0x16>
		tecla=false;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <readKey+0x24>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
		return true;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e000      	b.n	80006ec <readKey+0x18>
	}
	return false;
 80006ea:	2300      	movs	r3, #0

}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000044 	.word	0x20000044

080006fc <delayInit>:
 */

#include "API_delay.h"


void delayInit( delay_t * delay, tick_t duration ){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	605a      	str	r2, [r3, #4]
	delay->running=false;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	721a      	strb	r2, [r3, #8]

}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <delayRead>:
bool_t delayRead( delay_t * delay ){
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	if((delay->running)==false){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7a1b      	ldrb	r3, [r3, #8]
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d008      	beq.n	8000746 <delayRead+0x28>
		delay->running=true;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	721a      	strb	r2, [r3, #8]
		delay->startTime=HAL_GetTick();
 800073a:	f000 ff91 	bl	8001660 <HAL_GetTick>
 800073e:	4602      	mov	r2, r0
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e00e      	b.n	8000764 <delayRead+0x46>

	}
	else{
		if(HAL_GetTick()-delay->startTime>=delay->duration){
 8000746:	f000 ff8b 	bl	8001660 <HAL_GetTick>
 800074a:	4602      	mov	r2, r0
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	429a      	cmp	r2, r3
 8000758:	d304      	bcc.n	8000764 <delayRead+0x46>
			delay->running=false;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	721a      	strb	r2, [r3, #8]
			return true;
 8000760:	2301      	movs	r3, #1
 8000762:	e000      	b.n	8000766 <delayRead+0x48>
		}
	}
	return false;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Init_Enc_port>:
 *  Created on: 1 abr. 2023
 *      Author: ipave
 */
#include "API_enc_port.h"

_Bool Init_Enc_port(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct;

	  /* Enable the BUTTON Clock */
  	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <Init_Enc_port+0x80>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <Init_Enc_port+0x80>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <Init_Enc_port+0x80>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]

	    /* Configure Button pin as input */
	GPIO_InitStruct.Pin = PINCANAL_A| PINCANAL_B;
 8000792:	2303      	movs	r3, #3
 8000794:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORTCANAL_A, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <Init_Enc_port+0x84>)
 80007aa:	f001 f86f 	bl	800188c <HAL_GPIO_Init>
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <Init_Enc_port+0x80>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <Init_Enc_port+0x80>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <Init_Enc_port+0x80>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = PINSW;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORTSW, &GPIO_InitStruct);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <Init_Enc_port+0x88>)
 80007e2:	f001 f853 	bl	800188c <HAL_GPIO_Init>
	return 0;
 80007e6:	2300      	movs	r3, #0

}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	40021800 	.word	0x40021800

080007fc <Leer_Enc_Pin>:

uint8_t Leer_Enc_Pin(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint8_t estado=0;
 8000802:	2300      	movs	r3, #0
 8000804:	71fb      	strb	r3, [r7, #7]
	estado=HAL_GPIO_ReadPin(PORTCANAL_A,PINCANAL_A);
 8000806:	2101      	movs	r1, #1
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <Leer_Enc_Pin+0x34>)
 800080a:	f001 f9eb 	bl	8001be4 <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	estado+=(HAL_GPIO_ReadPin(PORTCANAL_B,PINCANAL_B)<<1);
 8000812:	2102      	movs	r1, #2
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <Leer_Enc_Pin+0x34>)
 8000816:	f001 f9e5 	bl	8001be4 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4413      	add	r3, r2
 8000824:	71fb      	strb	r3, [r7, #7]
	return estado;
 8000826:	79fb      	ldrb	r3, [r7, #7]

}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40020c00 	.word	0x40020c00

08000834 <Leer_Enc_Sw>:

_Bool Leer_Enc_Sw(void){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

	return !HAL_GPIO_ReadPin(PORTSW,PINSW);
 8000838:	2101      	movs	r1, #1
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <Leer_Enc_Sw+0x1c>)
 800083c:	f001 f9d2 	bl	8001be4 <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3

}
 800084c:	4618      	mov	r0, r3
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021800 	.word	0x40021800

08000854 <Init_Enc>:

uint8_t giro=NOGIRA;

delay_t encoder_time;

_Bool Init_Enc(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	Init_Enc_port();
 8000858:	f7ff ff8a 	bl	8000770 <Init_Enc_port>
    delayInit(&encoder_time,DEMORA_BASE);
 800085c:	2128      	movs	r1, #40	; 0x28
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <Init_Enc+0x1c>)
 8000860:	f7ff ff4c 	bl	80006fc <delayInit>
    estado=E00;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <Init_Enc+0x20>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
	return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000048 	.word	0x20000048
 8000874:	20000045 	.word	0x20000045

08000878 <EncFSM_Update>:

void EncFSM_Update(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

	uint8_t estados_pines=Leer_Enc_Pin();
 800087e:	f7ff ffbd 	bl	80007fc <Leer_Enc_Pin>
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]

	switch (estado){
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <EncFSM_Update+0x90>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d021      	beq.n	80008d2 <EncFSM_Update+0x5a>
 800088e:	2b02      	cmp	r3, #2
 8000890:	dc35      	bgt.n	80008fe <EncFSM_Update+0x86>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <EncFSM_Update+0x24>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d00a      	beq.n	80008b0 <EncFSM_Update+0x38>
							estado=E00;
						}
						break;

	}
}
 800089a:	e030      	b.n	80008fe <EncFSM_Update+0x86>
			case (E00):	if(estados_pines!=E00 && estados_pines!=E11)estado=estados_pines;
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d028      	beq.n	80008f4 <EncFSM_Update+0x7c>
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d025      	beq.n	80008f4 <EncFSM_Update+0x7c>
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <EncFSM_Update+0x90>)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	7013      	strb	r3, [r2, #0]
						break;
 80008ae:	e021      	b.n	80008f4 <EncFSM_Update+0x7c>
			case (E01):	if(estados_pines!=E01){
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d020      	beq.n	80008f8 <EncFSM_Update+0x80>
							if(estados_pines==E00)giro=IZQ;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <EncFSM_Update+0x4c>
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <EncFSM_Update+0x94>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e002      	b.n	80008ca <EncFSM_Update+0x52>
							else giro=DER;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <EncFSM_Update+0x94>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	701a      	strb	r2, [r3, #0]
							estado=E00;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <EncFSM_Update+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
						break;
 80008d0:	e012      	b.n	80008f8 <EncFSM_Update+0x80>
			case (E10): if(estados_pines!=E10){
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d011      	beq.n	80008fc <EncFSM_Update+0x84>
							if(estados_pines==E00)giro=DER;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <EncFSM_Update+0x6e>
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <EncFSM_Update+0x94>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e002      	b.n	80008ec <EncFSM_Update+0x74>
							else giro=IZQ;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <EncFSM_Update+0x94>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
							estado=E00;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <EncFSM_Update+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
						break;
 80008f2:	e003      	b.n	80008fc <EncFSM_Update+0x84>
						break;
 80008f4:	bf00      	nop
 80008f6:	e002      	b.n	80008fe <EncFSM_Update+0x86>
						break;
 80008f8:	bf00      	nop
 80008fa:	e000      	b.n	80008fe <EncFSM_Update+0x86>
						break;
 80008fc:	bf00      	nop
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000045 	.word	0x20000045
 800090c:	20000046 	.word	0x20000046

08000910 <ReadEncoder>:

giro_encoder_t ReadEncoder(){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
	uint8_t aux=0;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]
	aux=giro;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <ReadEncoder+0x24>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
	giro=NOGIRA;
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <ReadEncoder+0x24>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	return aux;
 8000926:	79fb      	ldrb	r3, [r7, #7]

}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	20000046 	.word	0x20000046

08000938 <Init_Lcd>:

static const uint8_t LCD_INIT_CMD[]={
		_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON,CLR_LCD
};

_Bool Init_Lcd(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

   if(LCD_HW_init()==LCD_ERROR)return LCD_ERROR;
 800093e:	f000 f8fd 	bl	8000b3c <LCD_HW_init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <Init_Lcd+0x14>
 8000948:	2301      	movs	r3, #1
 800094a:	e02b      	b.n	80009a4 <Init_Lcd+0x6c>
   DelayLcd(DELAY20ms);
 800094c:	2014      	movs	r0, #20
 800094e:	f000 f82f 	bl	80009b0 <DelayLcd>
   Send4bitsLcd(COMANDO_INI1,CONTROL);
 8000952:	2100      	movs	r1, #0
 8000954:	2030      	movs	r0, #48	; 0x30
 8000956:	f000 f895 	bl	8000a84 <Send4bitsLcd>
   DelayLcd(DELAY10ms);
 800095a:	200a      	movs	r0, #10
 800095c:	f000 f828 	bl	80009b0 <DelayLcd>
   Send4bitsLcd(COMANDO_INI1,CONTROL);
 8000960:	2100      	movs	r1, #0
 8000962:	2030      	movs	r0, #48	; 0x30
 8000964:	f000 f88e 	bl	8000a84 <Send4bitsLcd>
   DelayLcd(DELAY1ms);
 8000968:	2001      	movs	r0, #1
 800096a:	f000 f821 	bl	80009b0 <DelayLcd>
   Send4bitsLcd(COMANDO_INI1,CONTROL);
 800096e:	2100      	movs	r1, #0
 8000970:	2030      	movs	r0, #48	; 0x30
 8000972:	f000 f887 	bl	8000a84 <Send4bitsLcd>
   Send4bitsLcd(COMANDO_INI2,CONTROL);
 8000976:	2100      	movs	r1, #0
 8000978:	2020      	movs	r0, #32
 800097a:	f000 f883 	bl	8000a84 <Send4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e008      	b.n	8000996 <Init_Lcd+0x5e>
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a09      	ldr	r2, [pc, #36]	; (80009ac <Init_Lcd+0x74>)
 8000988:	5cd3      	ldrb	r3, [r2, r3]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f81b 	bl	80009c6 <ControlLcd>
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	3301      	adds	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b05      	cmp	r3, #5
 800099a:	d9f3      	bls.n	8000984 <Init_Lcd+0x4c>
   DelayLcd(DELAY2ms);
 800099c:	2002      	movs	r0, #2
 800099e:	f000 f807 	bl	80009b0 <DelayLcd>
   return LCD_OK;
 80009a2:	2300      	movs	r3, #0

}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	0800398c 	.word	0x0800398c

080009b0 <DelayLcd>:

void DelayLcd(uint32_t demora){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 fe5d 	bl	8001678 <HAL_Delay>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ControlLcd>:


void ControlLcd(uint8_t valor){
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
	Send8bitsLcd(valor,CONTROL);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f838 	bl	8000a4a <Send8bitsLcd>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <DatoLcd>:

void DatoLcd (uint8_t dato){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
	Send8bitsLcd(dato,DATOS);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2101      	movs	r1, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f82a 	bl	8000a4a <Send8bitsLcd>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <DatoAsciiLcd>:

void DatoAsciiLcd (uint8_t dato){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	Send8bitsLcd(dato+ '0',DATOS);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	3330      	adds	r3, #48	; 0x30
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f81a 	bl	8000a4a <Send8bitsLcd>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <DatoBCD>:

void DatoBCD (uint8_t dato){
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]

	  DatoAsciiLcd((((dato)&0xf0)>>4));
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffe5 	bl	80009fe <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffde 	bl	80009fe <DatoAsciiLcd>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Send8bitsLcd>:

void Send8bitsLcd (uint8_t valor,_Bool tipo){
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	460a      	mov	r2, r1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	4613      	mov	r3, r2
 8000a58:	71bb      	strb	r3, [r7, #6]
	Send4bitsLcd(valor&HIGH_NIBBLE,tipo); 		//me con quedo y envio los 4 bits más significaticos.
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f023 030f 	bic.w	r3, r3, #15
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f80c 	bl	8000a84 <Send4bitsLcd>
	Send4bitsLcd(valor<<LOW_NIBBLE,tipo);   	//me quedo y envio los 4 bits menos significativos.
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	011b      	lsls	r3, r3, #4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	79ba      	ldrb	r2, [r7, #6]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f804 	bl	8000a84 <Send4bitsLcd>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Send4bitsLcd>:

void Send4bitsLcd (uint8_t valor,_Bool tipo){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]

	LCD_Write_Byte(valor+tipo+EN+BL);
 8000a94:	79ba      	ldrb	r2, [r7, #6]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f8b7 	bl	8000c14 <LCD_Write_Byte>
	DelayLcd(DelayTime);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff82 	bl	80009b0 <DelayLcd>
	LCD_Write_Byte(valor+tipo+BL);
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f8ab 	bl	8000c14 <LCD_Write_Byte>
	DelayLcd(DelayTime);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff76 	bl	80009b0 <DelayLcd>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <ClrLcd>:

void OutTextLcd (int8_t *texto){
	while(*texto)DatoLcd(*texto++);
}

void ClrLcd(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
   ControlLcd(CLR_LCD);				//	Display Clear.
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff ff78 	bl	80009c6 <ControlLcd>
   DelayLcd(DELAY2ms);
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff ff6a 	bl	80009b0 <DelayLcd>

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <PosCaracHLcd>:


void PosCaracHLcd(uint8_t posH){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff67 	bl	80009c6 <ControlLcd>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <PosCaracLLcd>:

void PosCaracLLcd(uint8_t posL){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff57 	bl	80009c6 <ControlLcd>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <CursorOffLcd>:

void CursorOffLcd(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	ControlLcd(DISPLAY_CONTROL+DISPLAY_ON);
 8000b24:	200c      	movs	r0, #12
 8000b26:	f7ff ff4e 	bl	80009c6 <ControlLcd>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <CursorOnLcd>:

void CursorOnLcd(void){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
	ControlLcd(DISPLAY_CONTROL+CURSOR_ON+DISPLAY_ON+CURSOR_BLINK);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f7ff ff47 	bl	80009c6 <ControlLcd>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <LCD_HW_init>:
#include"API_Lcd_port.h"
#include"API_init.h"

I2C_HandleTypeDef hi2c1;

_Bool LCD_HW_init(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <LCD_HW_init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <LCD_HW_init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <LCD_HW_init+0x58>)
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <LCD_HW_init+0x60>)
 8000b4a:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <LCD_HW_init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <LCD_HW_init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <LCD_HW_init+0x58>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <LCD_HW_init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <LCD_HW_init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <LCD_HW_init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <LCD_HW_init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
	  GPIO_I2C(&hi2c1);
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <LCD_HW_init+0x58>)
 8000b7a:	f000 f811 	bl	8000ba0 <GPIO_I2C>
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)return HAL_ERROR;
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <LCD_HW_init+0x58>)
 8000b80:	f001 f862 	bl	8001c48 <HAL_I2C_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <LCD_HW_init+0x52>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <LCD_HW_init+0x54>
	  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0

}
 8000b90:	4618      	mov	r0, r3
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000054 	.word	0x20000054
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	000186a0 	.word	0x000186a0

08000ba0 <GPIO_I2C>:

void GPIO_I2C(I2C_HandleTypeDef  *hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <GPIO_I2C+0x6c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <GPIO_I2C+0x6c>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <GPIO_I2C+0x6c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <GPIO_I2C+0x70>)
 8000be2:	f000 fe53 	bl	800188c <HAL_GPIO_Init>

	     /* Peripheral clock enable */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <GPIO_I2C+0x6c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <GPIO_I2C+0x6c>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <GPIO_I2C+0x6c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400

08000c14 <LCD_Write_Byte>:

void LCD_Write_Byte(uint8_t valor){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,0x27<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	214e      	movs	r1, #78	; 0x4e
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <LCD_Write_Byte+0x30>)
 8000c2c:	f001 f95a 	bl	8001ee4 <HAL_I2C_Master_Transmit>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <LCD_Write_Byte+0x26>
 8000c36:	f7ff fcbd 	bl	80005b4 <Error_Handler>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000054 	.word	0x20000054

08000c48 <PresentaFechaLCD>:

const uint8_t mes31[]={ENERO,MARZO,MAYO,JULIO,AGOSTO,OCTUBRE,DICIEMBRE};



void PresentaFechaLCD(reloj* reloj1,uint8_t pos,uint8_t linea){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
 8000c54:	4613      	mov	r3, r2
 8000c56:	70bb      	strb	r3, [r7, #2]

	  if(linea==1)PosCaracHLcd(pos);
 8000c58:	78bb      	ldrb	r3, [r7, #2]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d104      	bne.n	8000c68 <PresentaFechaLCD+0x20>
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff3d 	bl	8000ae0 <PosCaracHLcd>
 8000c66:	e003      	b.n	8000c70 <PresentaFechaLCD+0x28>
	  else PosCaracLLcd(pos);
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff48 	bl	8000b00 <PosCaracLLcd>
	  DatoBCD (reloj1->dia);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fed2 	bl	8000a1e <DatoBCD>
	  DatoLcd('/');
 8000c7a:	202f      	movs	r0, #47	; 0x2f
 8000c7c:	f7ff feb1 	bl	80009e2 <DatoLcd>
	  DatoBCD (reloj1->mes);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	795b      	ldrb	r3, [r3, #5]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff feca 	bl	8000a1e <DatoBCD>
	  DatoLcd('/');
 8000c8a:	202f      	movs	r0, #47	; 0x2f
 8000c8c:	f7ff fea9 	bl	80009e2 <DatoLcd>
	  DatoBCD (reloj1->anio);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	799b      	ldrb	r3, [r3, #6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fec2 	bl	8000a1e <DatoBCD>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <PresentaHoraLCD>:

void PresentaHoraLCD(reloj* reloj1,uint8_t pos,uint8_t linea){
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	70bb      	strb	r3, [r7, #2]

	  if(linea==1)PosCaracHLcd(pos);
 8000cb2:	78bb      	ldrb	r3, [r7, #2]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <PresentaHoraLCD+0x20>
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff10 	bl	8000ae0 <PosCaracHLcd>
 8000cc0:	e003      	b.n	8000cca <PresentaHoraLCD+0x28>
	  else PosCaracLLcd(pos);
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff1b 	bl	8000b00 <PosCaracLLcd>
	  DatoBCD (reloj1->hora);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fea5 	bl	8000a1e <DatoBCD>
	  DatoLcd(':');
 8000cd4:	203a      	movs	r0, #58	; 0x3a
 8000cd6:	f7ff fe84 	bl	80009e2 <DatoLcd>
	  DatoBCD (reloj1->min);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	785b      	ldrb	r3, [r3, #1]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe9d 	bl	8000a1e <DatoBCD>
	  DatoLcd(':');
 8000ce4:	203a      	movs	r0, #58	; 0x3a
 8000ce6:	f7ff fe7c 	bl	80009e2 <DatoLcd>
	  DatoBCD (reloj1->seg);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe95 	bl	8000a1e <DatoBCD>

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <RelojInit>:
void RelojInit(reloj* reloj1){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	estado_reloj=PRESENTAR;
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <RelojInit+0x1c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	reloj1->diasem=0;
	reloj1->dia=1;
	reloj1->mes=1;
	reloj1->anio=0;*/

}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000a8 	.word	0x200000a8

08000d1c <Reloj_Read>:

void Reloj_Read(reloj* reloj1){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

	RTC_Read_Cal(reloj1);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fb51 	bl	80013cc <RTC_Read_Cal>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <Reloj_Write>:

void Reloj_Write(reloj reloj1){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	463b      	mov	r3, r7
 8000d3a:	e883 0003 	stmia.w	r3, {r0, r1}
	RTC_Write_Cal(reloj1);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d44:	f000 fb24 	bl	8001390 <RTC_Write_Cal>

}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <RelojFSM_Update>:

void RelojFSM_Update(reloj* reloj1){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

	switch(estado_reloj){
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <RelojFSM_Update+0xa0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b06      	cmp	r3, #6
 8000d5e:	d842      	bhi.n	8000de6 <RelojFSM_Update+0x96>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <RelojFSM_Update+0x18>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d85 	.word	0x08000d85
 8000d6c:	08000db5 	.word	0x08000db5
 8000d70:	08000dbd 	.word	0x08000dbd
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dcd 	.word	0x08000dcd
 8000d7c:	08000dd5 	.word	0x08000dd5
 8000d80:	08000ddd 	.word	0x08000ddd
		case PRESENTAR: Reloj_Read(reloj1);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffc9 	bl	8000d1c <Reloj_Read>
						PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff5a 	bl	8000c48 <PresentaFechaLCD>
						PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8000d94:	2202      	movs	r2, #2
 8000d96:	2104      	movs	r1, #4
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff82 	bl	8000ca2 <PresentaHoraLCD>
     					if(readKey()==true){
 8000d9e:	f7ff fc99 	bl	80006d4 <readKey>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d01d      	beq.n	8000de4 <RelojFSM_Update+0x94>
     						CursorOnLcd();
 8000da8:	f7ff fec1 	bl	8000b2e <CursorOnLcd>
     						estado_reloj=CONFIGURAR_DIA;
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <RelojFSM_Update+0xa0>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
     					}
						break;
 8000db2:	e017      	b.n	8000de4 <RelojFSM_Update+0x94>
		case CONFIGURAR_DIA:
						ConfiguraDia(reloj1);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f81d 	bl	8000df4 <ConfiguraDia>
						break;
 8000dba:	e014      	b.n	8000de6 <RelojFSM_Update+0x96>
		case CONFIGURAR_MES:
						ConfiguraMes(reloj1);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f8a5 	bl	8000f0c <ConfiguraMes>
						break;
 8000dc2:	e010      	b.n	8000de6 <RelojFSM_Update+0x96>
		case CONFIGURAR_ANIO:
						ConfiguraAnio(reloj1);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f913 	bl	8000ff0 <ConfiguraAnio>
						break;
 8000dca:	e00c      	b.n	8000de6 <RelojFSM_Update+0x96>
		case CONFIGURAR_HORA:
						ConfiguraHora(reloj1);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f977 	bl	80010c0 <ConfiguraHora>
						break;
 8000dd2:	e008      	b.n	8000de6 <RelojFSM_Update+0x96>
		case CONFIGURAR_MIN:
						ConfiguraMin(reloj1);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f9ad 	bl	8001134 <ConfiguraMin>
						break;
 8000dda:	e004      	b.n	8000de6 <RelojFSM_Update+0x96>
		case CONFIGURAR_SEG:
						ConfiguraSeg(reloj1);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 f9e3 	bl	80011a8 <ConfiguraSeg>
						break;
 8000de2:	e000      	b.n	8000de6 <RelojFSM_Update+0x96>
						break;
 8000de4:	bf00      	nop
	}


}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000a8 	.word	0x200000a8

08000df4 <ConfiguraDia>:

void ConfiguraDia(reloj* reloj1){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSFECHA);
 8000e00:	2005      	movs	r0, #5
 8000e02:	f7ff fe6d 	bl	8000ae0 <PosCaracHLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_MES;
 8000e06:	f7ff fc65 	bl	80006d4 <readKey>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <ConfiguraDia+0x22>
 8000e10:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <ConfiguraDia+0x114>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8000e16:	f7ff fd7b 	bl	8000910 <ReadEncoder>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d134      	bne.n	8000e8e <ConfiguraDia+0x9a>
		Decrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3304      	adds	r3, #4
 8000e28:	221f      	movs	r2, #31
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fa05 	bl	800123c <Decrementa>
		if(reloj1->dia==0x30 && reloj1->mes==FEBRERO)reloj1->mes=MARZO;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	2b30      	cmp	r3, #48	; 0x30
 8000e38:	d106      	bne.n	8000e48 <ConfiguraDia+0x54>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d102      	bne.n	8000e48 <ConfiguraDia+0x54>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	715a      	strb	r2, [r3, #5]
		if(reloj1->dia==0x31 && (reloj1->mes==FEBRERO || reloj1->mes==ABRIL || reloj1->mes==JUNIO || reloj1->mes==SEPTIEMBRE || reloj1->mes==NOVIEMBRE))(reloj1->mes)--;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	791b      	ldrb	r3, [r3, #4]
 8000e4c:	2b31      	cmp	r3, #49	; 0x31
 8000e4e:	d119      	bne.n	8000e84 <ConfiguraDia+0x90>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	795b      	ldrb	r3, [r3, #5]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d00f      	beq.n	8000e78 <ConfiguraDia+0x84>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	795b      	ldrb	r3, [r3, #5]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00b      	beq.n	8000e78 <ConfiguraDia+0x84>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d007      	beq.n	8000e78 <ConfiguraDia+0x84>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b09      	cmp	r3, #9
 8000e6e:	d003      	beq.n	8000e78 <ConfiguraDia+0x84>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	2b11      	cmp	r3, #17
 8000e76:	d105      	bne.n	8000e84 <ConfiguraDia+0x90>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	795b      	ldrb	r3, [r3, #5]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	715a      	strb	r2, [r3, #5]
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2104      	movs	r1, #4
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fedd 	bl	8000c48 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d134      	bne.n	8000efe <ConfiguraDia+0x10a>
		Incrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3304      	adds	r3, #4
 8000e98:	221f      	movs	r2, #31
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fa11 	bl	80012c4 <Incrementa>

		if(reloj1->dia==0x30 && reloj1->mes==FEBRERO)reloj1->mes=MARZO;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	2b30      	cmp	r3, #48	; 0x30
 8000ea8:	d106      	bne.n	8000eb8 <ConfiguraDia+0xc4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d102      	bne.n	8000eb8 <ConfiguraDia+0xc4>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	715a      	strb	r2, [r3, #5]
		if(reloj1->dia==0x31 && (reloj1->mes==FEBRERO || reloj1->mes==ABRIL || reloj1->mes==JUNIO || reloj1->mes==SEPTIEMBRE || reloj1->mes==NOVIEMBRE))(reloj1->mes)++;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	791b      	ldrb	r3, [r3, #4]
 8000ebc:	2b31      	cmp	r3, #49	; 0x31
 8000ebe:	d119      	bne.n	8000ef4 <ConfiguraDia+0x100>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	795b      	ldrb	r3, [r3, #5]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d00f      	beq.n	8000ee8 <ConfiguraDia+0xf4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	795b      	ldrb	r3, [r3, #5]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d00b      	beq.n	8000ee8 <ConfiguraDia+0xf4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	2b06      	cmp	r3, #6
 8000ed6:	d007      	beq.n	8000ee8 <ConfiguraDia+0xf4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	2b09      	cmp	r3, #9
 8000ede:	d003      	beq.n	8000ee8 <ConfiguraDia+0xf4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	795b      	ldrb	r3, [r3, #5]
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d105      	bne.n	8000ef4 <ConfiguraDia+0x100>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	795b      	ldrb	r3, [r3, #5]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	715a      	strb	r2, [r3, #5]
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fea5 	bl	8000c48 <PresentaFechaLCD>
	}

}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000a8 	.word	0x200000a8

08000f0c <ConfiguraMes>:



void ConfiguraMes(reloj* reloj1){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSMES);
 8000f18:	2008      	movs	r0, #8
 8000f1a:	f7ff fde1 	bl	8000ae0 <PosCaracHLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_ANIO;
 8000f1e:	f7ff fbd9 	bl	80006d4 <readKey>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <ConfiguraMes+0x22>
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <ConfiguraMes+0xdc>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8000f2e:	f7ff fcef 	bl	8000910 <ReadEncoder>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d126      	bne.n	8000f8a <ConfiguraMes+0x7e>
		if((reloj1->dia)!=0x31)Decrementa(&(reloj1->mes),MESMIN,MESMAX);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	2b31      	cmp	r3, #49	; 0x31
 8000f42:	d007      	beq.n	8000f54 <ConfiguraMes+0x48>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3305      	adds	r3, #5
 8000f48:	220c      	movs	r2, #12
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f975 	bl	800123c <Decrementa>
 8000f52:	e015      	b.n	8000f80 <ConfiguraMes+0x74>
		else{
			uint8_t indice=buscar_indice((uint8_t *)mes31,reloj1->mes,sizeof(mes31));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	2207      	movs	r2, #7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4823      	ldr	r0, [pc, #140]	; (8000fec <ConfiguraMes+0xe0>)
 8000f5e:	f000 f9f3 	bl	8001348 <buscar_indice>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73bb      	strb	r3, [r7, #14]
			if(indice==0)reloj1->mes=mes31[sizeof(mes31)-1];
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <ConfiguraMes+0x68>
 8000f6c:	2212      	movs	r2, #18
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	715a      	strb	r2, [r3, #5]
 8000f72:	e005      	b.n	8000f80 <ConfiguraMes+0x74>
			else reloj1->mes=mes31[indice-1];
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <ConfiguraMes+0xe0>)
 8000f7a:	5cd2      	ldrb	r2, [r2, r3]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	715a      	strb	r2, [r3, #5]
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2104      	movs	r1, #4
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fe5f 	bl	8000c48 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d126      	bne.n	8000fde <ConfiguraMes+0xd2>
		if((reloj1->dia)!=0x31)Incrementa(&(reloj1->mes),MESMIN,MESMAX);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	2b31      	cmp	r3, #49	; 0x31
 8000f96:	d007      	beq.n	8000fa8 <ConfiguraMes+0x9c>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3305      	adds	r3, #5
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f98f 	bl	80012c4 <Incrementa>
 8000fa6:	e015      	b.n	8000fd4 <ConfiguraMes+0xc8>
		else{
			uint8_t indice=buscar_indice((uint8_t *)mes31,reloj1->mes,sizeof(mes31));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	2207      	movs	r2, #7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <ConfiguraMes+0xe0>)
 8000fb2:	f000 f9c9 	bl	8001348 <buscar_indice>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	737b      	strb	r3, [r7, #13]
			if(indice==sizeof(mes31)-1)reloj1->mes=mes31[0];
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d103      	bne.n	8000fc8 <ConfiguraMes+0xbc>
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	715a      	strb	r2, [r3, #5]
 8000fc6:	e005      	b.n	8000fd4 <ConfiguraMes+0xc8>
			else reloj1->mes=mes31[indice+1];
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <ConfiguraMes+0xe0>)
 8000fce:	5cd2      	ldrb	r2, [r2, r3]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	715a      	strb	r2, [r3, #5]
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff fe35 	bl	8000c48 <PresentaFechaLCD>
	}
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000a8 	.word	0x200000a8
 8000fec:	08003994 	.word	0x08003994

08000ff0 <ConfiguraAnio>:

void ConfiguraAnio(reloj* reloj1){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSANIO);
 8000ffc:	200b      	movs	r0, #11
 8000ffe:	f7ff fd6f 	bl	8000ae0 <PosCaracHLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_HORA;
 8001002:	f7ff fb67 	bl	80006d4 <readKey>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <ConfiguraAnio+0x22>
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <ConfiguraAnio+0xcc>)
 800100e:	2204      	movs	r2, #4
 8001010:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8001012:	f7ff fc7d 	bl	8000910 <ReadEncoder>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d122      	bne.n	8001066 <ConfiguraAnio+0x76>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d112      	bne.n	800104e <ConfiguraAnio+0x5e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	2b29      	cmp	r3, #41	; 0x29
 800102e:	d10e      	bne.n	800104e <ConfiguraAnio+0x5e>
			do{
				Decrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3306      	adds	r3, #6
 8001034:	2263      	movs	r2, #99	; 0x63
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f8ff 	bl	800123c <Decrementa>
			}while((reloj1->anio)%4);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	799b      	ldrb	r3, [r3, #6]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f1      	bne.n	8001030 <ConfiguraAnio+0x40>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 800104c:	e006      	b.n	800105c <ConfiguraAnio+0x6c>
		}
		else Decrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3306      	adds	r3, #6
 8001052:	2263      	movs	r2, #99	; 0x63
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f8f0 	bl	800123c <Decrementa>

		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 800105c:	2201      	movs	r2, #1
 800105e:	2104      	movs	r1, #4
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fdf1 	bl	8000c48 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d122      	bne.n	80010b2 <ConfiguraAnio+0xc2>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	795b      	ldrb	r3, [r3, #5]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d112      	bne.n	800109a <ConfiguraAnio+0xaa>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	2b29      	cmp	r3, #41	; 0x29
 800107a:	d10e      	bne.n	800109a <ConfiguraAnio+0xaa>
			do{
				Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3306      	adds	r3, #6
 8001080:	2263      	movs	r2, #99	; 0x63
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f91d 	bl	80012c4 <Incrementa>
			}while((reloj1->anio)%4);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	799b      	ldrb	r3, [r3, #6]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f1      	bne.n	800107c <ConfiguraAnio+0x8c>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001098:	e006      	b.n	80010a8 <ConfiguraAnio+0xb8>
		}
		else Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3306      	adds	r3, #6
 800109e:	2263      	movs	r2, #99	; 0x63
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f90e 	bl	80012c4 <Incrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2104      	movs	r1, #4
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fdcb 	bl	8000c48 <PresentaFechaLCD>
	}
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000a8 	.word	0x200000a8

080010c0 <ConfiguraHora>:

void ConfiguraHora(reloj* reloj1){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSHORA);
 80010cc:	2005      	movs	r0, #5
 80010ce:	f7ff fd17 	bl	8000b00 <PosCaracLLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_MIN;
 80010d2:	f7ff faff 	bl	80006d4 <readKey>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <ConfiguraHora+0x22>
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <ConfiguraHora+0x70>)
 80010de:	2205      	movs	r2, #5
 80010e0:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 80010e2:	f7ff fc15 	bl	8000910 <ReadEncoder>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d10b      	bne.n	8001108 <ConfiguraHora+0x48>
		Decrementa(&(reloj1->hora),HORAMIN,HORAMAX);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3302      	adds	r3, #2
 80010f4:	2217      	movs	r2, #23
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f89f 	bl	800123c <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 80010fe:	2202      	movs	r2, #2
 8001100:	2104      	movs	r1, #4
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fdcd 	bl	8000ca2 <PresentaHoraLCD>
	}
	if(encoder==DER){
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d10b      	bne.n	8001126 <ConfiguraHora+0x66>
		Incrementa(&(reloj1->hora),HORAMIN,HORAMAX);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	2217      	movs	r2, #23
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f8d4 	bl	80012c4 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 800111c:	2202      	movs	r2, #2
 800111e:	2104      	movs	r1, #4
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fdbe 	bl	8000ca2 <PresentaHoraLCD>
	}
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000a8 	.word	0x200000a8

08001134 <ConfiguraMin>:
void ConfiguraMin(reloj* reloj1){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSMIN);
 8001140:	2008      	movs	r0, #8
 8001142:	f7ff fcdd 	bl	8000b00 <PosCaracLLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_SEG;
 8001146:	f7ff fac5 	bl	80006d4 <readKey>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <ConfiguraMin+0x22>
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <ConfiguraMin+0x70>)
 8001152:	2206      	movs	r2, #6
 8001154:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8001156:	f7ff fbdb 	bl	8000910 <ReadEncoder>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d10b      	bne.n	800117c <ConfiguraMin+0x48>
		Decrementa(&(reloj1->min),MINMIN,MINMAX);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3301      	adds	r3, #1
 8001168:	223b      	movs	r2, #59	; 0x3b
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f865 	bl	800123c <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001172:	2202      	movs	r2, #2
 8001174:	2104      	movs	r1, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fd93 	bl	8000ca2 <PresentaHoraLCD>
	}
	if(encoder==DER){
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d10b      	bne.n	800119a <ConfiguraMin+0x66>
		Incrementa(&(reloj1->min),MINMIN,MINMAX);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	223b      	movs	r2, #59	; 0x3b
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f89a 	bl	80012c4 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001190:	2202      	movs	r2, #2
 8001192:	2104      	movs	r1, #4
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fd84 	bl	8000ca2 <PresentaHoraLCD>
	}
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000a8 	.word	0x200000a8

080011a8 <ConfiguraSeg>:
void ConfiguraSeg(reloj* reloj1){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSSEG);
 80011b4:	200b      	movs	r0, #11
 80011b6:	f7ff fca3 	bl	8000b00 <PosCaracLLcd>
	if(readKey()==true){
 80011ba:	f7ff fa8b 	bl	80006d4 <readKey>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d014      	beq.n	80011ee <ConfiguraSeg+0x46>
		CursorOffLcd();
 80011c4:	f7ff fcac 	bl	8000b20 <CursorOffLcd>
		Reloj_Write(*reloj1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4610      	mov	r0, r2
 80011ce:	791a      	ldrb	r2, [r3, #4]
 80011d0:	7959      	ldrb	r1, [r3, #5]
 80011d2:	0209      	lsls	r1, r1, #8
 80011d4:	430a      	orrs	r2, r1
 80011d6:	799b      	ldrb	r3, [r3, #6]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	2300      	movs	r3, #0
 80011de:	f362 0317 	bfi	r3, r2, #0, #24
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fda5 	bl	8000d32 <Reloj_Write>
		estado_reloj=PRESENTAR;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <ConfiguraSeg+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
	}
	encoder=ReadEncoder();
 80011ee:	f7ff fb8f 	bl	8000910 <ReadEncoder>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10a      	bne.n	8001212 <ConfiguraSeg+0x6a>
		Decrementa(&(reloj1->seg),SEGMIN,SEGMAX);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	223b      	movs	r2, #59	; 0x3b
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f81a 	bl	800123c <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001208:	2202      	movs	r2, #2
 800120a:	2104      	movs	r1, #4
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fd48 	bl	8000ca2 <PresentaHoraLCD>
	}
	if(encoder==DER){
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d10a      	bne.n	800122e <ConfiguraSeg+0x86>
		Incrementa(&(reloj1->seg),SEGMIN,SEGMAX);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	223b      	movs	r2, #59	; 0x3b
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f850 	bl	80012c4 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001224:	2202      	movs	r2, #2
 8001226:	2104      	movs	r1, #4
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fd3a 	bl	8000ca2 <PresentaHoraLCD>
	}

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000a8 	.word	0x200000a8

0800123c <Decrementa>:
void Decrementa(uint8_t * valor,uint8_t limiteInf,uint8_t limiteSup){
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
 8001248:	4613      	mov	r3, r2
 800124a:	70bb      	strb	r3, [r7, #2]

	uint8_t aux;
	aux=(*valor&0x0f)+(((*valor&0xf0)>>4)*10);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	0089      	lsls	r1, r1, #2
 8001262:	440b      	add	r3, r1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	73fb      	strb	r3, [r7, #15]
	if(aux==limiteInf)aux=limiteSup;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	429a      	cmp	r2, r3
 8001272:	d102      	bne.n	800127a <Decrementa+0x3e>
 8001274:	78bb      	ldrb	r3, [r7, #2]
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e002      	b.n	8001280 <Decrementa+0x44>
	else aux--;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3b01      	subs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
	*valor=((aux/10)<<4)|(aux%10);
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <Decrementa+0x84>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b258      	sxtb	r0, r3
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <Decrementa+0x84>)
 8001294:	fba3 1302 	umull	r1, r3, r3, r2
 8001298:	08d9      	lsrs	r1, r3, #3
 800129a:	460b      	mov	r3, r1
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	4303      	orrs	r3, r0
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	701a      	strb	r2, [r3, #0]

}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	cccccccd 	.word	0xcccccccd

080012c4 <Incrementa>:

void Incrementa(uint8_t * valor,uint8_t limiteInf,uint8_t limiteSup){
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
 80012d0:	4613      	mov	r3, r2
 80012d2:	70bb      	strb	r3, [r7, #2]
	uint8_t aux;
	aux=(*valor&0x0f)+(((*valor&0xf0)>>4)*10);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	0089      	lsls	r1, r1, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	73fb      	strb	r3, [r7, #15]
	aux++;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
	if(aux>limiteSup)aux=limiteInf;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	78bb      	ldrb	r3, [r7, #2]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d901      	bls.n	8001306 <Incrementa+0x42>
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	73fb      	strb	r3, [r7, #15]
	*valor=((aux/10)<<4)|(aux%10);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <Incrementa+0x80>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b258      	sxtb	r0, r3
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <Incrementa+0x80>)
 800131a:	fba3 1302 	umull	r1, r3, r3, r2
 800131e:	08d9      	lsrs	r1, r3, #3
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4303      	orrs	r3, r0
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	701a      	strb	r2, [r3, #0]

}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	cccccccd 	.word	0xcccccccd

08001348 <buscar_indice>:

uint8_t buscar_indice (uint8_t * valor,uint8_t abuscar,uint8_t limite){
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
 8001354:	4613      	mov	r3, r2
 8001356:	70bb      	strb	r3, [r7, #2]

	for(int i=0;i<limite;i++)if(valor[i]==abuscar)return i;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e00c      	b.n	8001378 <buscar_indice+0x30>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	429a      	cmp	r2, r3
 800136a:	d102      	bne.n	8001372 <buscar_indice+0x2a>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	e007      	b.n	8001382 <buscar_indice+0x3a>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	78bb      	ldrb	r3, [r7, #2]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbee      	blt.n	800135e <buscar_indice+0x16>
	return -1;
 8001380:	23ff      	movs	r3, #255	; 0xff


}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <RTC_Write_Cal>:
#include "API_rtc.h"


extern I2C_HandleTypeDef hi2c1;

void RTC_Write_Cal(reloj reloj1){
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af04      	add	r7, sp, #16
 8001396:	463b      	mov	r3, r7
 8001398:	e883 0003 	stmia.w	r3, {r0, r1}

	if(HAL_I2C_Mem_Write(&hi2c1,0x68<<1,0,I2C_MEMADD_SIZE_8BIT,&reloj1,sizeof(reloj),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2307      	movs	r3, #7
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	463b      	mov	r3, r7
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2200      	movs	r2, #0
 80013ae:	21d0      	movs	r1, #208	; 0xd0
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <RTC_Write_Cal+0x38>)
 80013b2:	f000 fe95 	bl	80020e0 <HAL_I2C_Mem_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <RTC_Write_Cal+0x30>
 80013bc:	f7ff f8fa 	bl	80005b4 <Error_Handler>

}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000054 	.word	0x20000054

080013cc <RTC_Read_Cal>:

void RTC_Read_Cal(reloj * reloj1){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1,0x68<<1,0,I2C_MEMADD_SIZE_8BIT,(uint8_t *)reloj1,sizeof(reloj),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2307      	movs	r3, #7
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	2200      	movs	r2, #0
 80013e6:	21d0      	movs	r1, #208	; 0xd0
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <RTC_Read_Cal+0x34>)
 80013ea:	f000 ff73 	bl	80022d4 <HAL_I2C_Mem_Read>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <RTC_Read_Cal+0x2c>
 80013f4:	f7ff f8de 	bl	80005b4 <Error_Handler>

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000054 	.word	0x20000054

08001404 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10e      	bne.n	8001432 <BSP_LED_Init+0x2e>
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <BSP_LED_Init+0x94>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <BSP_LED_Init+0x94>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <BSP_LED_Init+0x94>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	e00d      	b.n	800144e <BSP_LED_Init+0x4a>
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <BSP_LED_Init+0x94>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <BSP_LED_Init+0x94>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <BSP_LED_Init+0x94>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <BSP_LED_Init+0x98>)
 8001452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <BSP_LED_Init+0x9c>)
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	f107 0214 	add.w	r2, r7, #20
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fa0a 	bl	800188c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <BSP_LED_Init+0x9c>)
 800147c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <BSP_LED_Init+0x98>)
 8001484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	f000 fbc2 	bl	8001c14 <HAL_GPIO_WritePin>
}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	0800399c 	.word	0x0800399c
 80014a0:	20000000 	.word	0x20000000

080014a4 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <BSP_LED_On+0x2c>)
 80014b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <BSP_LED_On+0x30>)
 80014ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	f000 fba7 	bl	8001c14 <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000000 	.word	0x20000000
 80014d4:	0800399c 	.word	0x0800399c

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <SystemInit+0x60>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <SystemInit+0x60>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <SystemInit+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <SystemInit+0x64>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <SystemInit+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <SystemInit+0x64>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <SystemInit+0x64>)
 8001504:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <SystemInit+0x64>)
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <SystemInit+0x68>)
 8001512:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <SystemInit+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a08      	ldr	r2, [pc, #32]	; (800153c <SystemInit+0x64>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SystemInit+0x60>)
 8001528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152c:	609a      	str	r2, [r3, #8]
#endif
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	40023800 	.word	0x40023800
 8001540:	24003010 	.word	0x24003010

08001544 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001598:	f000 f84e 	bl	8001638 <HAL_IncTick>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_Init+0x34>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_Init+0x34>)
 80015aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ae:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_Init+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x34>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f931 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f001 fc87 	bl	8002eda <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f93b 	bl	8001872 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f911 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000014 	.word	0x20000014
 8001634:	20000010 	.word	0x20000010

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000014 	.word	0x20000014
 800165c:	200000ac 	.word	0x200000ac

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200000ac 	.word	0x200000ac

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000014 	.word	0x20000014

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff47 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff5c 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffb0 	bl	80017e0 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e177      	b.n	8001b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8166 	bne.w	8001b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80c0 	beq.w	8001b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a61      	ldr	r2, [pc, #388]	; (8001bb4 <HAL_GPIO_Init+0x328>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_GPIO_Init+0x32c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d037      	beq.n	8001aca <HAL_GPIO_Init+0x23e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d031      	beq.n	8001ac6 <HAL_GPIO_Init+0x23a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_GPIO_Init+0x334>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d02b      	beq.n	8001ac2 <HAL_GPIO_Init+0x236>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <HAL_GPIO_Init+0x338>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d025      	beq.n	8001abe <HAL_GPIO_Init+0x232>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_GPIO_Init+0x33c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01f      	beq.n	8001aba <HAL_GPIO_Init+0x22e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a53      	ldr	r2, [pc, #332]	; (8001bcc <HAL_GPIO_Init+0x340>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x22a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x344>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x348>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x222>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x34c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x21e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	e012      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	e010      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aaa:	2308      	movs	r3, #8
 8001aac:	e00e      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x240>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x328>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0e:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b14:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_GPIO_Init+0x354>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f ae84 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40021c00 	.word	0x40021c00
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40022400 	.word	0x40022400
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e12b      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f92e 	bl	8001ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cac:	f001 fddc 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d807      	bhi.n	8001ccc <HAL_I2C_Init+0x84>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a80      	ldr	r2, [pc, #512]	; (8001ec0 <HAL_I2C_Init+0x278>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e006      	b.n	8001cda <HAL_I2C_Init+0x92>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a7d      	ldr	r2, [pc, #500]	; (8001ec4 <HAL_I2C_Init+0x27c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e7      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a78      	ldr	r2, [pc, #480]	; (8001ec8 <HAL_I2C_Init+0x280>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d802      	bhi.n	8001d1c <HAL_I2C_Init+0xd4>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	e009      	b.n	8001d30 <HAL_I2C_Init+0xe8>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <HAL_I2C_Init+0x284>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	495c      	ldr	r1, [pc, #368]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d819      	bhi.n	8001d84 <HAL_I2C_Init+0x13c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e59      	subs	r1, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d64:	400b      	ands	r3, r1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_I2C_Init+0x138>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e59      	subs	r1, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	e051      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e04f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <HAL_I2C_Init+0x168>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e012      	b.n	8001dd6 <HAL_I2C_Init+0x18e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	0099      	lsls	r1, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x196>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e022      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10e      	bne.n	8001e04 <HAL_I2C_Init+0x1bc>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e58      	subs	r0, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	6809      	ldr	r1, [r1, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6911      	ldr	r1, [r2, #16]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	000186a0 	.word	0x000186a0
 8001ec0:	001e847f 	.word	0x001e847f
 8001ec4:	003d08ff 	.word	0x003d08ff
 8001ec8:	431bde83 	.word	0x431bde83
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff fbb2 	bl	8001660 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	f040 80e0 	bne.w	80020cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	4970      	ldr	r1, [pc, #448]	; (80020d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fe02 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e0d3      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Transmit+0x50>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0cc      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d007      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_I2C_Master_Transmit+0x1f8>)
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fbbc 	bl	8002720 <I2C_MasterRequestWrite>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e08d      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fc8:	e066      	b.n	8002098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	6a39      	ldr	r1, [r7, #32]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fe7c 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d11b      	bne.n	800206c <HAL_I2C_Master_Transmit+0x188>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	d017      	beq.n	800206c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	6a39      	ldr	r1, [r7, #32]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fe6c 	bl	8002d4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b04      	cmp	r3, #4
 8002082:	d107      	bne.n	8002094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e01a      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d194      	bne.n	8001fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e000      	b.n	80020ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	00100002 	.word	0x00100002
 80020dc:	ffff0000 	.word	0xffff0000

080020e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	817b      	strh	r3, [r7, #10]
 80020f2:	460b      	mov	r3, r1
 80020f4:	813b      	strh	r3, [r7, #8]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fa:	f7ff fab1 	bl	8001660 <HAL_GetTick>
 80020fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b20      	cmp	r3, #32
 800210a:	f040 80d9 	bne.w	80022c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2319      	movs	r3, #25
 8002114:	2201      	movs	r2, #1
 8002116:	496d      	ldr	r1, [pc, #436]	; (80022cc <HAL_I2C_Mem_Write+0x1ec>)
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fd01 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	e0cc      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_I2C_Mem_Write+0x56>
 8002132:	2302      	movs	r3, #2
 8002134:	e0c5      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d007      	beq.n	800215c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2221      	movs	r2, #33	; 0x21
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2240      	movs	r2, #64	; 0x40
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_I2C_Mem_Write+0x1f0>)
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219e:	88f8      	ldrh	r0, [r7, #6]
 80021a0:	893a      	ldrh	r2, [r7, #8]
 80021a2:	8979      	ldrh	r1, [r7, #10]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	4603      	mov	r3, r0
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fb38 	bl	8002824 <I2C_RequestMemoryWrite>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d052      	beq.n	8002260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e081      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fd82 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d11b      	bne.n	8002260 <HAL_I2C_Mem_Write+0x180>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d017      	beq.n	8002260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1aa      	bne.n	80021be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fd6e 	bl	8002d4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00d      	beq.n	8002294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2b04      	cmp	r3, #4
 800227e:	d107      	bne.n	8002290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e016      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00100002 	.word	0x00100002
 80022d0:	ffff0000 	.word	0xffff0000

080022d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	460b      	mov	r3, r1
 80022e8:	813b      	strh	r3, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ee:	f7ff f9b7 	bl	8001660 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	f040 8208 	bne.w	8002712 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2319      	movs	r3, #25
 8002308:	2201      	movs	r2, #1
 800230a:	497b      	ldr	r1, [pc, #492]	; (80024f8 <HAL_I2C_Mem_Read+0x224>)
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fc07 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
 800231a:	e1fb      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_I2C_Mem_Read+0x56>
 8002326:	2302      	movs	r3, #2
 8002328:	e1f4      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d007      	beq.n	8002350 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2222      	movs	r2, #34	; 0x22
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_I2C_Mem_Read+0x228>)
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002392:	88f8      	ldrh	r0, [r7, #6]
 8002394:	893a      	ldrh	r2, [r7, #8]
 8002396:	8979      	ldrh	r1, [r7, #10]
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4603      	mov	r3, r0
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fad4 	bl	8002950 <I2C_RequestMemoryRead>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1b0      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d113      	bne.n	80023e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e184      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d11b      	bne.n	8002422 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e164      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	2b02      	cmp	r3, #2
 8002428:	d11b      	bne.n	8002462 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	e144      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002478:	e138      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	2b03      	cmp	r3, #3
 8002480:	f200 80f1 	bhi.w	8002666 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b01      	cmp	r3, #1
 800248a:	d123      	bne.n	80024d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fc9d 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e139      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d2:	e10b      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d14e      	bne.n	800257a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	2200      	movs	r2, #0
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <HAL_I2C_Mem_Read+0x22c>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fb1a 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e10e      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
 80024f6:	bf00      	nop
 80024f8:	00100002 	.word	0x00100002
 80024fc:	ffff0000 	.word	0xffff0000
 8002500:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002578:	e0b8      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	2200      	movs	r2, #0
 8002582:	4966      	ldr	r1, [pc, #408]	; (800271c <HAL_I2C_Mem_Read+0x448>)
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 facb 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0bf      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	2200      	movs	r2, #0
 80025de:	494f      	ldr	r1, [pc, #316]	; (800271c <HAL_I2C_Mem_Read+0x448>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fa9d 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e091      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002664:	e042      	b.n	80026ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fbb0 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e04c      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d118      	bne.n	80026ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f aec2 	bne.w	800247a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3728      	adds	r7, #40	; 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	00010004 	.word	0x00010004

08002720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d006      	beq.n	800274a <I2C_MasterRequestWrite+0x2a>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d003      	beq.n	800274a <I2C_MasterRequestWrite+0x2a>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002748:	d108      	bne.n	800275c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e00b      	b.n	8002774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	2b12      	cmp	r3, #18
 8002762:	d107      	bne.n	8002774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f9cd 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279a:	d103      	bne.n	80027a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e035      	b.n	8002814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b0:	d108      	bne.n	80027c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c0:	611a      	str	r2, [r3, #16]
 80027c2:	e01b      	b.n	80027fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	11db      	asrs	r3, r3, #7
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0306 	and.w	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f063 030f 	orn	r3, r3, #15
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <I2C_MasterRequestWrite+0xfc>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f9f3 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e010      	b.n	8002814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <I2C_MasterRequestWrite+0x100>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f9e3 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	00010008 	.word	0x00010008
 8002820:	00010002 	.word	0x00010002

08002824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	460b      	mov	r3, r1
 8002838:	813b      	strh	r3, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2200      	movs	r2, #0
 8002856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f960 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002874:	d103      	bne.n	800287e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e05f      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	492d      	ldr	r1, [pc, #180]	; (800294c <I2C_RequestMemoryWrite+0x128>)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f998 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04c      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa02 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02b      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e021      	b.n	8002940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29b      	uxth	r3, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f9dc 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e005      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002936:	893b      	ldrh	r3, [r7, #8]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	00010002 	.word	0x00010002

08002950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002978:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2200      	movs	r2, #0
 8002992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8c2 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d103      	bne.n	80029ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0aa      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	4952      	ldr	r1, [pc, #328]	; (8002b1c <I2C_RequestMemoryRead+0x1cc>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f8fa 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e097      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f964 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e076      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	e021      	b.n	8002a7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f93e 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e050      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a72:	893b      	ldrh	r3, [r7, #8]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f923 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d107      	bne.n	8002aa4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e035      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f82b 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d103      	bne.n	8002ae8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e013      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <I2C_RequestMemoryRead+0x1cc>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f863 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	00010002 	.word	0x00010002

08002b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b30:	e025      	b.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d021      	beq.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7fe fd91 	bl	8001660 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e023      	b.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10d      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	e00c      	b.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d0b6      	beq.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bdc:	e051      	b.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d123      	bne.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e046      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d021      	beq.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe fd0f 	bl	8001660 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e020      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10c      	bne.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e00b      	b.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d18d      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd8:	e02d      	b.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8ce 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e02d      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d021      	beq.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7fe fcb5 	bl	8001660 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d1ca      	bne.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5a:	e02d      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f88d 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02d      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d021      	beq.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7fe fc74 	bl	8001660 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d1ca      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ddc:	e042      	b.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d119      	bne.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0210 	mvn.w	r2, #16
 8002df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e029      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fe fc1e 	bl	8001660 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d1b5      	bne.n	8002dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d11b      	bne.n	8002ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x94>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f14:	f7fe fba4 	bl	8001660 <HAL_GetTick>
 8002f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f1a:	e009      	b.n	8002f30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f1c:	f7fe fba0 	bl	8001660 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f2a:	d901      	bls.n	8002f30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e01f      	b.n	8002f70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d1ee      	bne.n	8002f1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f44:	f7fe fb8c 	bl	8001660 <HAL_GetTick>
 8002f48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f4a:	e009      	b.n	8002f60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f4c:	f7fe fb88 	bl	8001660 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5a:	d901      	bls.n	8002f60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e007      	b.n	8002f70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	420e0040 	.word	0x420e0040
 8002f80:	40007000 	.word	0x40007000
 8002f84:	420e0044 	.word	0x420e0044

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e267      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa6:	4b88      	ldr	r3, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d00c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4b85      	ldr	r3, [pc, #532]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d112      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	4b82      	ldr	r3, [pc, #520]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d05b      	beq.n	8003090 <HAL_RCC_OscConfig+0x108>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d157      	bne.n	8003090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e242      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d106      	bne.n	8002ffc <HAL_RCC_OscConfig+0x74>
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a75      	ldr	r2, [pc, #468]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x98>
 8003006:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6f      	ldr	r2, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6c      	ldr	r2, [pc, #432]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8003020:	4b69      	ldr	r3, [pc, #420]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a68      	ldr	r2, [pc, #416]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a65      	ldr	r2, [pc, #404]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fb0e 	bl	8001660 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fb0a 	bl	8001660 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e207      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b5b      	ldr	r3, [pc, #364]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xc0>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fafa 	bl	8001660 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe faf6 	bl	8001660 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1f3      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b51      	ldr	r3, [pc, #324]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0xe8>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d063      	beq.n	8003166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309e:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1c7      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4937      	ldr	r1, [pc, #220]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e03a      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x244>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fe faaf 	bl	8001660 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003106:	f7fe faab 	bl	8001660 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1a8      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4925      	ldr	r1, [pc, #148]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x244>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fa8e 	bl	8001660 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe fa8a 	bl	8001660 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e187      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d036      	beq.n	80031e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d016      	beq.n	80031a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_RCC_OscConfig+0x248>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fa6e 	bl	8001660 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe fa6a 	bl	8001660 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e167      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x240>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x200>
 80031a6:	e01b      	b.n	80031e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_OscConfig+0x248>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fa57 	bl	8001660 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e00e      	b.n	80031d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fa53 	bl	8001660 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d907      	bls.n	80031d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e150      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470000 	.word	0x42470000
 80031d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ea      	bne.n	80031b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8097 	beq.w	800331c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b81      	ldr	r3, [pc, #516]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a7c      	ldr	r2, [pc, #496]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b7a      	ldr	r3, [pc, #488]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b77      	ldr	r3, [pc, #476]	; (80033fc <HAL_RCC_OscConfig+0x474>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322a:	4b74      	ldr	r3, [pc, #464]	; (80033fc <HAL_RCC_OscConfig+0x474>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a73      	ldr	r2, [pc, #460]	; (80033fc <HAL_RCC_OscConfig+0x474>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fe fa13 	bl	8001660 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe fa0f 	bl	8001660 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e10c      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCC_OscConfig+0x474>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x2ea>
 8003264:	4b64      	ldr	r3, [pc, #400]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a63      	ldr	r2, [pc, #396]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	e01c      	b.n	80032ac <HAL_RCC_OscConfig+0x324>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x30c>
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a5e      	ldr	r2, [pc, #376]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0x324>
 8003294:	4b58      	ldr	r3, [pc, #352]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a57      	ldr	r2, [pc, #348]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a54      	ldr	r2, [pc, #336]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80032a6:	f023 0304 	bic.w	r3, r3, #4
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d015      	beq.n	80032e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fe f9d4 	bl	8001660 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe f9d0 	bl	8001660 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0cb      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ee      	beq.n	80032bc <HAL_RCC_OscConfig+0x334>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe f9be 	bl	8001660 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe f9ba 	bl	8001660 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0b5      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fe:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a1 	beq.w	8003468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d05c      	beq.n	80033ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d141      	bne.n	80033be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_OscConfig+0x478>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe f98e 	bl	8001660 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe f98a 	bl	8001660 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e087      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	3b01      	subs	r3, #1
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	491b      	ldr	r1, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x478>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe f963 	bl	8001660 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe f95f 	bl	8001660 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e05c      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x416>
 80033bc:	e054      	b.n	8003468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe f94c 	bl	8001660 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe f948 	bl	8001660 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e045      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x444>
 80033ea:	e03d      	b.n	8003468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e038      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40007000 	.word	0x40007000
 8003400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_OscConfig+0x4ec>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d028      	beq.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d121      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d11a      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800343a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343c:	4293      	cmp	r3, r2
 800343e:	d111      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d107      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0cc      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b68      	ldr	r3, [pc, #416]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d90c      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b65      	ldr	r3, [pc, #404]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b8      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034cc:	4b59      	ldr	r3, [pc, #356]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a58      	ldr	r2, [pc, #352]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a52      	ldr	r2, [pc, #328]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	494d      	ldr	r1, [pc, #308]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d044      	beq.n	8003598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d119      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d003      	beq.n	8003536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	2b03      	cmp	r3, #3
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e06f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e067      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 0203 	bic.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4934      	ldr	r1, [pc, #208]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fe f87a 	bl	8001660 <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	e00a      	b.n	8003586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003570:	f7fe f876 	bl	8001660 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 020c 	and.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	429a      	cmp	r2, r3
 8003596:	d1eb      	bne.n	8003570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d20c      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e032      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4916      	ldr	r1, [pc, #88]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fe:	f000 f821 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8003602:	4602      	mov	r2, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	490a      	ldr	r1, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	5ccb      	ldrb	r3, [r1, r3]
 8003612:	fa22 f303 	lsr.w	r3, r2, r3
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd ffda 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023c00 	.word	0x40023c00
 8003634:	40023800 	.word	0x40023800
 8003638:	080039a4 	.word	0x080039a4
 800363c:	2000000c 	.word	0x2000000c
 8003640:	20000010 	.word	0x20000010

08003644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003648:	b094      	sub	sp, #80	; 0x50
 800364a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	647b      	str	r3, [r7, #68]	; 0x44
 8003650:	2300      	movs	r3, #0
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003654:	2300      	movs	r3, #0
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365c:	4b79      	ldr	r3, [pc, #484]	; (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d00d      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x40>
 8003668:	2b08      	cmp	r3, #8
 800366a:	f200 80e1 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x34>
 8003672:	2b04      	cmp	r3, #4
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x3a>
 8003676:	e0db      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003678:	4b73      	ldr	r3, [pc, #460]	; (8003848 <HAL_RCC_GetSysClockFreq+0x204>)
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800367c:	e0db      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367e:	4b73      	ldr	r3, [pc, #460]	; (800384c <HAL_RCC_GetSysClockFreq+0x208>)
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003682:	e0d8      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003684:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800368c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369a:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	2200      	movs	r2, #0
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
 80036ae:	2300      	movs	r3, #0
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
 80036b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036b6:	4622      	mov	r2, r4
 80036b8:	462b      	mov	r3, r5
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	0159      	lsls	r1, r3, #5
 80036c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c8:	0150      	lsls	r0, r2, #5
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4621      	mov	r1, r4
 80036d0:	1a51      	subs	r1, r2, r1
 80036d2:	6139      	str	r1, [r7, #16]
 80036d4:	4629      	mov	r1, r5
 80036d6:	eb63 0301 	sbc.w	r3, r3, r1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e8:	4659      	mov	r1, fp
 80036ea:	018b      	lsls	r3, r1, #6
 80036ec:	4651      	mov	r1, sl
 80036ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f2:	4651      	mov	r1, sl
 80036f4:	018a      	lsls	r2, r1, #6
 80036f6:	4651      	mov	r1, sl
 80036f8:	ebb2 0801 	subs.w	r8, r2, r1
 80036fc:	4659      	mov	r1, fp
 80036fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003716:	4690      	mov	r8, r2
 8003718:	4699      	mov	r9, r3
 800371a:	4623      	mov	r3, r4
 800371c:	eb18 0303 	adds.w	r3, r8, r3
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	462b      	mov	r3, r5
 8003724:	eb49 0303 	adc.w	r3, r9, r3
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003736:	4629      	mov	r1, r5
 8003738:	024b      	lsls	r3, r1, #9
 800373a:	4621      	mov	r1, r4
 800373c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003740:	4621      	mov	r1, r4
 8003742:	024a      	lsls	r2, r1, #9
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374a:	2200      	movs	r2, #0
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
 800374e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003754:	f7fc fd4a 	bl	80001ec <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003760:	e058      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	4618      	mov	r0, r3
 800376c:	4611      	mov	r1, r2
 800376e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
 8003778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	f04f 0000 	mov.w	r0, #0
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	0159      	lsls	r1, r3, #5
 800378a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378e:	0150      	lsls	r0, r2, #5
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4641      	mov	r1, r8
 8003796:	ebb2 0a01 	subs.w	sl, r2, r1
 800379a:	4649      	mov	r1, r9
 800379c:	eb63 0b01 	sbc.w	fp, r3, r1
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b4:	ebb2 040a 	subs.w	r4, r2, sl
 80037b8:	eb63 050b 	sbc.w	r5, r3, fp
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	00eb      	lsls	r3, r5, #3
 80037c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	18e3      	adds	r3, r4, r3
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	464b      	mov	r3, r9
 80037d8:	eb45 0303 	adc.w	r3, r5, r3
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ea:	4629      	mov	r1, r5
 80037ec:	028b      	lsls	r3, r1, #10
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f4:	4621      	mov	r1, r4
 80037f6:	028a      	lsls	r2, r1, #10
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fe:	2200      	movs	r2, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	61fa      	str	r2, [r7, #28]
 8003804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003808:	f7fc fcf0 	bl	80001ec <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003838:	4618      	mov	r0, r3
 800383a:	3750      	adds	r7, #80	; 0x50
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	080039b4 	.word	0x080039b4

08003890 <main>:
  * @retval None
  */

reloj reloj1;

int main(void){
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  //uint8_t encoder,val;
  HAL_Init();
 8003894:	f7fd fe84 	bl	80015a0 <HAL_Init>
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8003898:	f7fc fe2a 	bl	80004f0 <SystemClock_Config>
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 800389c:	2001      	movs	r0, #1
 800389e:	f7fd fdb1 	bl	8001404 <BSP_LED_Init>
  //BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
  if(Init_Lcd()==LCD_ERROR)Error_Handler();
 80038a2:	f7fd f849 	bl	8000938 <Init_Lcd>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <main+0x20>
 80038ac:	f7fc fe82 	bl	80005b4 <Error_Handler>
  RelojInit(&reloj1);
 80038b0:	4808      	ldr	r0, [pc, #32]	; (80038d4 <main+0x44>)
 80038b2:	f7fd fa23 	bl	8000cfc <RelojInit>
  ClrLcd();
 80038b6:	f7fd f909 	bl	8000acc <ClrLcd>
  Init_Enc();
 80038ba:	f7fc ffcb 	bl	8000854 <Init_Enc>
  debounceFSM_init();
 80038be:	f7fc fe7f 	bl	80005c0 <debounceFSM_init>
  while (true){
	  RelojFSM_Update(&reloj1);
 80038c2:	4804      	ldr	r0, [pc, #16]	; (80038d4 <main+0x44>)
 80038c4:	f7fd fa44 	bl	8000d50 <RelojFSM_Update>
  	  EncFSM_Update();
 80038c8:	f7fc ffd6 	bl	8000878 <EncFSM_Update>
  	  debounceFSM_update();
 80038cc:	f7fc fe88 	bl	80005e0 <debounceFSM_update>
	  RelojFSM_Update(&reloj1);
 80038d0:	e7f7      	b.n	80038c2 <main+0x32>
 80038d2:	bf00      	nop
 80038d4:	200000b0 	.word	0x200000b0

080038d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80038d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003910 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038de:	e003      	b.n	80038e8 <LoopCopyDataInit>

080038e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038e6:	3104      	adds	r1, #4

080038e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038e8:	480b      	ldr	r0, [pc, #44]	; (8003918 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038f0:	d3f6      	bcc.n	80038e0 <CopyDataInit>
  ldr  r2, =_sbss
 80038f2:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038f4:	e002      	b.n	80038fc <LoopFillZerobss>

080038f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038f8:	f842 3b04 	str.w	r3, [r2], #4

080038fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003900:	d3f9      	bcc.n	80038f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003902:	f7fd fde9 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003906:	f000 f811 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800390a:	f7ff ffc1 	bl	8003890 <main>
  bx  lr    
 800390e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003910:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003914:	080039cc 	.word	0x080039cc
  ldr  r0, =_sdata
 8003918:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800391c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8003920:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8003924:	200000b8 	.word	0x200000b8

08003928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003928:	e7fe      	b.n	8003928 <ADC_IRQHandler>
	...

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	; (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	; (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	; (8003970 <__libc_init_array+0x44>)
 8003940:	f000 f818 	bl	8003974 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	080039c4 	.word	0x080039c4
 8003968:	080039c4 	.word	0x080039c4
 800396c:	080039c4 	.word	0x080039c4
 8003970:	080039c8 	.word	0x080039c8

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
