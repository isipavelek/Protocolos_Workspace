
Calendario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c8  080039c8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d0  080039d0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000a0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009602  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002032  00000000  00000000  0002964a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002748d  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e42  00000000  00000000  00053d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26b2  00000000  00000000  00065bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148291  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024d8  00000000  00000000  001482e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003980 	.word	0x08003980

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08003980 	.word	0x08003980

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <SystemClock_Config>:
  */

#include "API_init.h"

void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <SystemClock_Config+0xbc>)
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <SystemClock_Config+0xbc>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	6413      	str	r3, [r2, #64]	; 0x40
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <SystemClock_Config+0xbc>)
 8000508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <SystemClock_Config+0xc0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <SystemClock_Config+0xc0>)
 800051c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000520:	6013      	str	r3, [r2, #0]
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <SystemClock_Config+0xc0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052e:	2301      	movs	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000532:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000536:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000538:	2302      	movs	r3, #2
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000542:	2308      	movs	r3, #8
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000546:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054c:	2302      	movs	r3, #2
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000550:	2307      	movs	r3, #7
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fd1b 	bl	8002f94 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8000564:	f000 f826 	bl	80005b4 <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000568:	f002 fcc4 	bl	8002ef4 <HAL_PWREx_EnableOverDrive>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8000572:	f000 f81f 	bl	80005b4 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000576:	230f      	movs	r3, #15
 8000578:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 800058e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000592:	2105      	movs	r1, #5
 8000594:	4618      	mov	r0, r3
 8000596:	f002 ff75 	bl	8003484 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xb4>
    Error_Handler();
 80005a0:	f000 f808 	bl	80005b4 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	; 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 ff79 	bl	80014b0 <BSP_LED_On>
  while (1);
 80005be:	e7fe      	b.n	80005be <Error_Handler+0xa>

080005c0 <debounceFSM_init>:
static uint8_t estado=BUTTON_UP;
static delay_t estructura_tiempo;
static bool_t tecla=0;


void debounceFSM_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	delayInit(&estructura_tiempo,DEMORA_BASE);
 80005c4:	2128      	movs	r1, #40	; 0x28
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <debounceFSM_init+0x18>)
 80005c8:	f000 f89e 	bl	8000708 <delayInit>
	estado=BUTTON_UP;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <debounceFSM_init+0x1c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038
 80005dc:	20000034 	.word	0x20000034

080005e0 <debounceFSM_update>:
void debounceFSM_update(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch (estado){
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <debounceFSM_update+0xc8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d85a      	bhi.n	80006a2 <debounceFSM_update+0xc2>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <debounceFSM_update+0x14>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000605 	.word	0x08000605
 80005f8:	0800061d 	.word	0x0800061d
 80005fc:	0800064d 	.word	0x0800064d
 8000600:	0800066b 	.word	0x0800066b
			case (BUTTON_UP): if(Leer_Enc_Sw()){
 8000604:	f000 f91c 	bl	8000840 <Leer_Enc_Sw>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d042      	beq.n	8000694 <debounceFSM_update+0xb4>
								estado=BUTTON_FALLING;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <debounceFSM_update+0xc8>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
								delayRead(&estructura_tiempo);
 8000614:	4825      	ldr	r0, [pc, #148]	; (80006ac <debounceFSM_update+0xcc>)
 8000616:	f000 f888 	bl	800072a <delayRead>
							}
							  break;
 800061a:	e03b      	b.n	8000694 <debounceFSM_update+0xb4>
			case (BUTTON_FALLING): if(delayRead(&estructura_tiempo)){
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <debounceFSM_update+0xcc>)
 800061e:	f000 f884 	bl	800072a <delayRead>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d037      	beq.n	8000698 <debounceFSM_update+0xb8>
									 if(!Leer_Enc_Sw())estado=BUTTON_UP;
 8000628:	f000 f90a 	bl	8000840 <Leer_Enc_Sw>
 800062c:	4603      	mov	r3, r0
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <debounceFSM_update+0x60>
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <debounceFSM_update+0xc8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
									 else {
										 buttonPressed();
										 estado=BUTTON_DOWN;
									 }
									}
								break;
 800063e:	e02b      	b.n	8000698 <debounceFSM_update+0xb8>
										 buttonPressed();
 8000640:	f000 f836 	bl	80006b0 <buttonPressed>
										 estado=BUTTON_DOWN;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <debounceFSM_update+0xc8>)
 8000646:	2202      	movs	r2, #2
 8000648:	701a      	strb	r2, [r3, #0]
								break;
 800064a:	e025      	b.n	8000698 <debounceFSM_update+0xb8>
			case (BUTTON_DOWN):if(!Leer_Enc_Sw()){
 800064c:	f000 f8f8 	bl	8000840 <Leer_Enc_Sw>
 8000650:	4603      	mov	r3, r0
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01f      	beq.n	800069c <debounceFSM_update+0xbc>
									estado=BUTTON_RAISING;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <debounceFSM_update+0xc8>)
 800065e:	2203      	movs	r2, #3
 8000660:	701a      	strb	r2, [r3, #0]
									delayRead(&estructura_tiempo);
 8000662:	4812      	ldr	r0, [pc, #72]	; (80006ac <debounceFSM_update+0xcc>)
 8000664:	f000 f861 	bl	800072a <delayRead>
								}

								break;
 8000668:	e018      	b.n	800069c <debounceFSM_update+0xbc>
			case (BUTTON_RAISING):
								if(delayRead(&estructura_tiempo)){
 800066a:	4810      	ldr	r0, [pc, #64]	; (80006ac <debounceFSM_update+0xcc>)
 800066c:	f000 f85d 	bl	800072a <delayRead>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d014      	beq.n	80006a0 <debounceFSM_update+0xc0>
									 if(Leer_Enc_Sw())estado=BUTTON_DOWN;
 8000676:	f000 f8e3 	bl	8000840 <Leer_Enc_Sw>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <debounceFSM_update+0xa8>
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <debounceFSM_update+0xc8>)
 8000682:	2202      	movs	r2, #2
 8000684:	701a      	strb	r2, [r3, #0]
									 else {
										 buttonReleased();
										 estado=BUTTON_UP;
									 }
								 }
								break;
 8000686:	e00b      	b.n	80006a0 <debounceFSM_update+0xc0>
										 buttonReleased();
 8000688:	f000 f81e 	bl	80006c8 <buttonReleased>
										 estado=BUTTON_UP;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <debounceFSM_update+0xc8>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
								break;
 8000692:	e005      	b.n	80006a0 <debounceFSM_update+0xc0>
							  break;
 8000694:	bf00      	nop
 8000696:	e004      	b.n	80006a2 <debounceFSM_update+0xc2>
								break;
 8000698:	bf00      	nop
 800069a:	e002      	b.n	80006a2 <debounceFSM_update+0xc2>
								break;
 800069c:	bf00      	nop
 800069e:	e000      	b.n	80006a2 <debounceFSM_update+0xc2>
								break;
 80006a0:	bf00      	nop


	}
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000034 	.word	0x20000034
 80006ac:	20000038 	.word	0x20000038

080006b0 <buttonPressed>:

void buttonPressed(){
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	tecla=true;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <buttonPressed+0x14>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000044 	.word	0x20000044

080006c8 <buttonReleased>:
void buttonReleased(){
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	tecla=false;
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <buttonReleased+0x14>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000044 	.word	0x20000044

080006e0 <readKey>:


bool_t readKey(void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

	if(tecla==true){
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <readKey+0x24>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d004      	beq.n	80006f6 <readKey+0x16>
		tecla=false;
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <readKey+0x24>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		return true;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <readKey+0x18>
	}
	return false;
 80006f6:	2300      	movs	r3, #0

}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000044 	.word	0x20000044

08000708 <delayInit>:
 */

#include "API_delay.h"


void delayInit( delay_t * delay, tick_t duration ){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	721a      	strb	r2, [r3, #8]

}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <delayRead>:
bool_t delayRead( delay_t * delay ){
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	if((delay->running)==false){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a1b      	ldrb	r3, [r3, #8]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d008      	beq.n	8000752 <delayRead+0x28>
		delay->running=true;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	721a      	strb	r2, [r3, #8]
		delay->startTime=HAL_GetTick();
 8000746:	f000 ff91 	bl	800166c <HAL_GetTick>
 800074a:	4602      	mov	r2, r0
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e00e      	b.n	8000770 <delayRead+0x46>

	}
	else{
		if(HAL_GetTick()-delay->startTime>=delay->duration){
 8000752:	f000 ff8b 	bl	800166c <HAL_GetTick>
 8000756:	4602      	mov	r2, r0
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	d304      	bcc.n	8000770 <delayRead+0x46>
			delay->running=false;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	721a      	strb	r2, [r3, #8]
			return true;
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <delayRead+0x48>
		}
	}
	return false;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <Init_Enc_port>:
 *  Created on: 1 abr. 2023
 *      Author: ipave
 */
#include "API_enc_port.h"

_Bool Init_Enc_port(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct;

	  /* Enable the BUTTON Clock */
  	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <Init_Enc_port+0x80>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <Init_Enc_port+0x80>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <Init_Enc_port+0x80>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]

	    /* Configure Button pin as input */
	GPIO_InitStruct.Pin = PINCANAL_A| PINCANAL_B;
 800079e:	2303      	movs	r3, #3
 80007a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORTCANAL_A, &GPIO_InitStruct);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <Init_Enc_port+0x84>)
 80007b6:	f001 f86f 	bl	8001898 <HAL_GPIO_Init>
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <Init_Enc_port+0x80>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <Init_Enc_port+0x80>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <Init_Enc_port+0x80>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = PINSW;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORTSW, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <Init_Enc_port+0x88>)
 80007ee:	f001 f853 	bl	8001898 <HAL_GPIO_Init>
	return 0;
 80007f2:	2300      	movs	r3, #0

}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40021800 	.word	0x40021800

08000808 <Leer_Enc_Pin>:

uint8_t Leer_Enc_Pin(void){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	uint8_t estado=0;
 800080e:	2300      	movs	r3, #0
 8000810:	71fb      	strb	r3, [r7, #7]
	estado=HAL_GPIO_ReadPin(PORTCANAL_A,PINCANAL_A);
 8000812:	2101      	movs	r1, #1
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <Leer_Enc_Pin+0x34>)
 8000816:	f001 f9eb 	bl	8001bf0 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	estado+=(HAL_GPIO_ReadPin(PORTCANAL_B,PINCANAL_B)<<1);
 800081e:	2102      	movs	r1, #2
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <Leer_Enc_Pin+0x34>)
 8000822:	f001 f9e5 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4413      	add	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
	return estado;
 8000832:	79fb      	ldrb	r3, [r7, #7]

}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020c00 	.word	0x40020c00

08000840 <Leer_Enc_Sw>:

_Bool Leer_Enc_Sw(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

	return !HAL_GPIO_ReadPin(PORTSW,PINSW);
 8000844:	2101      	movs	r1, #1
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <Leer_Enc_Sw+0x1c>)
 8000848:	f001 f9d2 	bl	8001bf0 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3

}
 8000858:	4618      	mov	r0, r3
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021800 	.word	0x40021800

08000860 <Init_Enc>:

uint8_t giro=NOGIRA;

delay_t encoder_time;

_Bool Init_Enc(void){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	Init_Enc_port();
 8000864:	f7ff ff8a 	bl	800077c <Init_Enc_port>
    delayInit(&encoder_time,DEMORA_BASE);
 8000868:	2128      	movs	r1, #40	; 0x28
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <Init_Enc+0x1c>)
 800086c:	f7ff ff4c 	bl	8000708 <delayInit>
    estado=E00;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <Init_Enc+0x20>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000048 	.word	0x20000048
 8000880:	20000045 	.word	0x20000045

08000884 <EncFSM_Update>:

void EncFSM_Update(){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

	uint8_t estados_pines=Leer_Enc_Pin();
 800088a:	f7ff ffbd 	bl	8000808 <Leer_Enc_Pin>
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]

	switch (estado){
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <EncFSM_Update+0x90>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d021      	beq.n	80008de <EncFSM_Update+0x5a>
 800089a:	2b02      	cmp	r3, #2
 800089c:	dc35      	bgt.n	800090a <EncFSM_Update+0x86>
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <EncFSM_Update+0x24>
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d00a      	beq.n	80008bc <EncFSM_Update+0x38>
							estado=E00;
						}
						break;

	}
}
 80008a6:	e030      	b.n	800090a <EncFSM_Update+0x86>
			case (E00):	if(estados_pines!=E00 && estados_pines!=E11)estado=estados_pines;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d028      	beq.n	8000900 <EncFSM_Update+0x7c>
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d025      	beq.n	8000900 <EncFSM_Update+0x7c>
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <EncFSM_Update+0x90>)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	7013      	strb	r3, [r2, #0]
						break;
 80008ba:	e021      	b.n	8000900 <EncFSM_Update+0x7c>
			case (E01):	if(estados_pines!=E01){
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d020      	beq.n	8000904 <EncFSM_Update+0x80>
							if(estados_pines==E00)giro=IZQ;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d103      	bne.n	80008d0 <EncFSM_Update+0x4c>
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <EncFSM_Update+0x94>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e002      	b.n	80008d6 <EncFSM_Update+0x52>
							else giro=DER;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <EncFSM_Update+0x94>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	701a      	strb	r2, [r3, #0]
							estado=E00;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <EncFSM_Update+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
						break;
 80008dc:	e012      	b.n	8000904 <EncFSM_Update+0x80>
			case (E10): if(estados_pines!=E10){
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d011      	beq.n	8000908 <EncFSM_Update+0x84>
							if(estados_pines==E00)giro=DER;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <EncFSM_Update+0x6e>
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <EncFSM_Update+0x94>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e002      	b.n	80008f8 <EncFSM_Update+0x74>
							else giro=IZQ;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <EncFSM_Update+0x94>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
							estado=E00;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <EncFSM_Update+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
						break;
 80008fe:	e003      	b.n	8000908 <EncFSM_Update+0x84>
						break;
 8000900:	bf00      	nop
 8000902:	e002      	b.n	800090a <EncFSM_Update+0x86>
						break;
 8000904:	bf00      	nop
 8000906:	e000      	b.n	800090a <EncFSM_Update+0x86>
						break;
 8000908:	bf00      	nop
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000045 	.word	0x20000045
 8000918:	20000046 	.word	0x20000046

0800091c <ReadEncoder>:

giro_encoder_t ReadEncoder(){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
	uint8_t aux=0;
 8000922:	2300      	movs	r3, #0
 8000924:	71fb      	strb	r3, [r7, #7]
	aux=giro;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <ReadEncoder+0x24>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
	giro=NOGIRA;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <ReadEncoder+0x24>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	return aux;
 8000932:	79fb      	ldrb	r3, [r7, #7]

}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	20000046 	.word	0x20000046

08000944 <Init_Lcd>:

static const uint8_t LCD_INIT_CMD[]={
		_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON,CLR_LCD
};

_Bool Init_Lcd(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

   if(LCD_HW_init()==LCD_ERROR)return LCD_ERROR;
 800094a:	f000 f8fd 	bl	8000b48 <LCD_HW_init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <Init_Lcd+0x14>
 8000954:	2301      	movs	r3, #1
 8000956:	e02b      	b.n	80009b0 <Init_Lcd+0x6c>
   DelayLcd(DELAY20ms);
 8000958:	2014      	movs	r0, #20
 800095a:	f000 f82f 	bl	80009bc <DelayLcd>
   Send4bitsLcd(COMANDO_INI1,CONTROL);
 800095e:	2100      	movs	r1, #0
 8000960:	2030      	movs	r0, #48	; 0x30
 8000962:	f000 f895 	bl	8000a90 <Send4bitsLcd>
   DelayLcd(DELAY10ms);
 8000966:	200a      	movs	r0, #10
 8000968:	f000 f828 	bl	80009bc <DelayLcd>
   Send4bitsLcd(COMANDO_INI1,CONTROL);
 800096c:	2100      	movs	r1, #0
 800096e:	2030      	movs	r0, #48	; 0x30
 8000970:	f000 f88e 	bl	8000a90 <Send4bitsLcd>
   DelayLcd(DELAY1ms);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f821 	bl	80009bc <DelayLcd>
   Send4bitsLcd(COMANDO_INI1,CONTROL);
 800097a:	2100      	movs	r1, #0
 800097c:	2030      	movs	r0, #48	; 0x30
 800097e:	f000 f887 	bl	8000a90 <Send4bitsLcd>
   Send4bitsLcd(COMANDO_INI2,CONTROL);
 8000982:	2100      	movs	r1, #0
 8000984:	2020      	movs	r0, #32
 8000986:	f000 f883 	bl	8000a90 <Send4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	e008      	b.n	80009a2 <Init_Lcd+0x5e>
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <Init_Lcd+0x74>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f81b 	bl	80009d2 <ControlLcd>
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	3301      	adds	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d9f3      	bls.n	8000990 <Init_Lcd+0x4c>
   DelayLcd(DELAY2ms);
 80009a8:	2002      	movs	r0, #2
 80009aa:	f000 f807 	bl	80009bc <DelayLcd>
   return LCD_OK;
 80009ae:	2300      	movs	r3, #0

}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08003998 	.word	0x08003998

080009bc <DelayLcd>:

void DelayLcd(uint32_t demora){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fe5d 	bl	8001684 <HAL_Delay>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <ControlLcd>:


void ControlLcd(uint8_t valor){
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
	Send8bitsLcd(valor,CONTROL);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f838 	bl	8000a56 <Send8bitsLcd>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <DatoLcd>:

void DatoLcd (uint8_t dato){
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
	Send8bitsLcd(dato,DATOS);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f82a 	bl	8000a56 <Send8bitsLcd>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <DatoAsciiLcd>:

void DatoAsciiLcd (uint8_t dato){
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
	Send8bitsLcd(dato+ '0',DATOS);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3330      	adds	r3, #48	; 0x30
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f81a 	bl	8000a56 <Send8bitsLcd>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <DatoBCD>:

void DatoBCD (uint8_t dato){
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]

	  DatoAsciiLcd((((dato)&0xf0)>>4));
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffe5 	bl	8000a0a <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ffde 	bl	8000a0a <DatoAsciiLcd>

}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <Send8bitsLcd>:

void Send8bitsLcd (uint8_t valor,_Bool tipo){
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	460a      	mov	r2, r1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	4613      	mov	r3, r2
 8000a64:	71bb      	strb	r3, [r7, #6]
	Send4bitsLcd(valor&HIGH_NIBBLE,tipo); 		//me con quedo y envio los 4 bits más significaticos.
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f023 030f 	bic.w	r3, r3, #15
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	79ba      	ldrb	r2, [r7, #6]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f80c 	bl	8000a90 <Send4bitsLcd>
	Send4bitsLcd(valor<<LOW_NIBBLE,tipo);   	//me quedo y envio los 4 bits menos significativos.
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f804 	bl	8000a90 <Send4bitsLcd>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <Send4bitsLcd>:

void Send4bitsLcd (uint8_t valor,_Bool tipo){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]

	LCD_Write_Byte(valor+tipo+EN+BL);
 8000aa0:	79ba      	ldrb	r2, [r7, #6]
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8b7 	bl	8000c20 <LCD_Write_Byte>
	DelayLcd(DelayTime);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff ff82 	bl	80009bc <DelayLcd>
	LCD_Write_Byte(valor+tipo+BL);
 8000ab8:	79ba      	ldrb	r2, [r7, #6]
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4413      	add	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f8ab 	bl	8000c20 <LCD_Write_Byte>
	DelayLcd(DelayTime);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ff76 	bl	80009bc <DelayLcd>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <ClrLcd>:

void OutTextLcd (int8_t *texto){
	while(*texto)DatoLcd(*texto++);
}

void ClrLcd(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
   ControlLcd(CLR_LCD);				//	Display Clear.
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff ff78 	bl	80009d2 <ControlLcd>
   DelayLcd(DELAY2ms);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff ff6a 	bl	80009bc <DelayLcd>

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <PosCaracHLcd>:


void PosCaracHLcd(uint8_t posH){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff67 	bl	80009d2 <ControlLcd>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <PosCaracLLcd>:

void PosCaracLLcd(uint8_t posL){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff57 	bl	80009d2 <ControlLcd>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <CursorOffLcd>:

void CursorOffLcd(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	ControlLcd(DISPLAY_CONTROL+DISPLAY_ON);
 8000b30:	200c      	movs	r0, #12
 8000b32:	f7ff ff4e 	bl	80009d2 <ControlLcd>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <CursorOnLcd>:

void CursorOnLcd(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
	ControlLcd(DISPLAY_CONTROL+CURSOR_ON+DISPLAY_ON+CURSOR_BLINK);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff ff47 	bl	80009d2 <ControlLcd>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LCD_HW_init>:
#include"API_Lcd_port.h"
#include"API_init.h"

I2C_HandleTypeDef hi2c1;

_Bool LCD_HW_init(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <LCD_HW_init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <LCD_HW_init+0x60>)
 8000b56:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
	  GPIO_I2C(&hi2c1);
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b86:	f000 f811 	bl	8000bac <GPIO_I2C>
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)return HAL_ERROR;
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <LCD_HW_init+0x58>)
 8000b8c:	f001 f862 	bl	8001c54 <HAL_I2C_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <LCD_HW_init+0x52>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <LCD_HW_init+0x54>
	  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0

}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000054 	.word	0x20000054
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <GPIO_I2C>:

void GPIO_I2C(I2C_HandleTypeDef  *hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <GPIO_I2C+0x6c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <GPIO_I2C+0x6c>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <GPIO_I2C+0x6c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <GPIO_I2C+0x70>)
 8000bee:	f000 fe53 	bl	8001898 <HAL_GPIO_Init>

	     /* Peripheral clock enable */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <GPIO_I2C+0x6c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <GPIO_I2C+0x6c>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <GPIO_I2C+0x6c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400

08000c20 <LCD_Write_Byte>:

void LCD_Write_Byte(uint8_t valor){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,0x27<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8000c2a:	1dfa      	adds	r2, r7, #7
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	214e      	movs	r1, #78	; 0x4e
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <LCD_Write_Byte+0x30>)
 8000c38:	f001 f95a 	bl	8001ef0 <HAL_I2C_Master_Transmit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <LCD_Write_Byte+0x26>
 8000c42:	f7ff fcb7 	bl	80005b4 <Error_Handler>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000054 	.word	0x20000054

08000c54 <PresentaFechaLCD>:

const uint8_t mes31[]={ENERO,MARZO,MAYO,JULIO,AGOSTO,OCTUBRE,DICIEMBRE};



void PresentaFechaLCD(reloj* reloj1,uint8_t pos,uint8_t linea){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
 8000c60:	4613      	mov	r3, r2
 8000c62:	70bb      	strb	r3, [r7, #2]

	  if(linea==1)PosCaracHLcd(pos);
 8000c64:	78bb      	ldrb	r3, [r7, #2]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d104      	bne.n	8000c74 <PresentaFechaLCD+0x20>
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff3d 	bl	8000aec <PosCaracHLcd>
 8000c72:	e003      	b.n	8000c7c <PresentaFechaLCD+0x28>
	  else PosCaracLLcd(pos);
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff48 	bl	8000b0c <PosCaracLLcd>
	  DatoBCD (reloj1->dia);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fed2 	bl	8000a2a <DatoBCD>
	  DatoLcd('/');
 8000c86:	202f      	movs	r0, #47	; 0x2f
 8000c88:	f7ff feb1 	bl	80009ee <DatoLcd>
	  DatoBCD (reloj1->mes);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff feca 	bl	8000a2a <DatoBCD>
	  DatoLcd('/');
 8000c96:	202f      	movs	r0, #47	; 0x2f
 8000c98:	f7ff fea9 	bl	80009ee <DatoLcd>
	  DatoBCD (reloj1->anio);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	799b      	ldrb	r3, [r3, #6]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fec2 	bl	8000a2a <DatoBCD>

}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <PresentaHoraLCD>:

void PresentaHoraLCD(reloj* reloj1,uint8_t pos,uint8_t linea){
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	70fb      	strb	r3, [r7, #3]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	70bb      	strb	r3, [r7, #2]

	  if(linea==1)PosCaracHLcd(pos);
 8000cbe:	78bb      	ldrb	r3, [r7, #2]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d104      	bne.n	8000cce <PresentaHoraLCD+0x20>
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff10 	bl	8000aec <PosCaracHLcd>
 8000ccc:	e003      	b.n	8000cd6 <PresentaHoraLCD+0x28>
	  else PosCaracLLcd(pos);
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff1b 	bl	8000b0c <PosCaracLLcd>
	  DatoBCD (reloj1->hora);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	789b      	ldrb	r3, [r3, #2]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fea5 	bl	8000a2a <DatoBCD>
	  DatoLcd(':');
 8000ce0:	203a      	movs	r0, #58	; 0x3a
 8000ce2:	f7ff fe84 	bl	80009ee <DatoLcd>
	  DatoBCD (reloj1->min);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe9d 	bl	8000a2a <DatoBCD>
	  DatoLcd(':');
 8000cf0:	203a      	movs	r0, #58	; 0x3a
 8000cf2:	f7ff fe7c 	bl	80009ee <DatoLcd>
	  DatoBCD (reloj1->seg);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe95 	bl	8000a2a <DatoBCD>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <RelojInit>:
void RelojInit(reloj* reloj1){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	estado_reloj=PRESENTAR;
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <RelojInit+0x1c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
	reloj1->diasem=0;
	reloj1->dia=1;
	reloj1->mes=1;
	reloj1->anio=0;*/

}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000a8 	.word	0x200000a8

08000d28 <Reloj_Read>:

void Reloj_Read(reloj* reloj1){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

	RTC_Read_Cal(reloj1);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fb51 	bl	80013d8 <RTC_Read_Cal>

}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <Reloj_Write>:

void Reloj_Write(reloj reloj1){
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	463b      	mov	r3, r7
 8000d46:	e883 0003 	stmia.w	r3, {r0, r1}
	RTC_Write_Cal(reloj1);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d50:	f000 fb24 	bl	800139c <RTC_Write_Cal>

}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <RelojFSM_Update>:

void RelojFSM_Update(reloj* reloj1){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

	switch(estado_reloj){
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <RelojFSM_Update+0xa0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b06      	cmp	r3, #6
 8000d6a:	d842      	bhi.n	8000df2 <RelojFSM_Update+0x96>
 8000d6c:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <RelojFSM_Update+0x18>)
 8000d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d72:	bf00      	nop
 8000d74:	08000d91 	.word	0x08000d91
 8000d78:	08000dc1 	.word	0x08000dc1
 8000d7c:	08000dc9 	.word	0x08000dc9
 8000d80:	08000dd1 	.word	0x08000dd1
 8000d84:	08000dd9 	.word	0x08000dd9
 8000d88:	08000de1 	.word	0x08000de1
 8000d8c:	08000de9 	.word	0x08000de9
		case PRESENTAR: Reloj_Read(reloj1);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ffc9 	bl	8000d28 <Reloj_Read>
						PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2104      	movs	r1, #4
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff5a 	bl	8000c54 <PresentaFechaLCD>
						PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8000da0:	2202      	movs	r2, #2
 8000da2:	2104      	movs	r1, #4
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff82 	bl	8000cae <PresentaHoraLCD>
     					if(readKey()==true){
 8000daa:	f7ff fc99 	bl	80006e0 <readKey>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01d      	beq.n	8000df0 <RelojFSM_Update+0x94>
     						CursorOnLcd();
 8000db4:	f7ff fec1 	bl	8000b3a <CursorOnLcd>
     						estado_reloj=CONFIGURAR_DIA;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <RelojFSM_Update+0xa0>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
     					}
						break;
 8000dbe:	e017      	b.n	8000df0 <RelojFSM_Update+0x94>
		case CONFIGURAR_DIA:
						ConfiguraDia(reloj1);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f81d 	bl	8000e00 <ConfiguraDia>
						break;
 8000dc6:	e014      	b.n	8000df2 <RelojFSM_Update+0x96>
		case CONFIGURAR_MES:
						ConfiguraMes(reloj1);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f8a5 	bl	8000f18 <ConfiguraMes>
						break;
 8000dce:	e010      	b.n	8000df2 <RelojFSM_Update+0x96>
		case CONFIGURAR_ANIO:
						ConfiguraAnio(reloj1);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f913 	bl	8000ffc <ConfiguraAnio>
						break;
 8000dd6:	e00c      	b.n	8000df2 <RelojFSM_Update+0x96>
		case CONFIGURAR_HORA:
						ConfiguraHora(reloj1);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f977 	bl	80010cc <ConfiguraHora>
						break;
 8000dde:	e008      	b.n	8000df2 <RelojFSM_Update+0x96>
		case CONFIGURAR_MIN:
						ConfiguraMin(reloj1);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f9ad 	bl	8001140 <ConfiguraMin>
						break;
 8000de6:	e004      	b.n	8000df2 <RelojFSM_Update+0x96>
		case CONFIGURAR_SEG:
						ConfiguraSeg(reloj1);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f9e3 	bl	80011b4 <ConfiguraSeg>
						break;
 8000dee:	e000      	b.n	8000df2 <RelojFSM_Update+0x96>
						break;
 8000df0:	bf00      	nop
	}


}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000a8 	.word	0x200000a8

08000e00 <ConfiguraDia>:

void ConfiguraDia(reloj* reloj1){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSFECHA);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f7ff fe6d 	bl	8000aec <PosCaracHLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_MES;
 8000e12:	f7ff fc65 	bl	80006e0 <readKey>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <ConfiguraDia+0x22>
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <ConfiguraDia+0x114>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8000e22:	f7ff fd7b 	bl	800091c <ReadEncoder>
 8000e26:	4603      	mov	r3, r0
 8000e28:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d134      	bne.n	8000e9a <ConfiguraDia+0x9a>
		Decrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3304      	adds	r3, #4
 8000e34:	221f      	movs	r2, #31
 8000e36:	2101      	movs	r1, #1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fa05 	bl	8001248 <Decrementa>
		if(reloj1->dia==0x30 && reloj1->mes==FEBRERO)reloj1->mes=MARZO;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	2b30      	cmp	r3, #48	; 0x30
 8000e44:	d106      	bne.n	8000e54 <ConfiguraDia+0x54>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	795b      	ldrb	r3, [r3, #5]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d102      	bne.n	8000e54 <ConfiguraDia+0x54>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	715a      	strb	r2, [r3, #5]
		if(reloj1->dia==0x31 && (reloj1->mes==FEBRERO || reloj1->mes==ABRIL || reloj1->mes==JUNIO || reloj1->mes==SEPTIEMBRE || reloj1->mes==NOVIEMBRE))(reloj1->mes)--;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	791b      	ldrb	r3, [r3, #4]
 8000e58:	2b31      	cmp	r3, #49	; 0x31
 8000e5a:	d119      	bne.n	8000e90 <ConfiguraDia+0x90>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	795b      	ldrb	r3, [r3, #5]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00f      	beq.n	8000e84 <ConfiguraDia+0x84>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00b      	beq.n	8000e84 <ConfiguraDia+0x84>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	795b      	ldrb	r3, [r3, #5]
 8000e70:	2b06      	cmp	r3, #6
 8000e72:	d007      	beq.n	8000e84 <ConfiguraDia+0x84>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	795b      	ldrb	r3, [r3, #5]
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d003      	beq.n	8000e84 <ConfiguraDia+0x84>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	2b11      	cmp	r3, #17
 8000e82:	d105      	bne.n	8000e90 <ConfiguraDia+0x90>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	795b      	ldrb	r3, [r3, #5]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	715a      	strb	r2, [r3, #5]
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2104      	movs	r1, #4
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fedd 	bl	8000c54 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d134      	bne.n	8000f0a <ConfiguraDia+0x10a>
		Incrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	221f      	movs	r2, #31
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fa11 	bl	80012d0 <Incrementa>

		if(reloj1->dia==0x30 && reloj1->mes==FEBRERO)reloj1->mes=MARZO;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	2b30      	cmp	r3, #48	; 0x30
 8000eb4:	d106      	bne.n	8000ec4 <ConfiguraDia+0xc4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d102      	bne.n	8000ec4 <ConfiguraDia+0xc4>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	715a      	strb	r2, [r3, #5]
		if(reloj1->dia==0x31 && (reloj1->mes==FEBRERO || reloj1->mes==ABRIL || reloj1->mes==JUNIO || reloj1->mes==SEPTIEMBRE || reloj1->mes==NOVIEMBRE))(reloj1->mes)++;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	2b31      	cmp	r3, #49	; 0x31
 8000eca:	d119      	bne.n	8000f00 <ConfiguraDia+0x100>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	795b      	ldrb	r3, [r3, #5]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d00f      	beq.n	8000ef4 <ConfiguraDia+0xf4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	795b      	ldrb	r3, [r3, #5]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d00b      	beq.n	8000ef4 <ConfiguraDia+0xf4>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d007      	beq.n	8000ef4 <ConfiguraDia+0xf4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	795b      	ldrb	r3, [r3, #5]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d003      	beq.n	8000ef4 <ConfiguraDia+0xf4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	795b      	ldrb	r3, [r3, #5]
 8000ef0:	2b11      	cmp	r3, #17
 8000ef2:	d105      	bne.n	8000f00 <ConfiguraDia+0x100>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	715a      	strb	r2, [r3, #5]
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fea5 	bl	8000c54 <PresentaFechaLCD>
	}

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000a8 	.word	0x200000a8

08000f18 <ConfiguraMes>:



void ConfiguraMes(reloj* reloj1){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSMES);
 8000f24:	2008      	movs	r0, #8
 8000f26:	f7ff fde1 	bl	8000aec <PosCaracHLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_ANIO;
 8000f2a:	f7ff fbd9 	bl	80006e0 <readKey>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <ConfiguraMes+0x22>
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <ConfiguraMes+0xdc>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8000f3a:	f7ff fcef 	bl	800091c <ReadEncoder>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d126      	bne.n	8000f96 <ConfiguraMes+0x7e>
		if((reloj1->dia)!=0x31)Decrementa(&(reloj1->mes),MESMIN,MESMAX);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	2b31      	cmp	r3, #49	; 0x31
 8000f4e:	d007      	beq.n	8000f60 <ConfiguraMes+0x48>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3305      	adds	r3, #5
 8000f54:	220c      	movs	r2, #12
 8000f56:	2101      	movs	r1, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f975 	bl	8001248 <Decrementa>
 8000f5e:	e015      	b.n	8000f8c <ConfiguraMes+0x74>
		else{
			uint8_t indice=buscar_indice((uint8_t *)mes31,reloj1->mes,sizeof(mes31));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2207      	movs	r2, #7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <ConfiguraMes+0xe0>)
 8000f6a:	f000 f9f3 	bl	8001354 <buscar_indice>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73bb      	strb	r3, [r7, #14]
			if(indice==0)reloj1->mes=mes31[sizeof(mes31)-1];
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <ConfiguraMes+0x68>
 8000f78:	2212      	movs	r2, #18
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	715a      	strb	r2, [r3, #5]
 8000f7e:	e005      	b.n	8000f8c <ConfiguraMes+0x74>
			else reloj1->mes=mes31[indice-1];
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <ConfiguraMes+0xe0>)
 8000f86:	5cd2      	ldrb	r2, [r2, r3]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	715a      	strb	r2, [r3, #5]
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2104      	movs	r1, #4
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fe5f 	bl	8000c54 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d126      	bne.n	8000fea <ConfiguraMes+0xd2>
		if((reloj1->dia)!=0x31)Incrementa(&(reloj1->mes),MESMIN,MESMAX);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	791b      	ldrb	r3, [r3, #4]
 8000fa0:	2b31      	cmp	r3, #49	; 0x31
 8000fa2:	d007      	beq.n	8000fb4 <ConfiguraMes+0x9c>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3305      	adds	r3, #5
 8000fa8:	220c      	movs	r2, #12
 8000faa:	2101      	movs	r1, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f98f 	bl	80012d0 <Incrementa>
 8000fb2:	e015      	b.n	8000fe0 <ConfiguraMes+0xc8>
		else{
			uint8_t indice=buscar_indice((uint8_t *)mes31,reloj1->mes,sizeof(mes31));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	795b      	ldrb	r3, [r3, #5]
 8000fb8:	2207      	movs	r2, #7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <ConfiguraMes+0xe0>)
 8000fbe:	f000 f9c9 	bl	8001354 <buscar_indice>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	737b      	strb	r3, [r7, #13]
			if(indice==sizeof(mes31)-1)reloj1->mes=mes31[0];
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	d103      	bne.n	8000fd4 <ConfiguraMes+0xbc>
 8000fcc:	2201      	movs	r2, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	715a      	strb	r2, [r3, #5]
 8000fd2:	e005      	b.n	8000fe0 <ConfiguraMes+0xc8>
			else reloj1->mes=mes31[indice+1];
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <ConfiguraMes+0xe0>)
 8000fda:	5cd2      	ldrb	r2, [r2, r3]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	715a      	strb	r2, [r3, #5]
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fe35 	bl	8000c54 <PresentaFechaLCD>
	}
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000a8 	.word	0x200000a8
 8000ff8:	080039a0 	.word	0x080039a0

08000ffc <ConfiguraAnio>:

void ConfiguraAnio(reloj* reloj1){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSANIO);
 8001008:	200b      	movs	r0, #11
 800100a:	f7ff fd6f 	bl	8000aec <PosCaracHLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_HORA;
 800100e:	f7ff fb67 	bl	80006e0 <readKey>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <ConfiguraAnio+0x22>
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <ConfiguraAnio+0xcc>)
 800101a:	2204      	movs	r2, #4
 800101c:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 800101e:	f7ff fc7d 	bl	800091c <ReadEncoder>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d122      	bne.n	8001072 <ConfiguraAnio+0x76>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	795b      	ldrb	r3, [r3, #5]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d112      	bne.n	800105a <ConfiguraAnio+0x5e>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	2b29      	cmp	r3, #41	; 0x29
 800103a:	d10e      	bne.n	800105a <ConfiguraAnio+0x5e>
			do{
				Decrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3306      	adds	r3, #6
 8001040:	2263      	movs	r2, #99	; 0x63
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f8ff 	bl	8001248 <Decrementa>
			}while((reloj1->anio)%4);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	799b      	ldrb	r3, [r3, #6]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f1      	bne.n	800103c <ConfiguraAnio+0x40>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001058:	e006      	b.n	8001068 <ConfiguraAnio+0x6c>
		}
		else Decrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3306      	adds	r3, #6
 800105e:	2263      	movs	r2, #99	; 0x63
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f8f0 	bl	8001248 <Decrementa>

		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001068:	2201      	movs	r2, #1
 800106a:	2104      	movs	r1, #4
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fdf1 	bl	8000c54 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d122      	bne.n	80010be <ConfiguraAnio+0xc2>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	795b      	ldrb	r3, [r3, #5]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d112      	bne.n	80010a6 <ConfiguraAnio+0xaa>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	2b29      	cmp	r3, #41	; 0x29
 8001086:	d10e      	bne.n	80010a6 <ConfiguraAnio+0xaa>
			do{
				Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3306      	adds	r3, #6
 800108c:	2263      	movs	r2, #99	; 0x63
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f91d 	bl	80012d0 <Incrementa>
			}while((reloj1->anio)%4);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	799b      	ldrb	r3, [r3, #6]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f1      	bne.n	8001088 <ConfiguraAnio+0x8c>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 80010a4:	e006      	b.n	80010b4 <ConfiguraAnio+0xb8>
		}
		else Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3306      	adds	r3, #6
 80010aa:	2263      	movs	r2, #99	; 0x63
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f90e 	bl	80012d0 <Incrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2104      	movs	r1, #4
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fdcb 	bl	8000c54 <PresentaFechaLCD>
	}
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000a8 	.word	0x200000a8

080010cc <ConfiguraHora>:

void ConfiguraHora(reloj* reloj1){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSHORA);
 80010d8:	2005      	movs	r0, #5
 80010da:	f7ff fd17 	bl	8000b0c <PosCaracLLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_MIN;
 80010de:	f7ff faff 	bl	80006e0 <readKey>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <ConfiguraHora+0x22>
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <ConfiguraHora+0x70>)
 80010ea:	2205      	movs	r2, #5
 80010ec:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 80010ee:	f7ff fc15 	bl	800091c <ReadEncoder>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10b      	bne.n	8001114 <ConfiguraHora+0x48>
		Decrementa(&(reloj1->hora),HORAMIN,HORAMAX);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3302      	adds	r3, #2
 8001100:	2217      	movs	r2, #23
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f89f 	bl	8001248 <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 800110a:	2202      	movs	r2, #2
 800110c:	2104      	movs	r1, #4
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fdcd 	bl	8000cae <PresentaHoraLCD>
	}
	if(encoder==DER){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d10b      	bne.n	8001132 <ConfiguraHora+0x66>
		Incrementa(&(reloj1->hora),HORAMIN,HORAMAX);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3302      	adds	r3, #2
 800111e:	2217      	movs	r2, #23
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f8d4 	bl	80012d0 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001128:	2202      	movs	r2, #2
 800112a:	2104      	movs	r1, #4
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff fdbe 	bl	8000cae <PresentaHoraLCD>
	}
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000a8 	.word	0x200000a8

08001140 <ConfiguraMin>:
void ConfiguraMin(reloj* reloj1){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSMIN);
 800114c:	2008      	movs	r0, #8
 800114e:	f7ff fcdd 	bl	8000b0c <PosCaracLLcd>
	if(readKey()==true)estado_reloj=CONFIGURAR_SEG;
 8001152:	f7ff fac5 	bl	80006e0 <readKey>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <ConfiguraMin+0x22>
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <ConfiguraMin+0x70>)
 800115e:	2206      	movs	r2, #6
 8001160:	701a      	strb	r2, [r3, #0]
	encoder=ReadEncoder();
 8001162:	f7ff fbdb 	bl	800091c <ReadEncoder>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10b      	bne.n	8001188 <ConfiguraMin+0x48>
		Decrementa(&(reloj1->min),MINMIN,MINMAX);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	223b      	movs	r2, #59	; 0x3b
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f865 	bl	8001248 <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 800117e:	2202      	movs	r2, #2
 8001180:	2104      	movs	r1, #4
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fd93 	bl	8000cae <PresentaHoraLCD>
	}
	if(encoder==DER){
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d10b      	bne.n	80011a6 <ConfiguraMin+0x66>
		Incrementa(&(reloj1->min),MINMIN,MINMAX);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	223b      	movs	r2, #59	; 0x3b
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f89a 	bl	80012d0 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 800119c:	2202      	movs	r2, #2
 800119e:	2104      	movs	r1, #4
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fd84 	bl	8000cae <PresentaHoraLCD>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000a8 	.word	0x200000a8

080011b4 <ConfiguraSeg>:
void ConfiguraSeg(reloj* reloj1){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSSEG);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f7ff fca3 	bl	8000b0c <PosCaracLLcd>
	if(readKey()==true){
 80011c6:	f7ff fa8b 	bl	80006e0 <readKey>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d014      	beq.n	80011fa <ConfiguraSeg+0x46>
		CursorOffLcd();
 80011d0:	f7ff fcac 	bl	8000b2c <CursorOffLcd>
		Reloj_Write(*reloj1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4610      	mov	r0, r2
 80011da:	791a      	ldrb	r2, [r3, #4]
 80011dc:	7959      	ldrb	r1, [r3, #5]
 80011de:	0209      	lsls	r1, r1, #8
 80011e0:	430a      	orrs	r2, r1
 80011e2:	799b      	ldrb	r3, [r3, #6]
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	431a      	orrs	r2, r3
 80011e8:	2300      	movs	r3, #0
 80011ea:	f362 0317 	bfi	r3, r2, #0, #24
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fda5 	bl	8000d3e <Reloj_Write>
		estado_reloj=PRESENTAR;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <ConfiguraSeg+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
	}
	encoder=ReadEncoder();
 80011fa:	f7ff fb8f 	bl	800091c <ReadEncoder>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10a      	bne.n	800121e <ConfiguraSeg+0x6a>
		Decrementa(&(reloj1->seg),SEGMIN,SEGMAX);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	223b      	movs	r2, #59	; 0x3b
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f81a 	bl	8001248 <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001214:	2202      	movs	r2, #2
 8001216:	2104      	movs	r1, #4
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fd48 	bl	8000cae <PresentaHoraLCD>
	}
	if(encoder==DER){
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d10a      	bne.n	800123a <ConfiguraSeg+0x86>
		Incrementa(&(reloj1->seg),SEGMIN,SEGMAX);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	223b      	movs	r2, #59	; 0x3b
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f850 	bl	80012d0 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001230:	2202      	movs	r2, #2
 8001232:	2104      	movs	r1, #4
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fd3a 	bl	8000cae <PresentaHoraLCD>
	}

}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000a8 	.word	0x200000a8

08001248 <Decrementa>:
void Decrementa(uint8_t * valor,uint8_t limiteInf,uint8_t limiteSup){
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
 8001254:	4613      	mov	r3, r2
 8001256:	70bb      	strb	r3, [r7, #2]

	uint8_t aux;
	aux=(*valor&0x0f)+(((*valor&0xf0)>>4)*10);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	b2da      	uxtb	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	0089      	lsls	r1, r1, #2
 800126e:	440b      	add	r3, r1
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	73fb      	strb	r3, [r7, #15]
	if(aux==limiteInf)aux=limiteSup;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	429a      	cmp	r2, r3
 800127e:	d102      	bne.n	8001286 <Decrementa+0x3e>
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e002      	b.n	800128c <Decrementa+0x44>
	else aux--;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3b01      	subs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
	*valor=((aux/10)<<4)|(aux%10);
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <Decrementa+0x84>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	b258      	sxtb	r0, r3
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <Decrementa+0x84>)
 80012a0:	fba3 1302 	umull	r1, r3, r3, r2
 80012a4:	08d9      	lsrs	r1, r3, #3
 80012a6:	460b      	mov	r3, r1
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	4303      	orrs	r3, r0
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	701a      	strb	r2, [r3, #0]

}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	cccccccd 	.word	0xcccccccd

080012d0 <Incrementa>:

void Incrementa(uint8_t * valor,uint8_t limiteInf,uint8_t limiteSup){
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]
	uint8_t aux;
	aux=(*valor&0x0f)+(((*valor&0xf0)>>4)*10);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	0089      	lsls	r1, r1, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	73fb      	strb	r3, [r7, #15]
	aux++;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	3301      	adds	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
	if(aux>limiteSup)aux=limiteInf;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	78bb      	ldrb	r3, [r7, #2]
 800130a:	429a      	cmp	r2, r3
 800130c:	d901      	bls.n	8001312 <Incrementa+0x42>
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	73fb      	strb	r3, [r7, #15]
	*valor=((aux/10)<<4)|(aux%10);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <Incrementa+0x80>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	b258      	sxtb	r0, r3
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <Incrementa+0x80>)
 8001326:	fba3 1302 	umull	r1, r3, r3, r2
 800132a:	08d9      	lsrs	r1, r3, #3
 800132c:	460b      	mov	r3, r1
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4303      	orrs	r3, r0
 800133c:	b25b      	sxtb	r3, r3
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	701a      	strb	r2, [r3, #0]

}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	cccccccd 	.word	0xcccccccd

08001354 <buscar_indice>:

uint8_t buscar_indice (uint8_t * valor,uint8_t abuscar,uint8_t limite){
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	4613      	mov	r3, r2
 8001362:	70bb      	strb	r3, [r7, #2]

	for(int i=0;i<limite;i++)if(valor[i]==abuscar)return i;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e00c      	b.n	8001384 <buscar_indice+0x30>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	429a      	cmp	r2, r3
 8001376:	d102      	bne.n	800137e <buscar_indice+0x2a>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	e007      	b.n	800138e <buscar_indice+0x3a>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	78bb      	ldrb	r3, [r7, #2]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbee      	blt.n	800136a <buscar_indice+0x16>
	return -1;
 800138c:	23ff      	movs	r3, #255	; 0xff


}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <RTC_Write_Cal>:
#include "API_rtc.h"


extern I2C_HandleTypeDef hi2c1;

void RTC_Write_Cal(reloj reloj1){
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	463b      	mov	r3, r7
 80013a4:	e883 0003 	stmia.w	r3, {r0, r1}

	if(HAL_I2C_Mem_Write(&hi2c1,0x68<<1,0,I2C_MEMADD_SIZE_8BIT,(uint8_t *)&reloj1,sizeof(reloj),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2307      	movs	r3, #7
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	463b      	mov	r3, r7
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2200      	movs	r2, #0
 80013ba:	21d0      	movs	r1, #208	; 0xd0
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <RTC_Write_Cal+0x38>)
 80013be:	f000 fe95 	bl	80020ec <HAL_I2C_Mem_Write>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <RTC_Write_Cal+0x30>
 80013c8:	f7ff f8f4 	bl	80005b4 <Error_Handler>

}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000054 	.word	0x20000054

080013d8 <RTC_Read_Cal>:

void RTC_Read_Cal(reloj * reloj1){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1,0x68<<1,0,I2C_MEMADD_SIZE_8BIT,(uint8_t *)reloj1,sizeof(reloj),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2307      	movs	r3, #7
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2200      	movs	r2, #0
 80013f2:	21d0      	movs	r1, #208	; 0xd0
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <RTC_Read_Cal+0x34>)
 80013f6:	f000 ff73 	bl	80022e0 <HAL_I2C_Mem_Read>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <RTC_Read_Cal+0x2c>
 8001400:	f7ff f8d8 	bl	80005b4 <Error_Handler>

}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000054 	.word	0x20000054

08001410 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10e      	bne.n	800143e <BSP_LED_Init+0x2e>
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <BSP_LED_Init+0x94>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <BSP_LED_Init+0x94>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <BSP_LED_Init+0x94>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	e00d      	b.n	800145a <BSP_LED_Init+0x4a>
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <BSP_LED_Init+0x94>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <BSP_LED_Init+0x94>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <BSP_LED_Init+0x94>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <BSP_LED_Init+0x98>)
 800145e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <BSP_LED_Init+0x9c>)
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	f107 0214 	add.w	r2, r7, #20
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fa0a 	bl	8001898 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <BSP_LED_Init+0x9c>)
 8001488:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <BSP_LED_Init+0x98>)
 8001490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f000 fbc2 	bl	8001c20 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	080039a8 	.word	0x080039a8
 80014ac:	20000000 	.word	0x20000000

080014b0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <BSP_LED_On+0x2c>)
 80014be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <BSP_LED_On+0x30>)
 80014c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4619      	mov	r1, r3
 80014ce:	f000 fba7 	bl	8001c20 <HAL_GPIO_WritePin>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000000 	.word	0x20000000
 80014e0:	080039a8 	.word	0x080039a8

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <SystemInit+0x60>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <SystemInit+0x60>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <SystemInit+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <SystemInit+0x64>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <SystemInit+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <SystemInit+0x64>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <SystemInit+0x64>)
 8001510:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <SystemInit+0x64>)
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <SystemInit+0x68>)
 800151e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <SystemInit+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <SystemInit+0x64>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SystemInit+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SystemInit+0x60>)
 8001534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001538:	609a      	str	r2, [r3, #8]
#endif
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	40023800 	.word	0x40023800
 800154c:	24003010 	.word	0x24003010

08001550 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80015a4:	f000 f84e 	bl	8001644 <HAL_IncTick>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_Init+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_Init+0x34>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ba:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x34>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x34>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f931 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f001 fc87 	bl	8002ee6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f93b 	bl	800187e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f911 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000014 	.word	0x20000014
 8001640:	20000010 	.word	0x20000010

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000014 	.word	0x20000014
 8001668:	200000ac 	.word	0x200000ac

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200000ac 	.word	0x200000ac

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000014 	.word	0x20000014

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff47 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff5c 	bl	8001714 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb0 	bl	80017ec <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e177      	b.n	8001ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8166 	bne.w	8001b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80c0 	beq.w	8001b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d037      	beq.n	8001ad6 <HAL_GPIO_Init+0x23e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d031      	beq.n	8001ad2 <HAL_GPIO_Init+0x23a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02b      	beq.n	8001ace <HAL_GPIO_Init+0x236>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x338>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x232>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_GPIO_Init+0x33c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x340>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x22a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x344>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_GPIO_Init+0x348>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_GPIO_Init+0x34c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x350>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x21a>
 8001aae:	2309      	movs	r3, #9
 8001ab0:	e012      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	e010      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b1a:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae84 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40022400 	.word	0x40022400
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e12b      	b.n	8001ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f92e 	bl	8001edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb8:	f001 fddc 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <HAL_I2C_Init+0x274>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d807      	bhi.n	8001cd8 <HAL_I2C_Init+0x84>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <HAL_I2C_Init+0x278>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e006      	b.n	8001ce6 <HAL_I2C_Init+0x92>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a7d      	ldr	r2, [pc, #500]	; (8001ed0 <HAL_I2C_Init+0x27c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0e7      	b.n	8001ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a78      	ldr	r2, [pc, #480]	; (8001ed4 <HAL_I2C_Init+0x280>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_I2C_Init+0x274>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d802      	bhi.n	8001d28 <HAL_I2C_Init+0xd4>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3301      	adds	r3, #1
 8001d26:	e009      	b.n	8001d3c <HAL_I2C_Init+0xe8>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4a69      	ldr	r2, [pc, #420]	; (8001ed8 <HAL_I2C_Init+0x284>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	495c      	ldr	r1, [pc, #368]	; (8001ec8 <HAL_I2C_Init+0x274>)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d819      	bhi.n	8001d90 <HAL_I2C_Init+0x13c>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6a:	1c59      	adds	r1, r3, #1
 8001d6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d70:	400b      	ands	r3, r1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_I2C_Init+0x138>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e59      	subs	r1, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8a:	e051      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e04f      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <HAL_I2C_Init+0x168>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e58      	subs	r0, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e012      	b.n	8001de2 <HAL_I2C_Init+0x18e>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	0099      	lsls	r1, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Init+0x196>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e022      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10e      	bne.n	8001e10 <HAL_I2C_Init+0x1bc>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1e58      	subs	r0, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	440b      	add	r3, r1
 8001e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	e00f      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	0099      	lsls	r1, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	6809      	ldr	r1, [r1, #0]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6911      	ldr	r1, [r2, #16]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68d2      	ldr	r2, [r2, #12]
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	000186a0 	.word	0x000186a0
 8001ecc:	001e847f 	.word	0x001e847f
 8001ed0:	003d08ff 	.word	0x003d08ff
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	817b      	strh	r3, [r7, #10]
 8001f00:	4613      	mov	r3, r2
 8001f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff fbb2 	bl	800166c <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	f040 80e0 	bne.w	80020d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2319      	movs	r3, #25
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4970      	ldr	r1, [pc, #448]	; (80020e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fe02 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0d3      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x50>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0cc      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d007      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2221      	movs	r2, #33	; 0x21
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2210      	movs	r2, #16
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	893a      	ldrh	r2, [r7, #8]
 8001f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fbbc 	bl	800272c <I2C_MasterRequestWrite>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fd4:	e066      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fe7c 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11b      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x188>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d017      	beq.n	8002078 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fe6c 	bl	8002d5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	2b04      	cmp	r3, #4
 800208e:	d107      	bne.n	80020a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e01a      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d194      	bne.n	8001fd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	00100002 	.word	0x00100002
 80020e8:	ffff0000 	.word	0xffff0000

080020ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	4608      	mov	r0, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	817b      	strh	r3, [r7, #10]
 80020fe:	460b      	mov	r3, r1
 8002100:	813b      	strh	r3, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002106:	f7ff fab1 	bl	800166c <HAL_GetTick>
 800210a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	f040 80d9 	bne.w	80022cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2319      	movs	r3, #25
 8002120:	2201      	movs	r2, #1
 8002122:	496d      	ldr	r1, [pc, #436]	; (80022d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fd01 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
 8002132:	e0cc      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_I2C_Mem_Write+0x56>
 800213e:	2302      	movs	r3, #2
 8002140:	e0c5      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d007      	beq.n	8002168 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2221      	movs	r2, #33	; 0x21
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_I2C_Mem_Write+0x1f0>)
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021aa:	88f8      	ldrh	r0, [r7, #6]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4603      	mov	r3, r0
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fb38 	bl	8002830 <I2C_RequestMemoryWrite>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d052      	beq.n	800226c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e081      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fd82 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06b      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b04      	cmp	r3, #4
 8002232:	d11b      	bne.n	800226c <HAL_I2C_Mem_Write+0x180>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d017      	beq.n	800226c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1aa      	bne.n	80021ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fd6e 	bl	8002d5a <I2C_WaitOnBTFFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	2b04      	cmp	r3, #4
 800228a:	d107      	bne.n	800229c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e016      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	00100002 	.word	0x00100002
 80022dc:	ffff0000 	.word	0xffff0000

080022e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	817b      	strh	r3, [r7, #10]
 80022f2:	460b      	mov	r3, r1
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fa:	f7ff f9b7 	bl	800166c <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	f040 8208 	bne.w	800271e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2319      	movs	r3, #25
 8002314:	2201      	movs	r2, #1
 8002316:	497b      	ldr	r1, [pc, #492]	; (8002504 <HAL_I2C_Mem_Read+0x224>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fc07 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
 8002326:	e1fb      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Mem_Read+0x56>
 8002332:	2302      	movs	r3, #2
 8002334:	e1f4      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d007      	beq.n	800235c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2222      	movs	r2, #34	; 0x22
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800238c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_I2C_Mem_Read+0x228>)
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800239e:	88f8      	ldrh	r0, [r7, #6]
 80023a0:	893a      	ldrh	r2, [r7, #8]
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fad4 	bl	800295c <I2C_RequestMemoryRead>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1b0      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d113      	bne.n	80023ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e184      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d11b      	bne.n	800242e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e164      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	2b02      	cmp	r3, #2
 8002434:	d11b      	bne.n	800246e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002444:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	e144      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002484:	e138      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	2b03      	cmp	r3, #3
 800248c:	f200 80f1 	bhi.w	8002672 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	2b01      	cmp	r3, #1
 8002496:	d123      	bne.n	80024e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fc9d 	bl	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e139      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024de:	e10b      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d14e      	bne.n	8002586 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	2200      	movs	r2, #0
 80024f0:	4906      	ldr	r1, [pc, #24]	; (800250c <HAL_I2C_Mem_Read+0x22c>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fb1a 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e10e      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
 8002502:	bf00      	nop
 8002504:	00100002 	.word	0x00100002
 8002508:	ffff0000 	.word	0xffff0000
 800250c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002584:	e0b8      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	2200      	movs	r2, #0
 800258e:	4966      	ldr	r1, [pc, #408]	; (8002728 <HAL_I2C_Mem_Read+0x448>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 facb 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0bf      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	2200      	movs	r2, #0
 80025ea:	494f      	ldr	r1, [pc, #316]	; (8002728 <HAL_I2C_Mem_Read+0x448>)
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fa9d 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e091      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002670:	e042      	b.n	80026f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fbb0 	bl	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e04c      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d118      	bne.n	80026f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f47f aec2 	bne.w	8002486 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	00010004 	.word	0x00010004

0800272c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	460b      	mov	r3, r1
 800273a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d006      	beq.n	8002756 <I2C_MasterRequestWrite+0x2a>
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d003      	beq.n	8002756 <I2C_MasterRequestWrite+0x2a>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002754:	d108      	bne.n	8002768 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e00b      	b.n	8002780 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b12      	cmp	r3, #18
 800276e:	d107      	bne.n	8002780 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f9cd 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a6:	d103      	bne.n	80027b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e035      	b.n	8002820 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027bc:	d108      	bne.n	80027d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e01b      	b.n	8002808 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027d0:	897b      	ldrh	r3, [r7, #10]
 80027d2:	11db      	asrs	r3, r3, #7
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0306 	and.w	r3, r3, #6
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f063 030f 	orn	r3, r3, #15
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <I2C_MasterRequestWrite+0xfc>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f9f3 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e010      	b.n	8002820 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <I2C_MasterRequestWrite+0x100>)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f9e3 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	00010008 	.word	0x00010008
 800282c:	00010002 	.word	0x00010002

08002830 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2200      	movs	r2, #0
 8002862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f960 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002880:	d103      	bne.n	800288a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e05f      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800289c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	492d      	ldr	r1, [pc, #180]	; (8002958 <I2C_RequestMemoryWrite+0x128>)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f998 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e04c      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa02 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d107      	bne.n	80028f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e02b      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	e021      	b.n	800294c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b29b      	uxth	r3, r3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	6a39      	ldr	r1, [r7, #32]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f9dc 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b04      	cmp	r3, #4
 800292c:	d107      	bne.n	800293e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e005      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002942:	893b      	ldrh	r3, [r7, #8]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	00010002 	.word	0x00010002

0800295c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2200      	movs	r2, #0
 800299e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f8c2 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d103      	bne.n	80029c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0aa      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	4952      	ldr	r1, [pc, #328]	; (8002b28 <I2C_RequestMemoryRead+0x1cc>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f8fa 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e097      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f964 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e076      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e021      	b.n	8002a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f93e 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e050      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	6a39      	ldr	r1, [r7, #32]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f923 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d107      	bne.n	8002ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e035      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f82b 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e013      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	6a3a      	ldr	r2, [r7, #32]
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <I2C_RequestMemoryRead+0x1cc>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f863 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010002 	.word	0x00010002

08002b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3c:	e025      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d021      	beq.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7fe fd91 	bl	800166c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d116      	bne.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e023      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	e00c      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0b6      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be8:	e051      	b.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d123      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0204 	orr.w	r2, r3, #4
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e046      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d021      	beq.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe fd0f 	bl	800166c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e020      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10c      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e00b      	b.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d18d      	bne.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce4:	e02d      	b.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f8ce 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e02d      	b.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d021      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fcb5 	bl	800166c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b80      	cmp	r3, #128	; 0x80
 8002d4e:	d1ca      	bne.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d66:	e02d      	b.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f88d 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e02d      	b.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d021      	beq.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d80:	f7fe fc74 	bl	800166c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d302      	bcc.n	8002d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e007      	b.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d1ca      	bne.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de8:	e042      	b.n	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d119      	bne.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0210 	mvn.w	r2, #16
 8002e00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e029      	b.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fc1e 	bl	800166c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e007      	b.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d1b5      	bne.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d11b      	bne.n	8002ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f20:	f7fe fba4 	bl	800166c <HAL_GetTick>
 8002f24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f26:	e009      	b.n	8002f3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f28:	f7fe fba0 	bl	800166c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d901      	bls.n	8002f3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e01f      	b.n	8002f7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d1ee      	bne.n	8002f28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f50:	f7fe fb8c 	bl	800166c <HAL_GetTick>
 8002f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f56:	e009      	b.n	8002f6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f58:	f7fe fb88 	bl	800166c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f66:	d901      	bls.n	8002f6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e007      	b.n	8002f7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f78:	d1ee      	bne.n	8002f58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	420e0040 	.word	0x420e0040
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	420e0044 	.word	0x420e0044

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e267      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d075      	beq.n	800309e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb2:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	4b85      	ldr	r3, [pc, #532]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d112      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fca:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	4b7e      	ldr	r3, [pc, #504]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d05b      	beq.n	800309c <HAL_RCC_OscConfig+0x108>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d157      	bne.n	800309c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e242      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x74>
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e01d      	b.n	8003044 <HAL_RCC_OscConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x98>
 8003012:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6f      	ldr	r2, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6c      	ldr	r2, [pc, #432]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0xb0>
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fb0e 	bl	800166c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fb0a 	bl	800166c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e207      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xc0>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fafa 	bl	800166c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe faf6 	bl	800166c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1f3      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	4b51      	ldr	r3, [pc, #324]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0xe8>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030aa:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c2:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_RCC_OscConfig+0x152>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1c7      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4937      	ldr	r1, [pc, #220]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	e03a      	b.n	8003172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003104:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_RCC_OscConfig+0x244>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe faaf 	bl	800166c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe faab 	bl	800166c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1a8      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4925      	ldr	r1, [pc, #148]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCC_OscConfig+0x244>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fa8e 	bl	800166c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003154:	f7fe fa8a 	bl	800166c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e187      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d036      	beq.n	80031ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_RCC_OscConfig+0x248>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe fa6e 	bl	800166c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe fa6a 	bl	800166c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e167      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_OscConfig+0x240>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x200>
 80031b2:	e01b      	b.n	80031ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_OscConfig+0x248>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fa57 	bl	800166c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	e00e      	b.n	80031e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe fa53 	bl	800166c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d907      	bls.n	80031e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e150      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	42470000 	.word	0x42470000
 80031dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ea      	bne.n	80031c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8097 	beq.w	8003328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b81      	ldr	r3, [pc, #516]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	4b7d      	ldr	r3, [pc, #500]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a7c      	ldr	r2, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b7a      	ldr	r3, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b77      	ldr	r3, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x474>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d118      	bne.n	8003268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003236:	4b74      	ldr	r3, [pc, #464]	; (8003408 <HAL_RCC_OscConfig+0x474>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a73      	ldr	r2, [pc, #460]	; (8003408 <HAL_RCC_OscConfig+0x474>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe fa13 	bl	800166c <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe fa0f 	bl	800166c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e10c      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x474>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x2ea>
 8003270:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	e01c      	b.n	80032b8 <HAL_RCC_OscConfig+0x324>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b05      	cmp	r3, #5
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x30c>
 8003286:	4b5f      	ldr	r3, [pc, #380]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a5e      	ldr	r2, [pc, #376]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a5b      	ldr	r2, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0x324>
 80032a0:	4b58      	ldr	r3, [pc, #352]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	4b55      	ldr	r3, [pc, #340]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a54      	ldr	r2, [pc, #336]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f023 0304 	bic.w	r3, r3, #4
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe f9d4 	bl	800166c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe f9d0 	bl	800166c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0cb      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ee      	beq.n	80032c8 <HAL_RCC_OscConfig+0x334>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe f9be 	bl	800166c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe f9ba 	bl	800166c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0b5      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ee      	bne.n	80032f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a1 	beq.w	8003474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b08      	cmp	r3, #8
 800333c:	d05c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d141      	bne.n	80033ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_OscConfig+0x478>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe f98e 	bl	800166c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe f98a 	bl	800166c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e087      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	491b      	ldr	r1, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x478>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe f963 	bl	800166c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe f95f 	bl	800166c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e05c      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x416>
 80033c8:	e054      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe f94c 	bl	800166c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe f948 	bl	800166c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e045      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x444>
 80033f6:	e03d      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e038      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
 8003404:	40023800 	.word	0x40023800
 8003408:	40007000 	.word	0x40007000
 800340c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x4ec>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d028      	beq.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d121      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d11a      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	3b01      	subs	r3, #1
 800345a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0cc      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b68      	ldr	r3, [pc, #416]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d90c      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d044      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d119      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	2b03      	cmp	r3, #3
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e067      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4934      	ldr	r1, [pc, #208]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fe f87a 	bl	800166c <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe f876 	bl	800166c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e04f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20c      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd ffda 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00
 8003640:	40023800 	.word	0x40023800
 8003644:	080039b0 	.word	0x080039b0
 8003648:	2000000c 	.word	0x2000000c
 800364c:	20000010 	.word	0x20000010

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b094      	sub	sp, #80	; 0x50
 8003656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
 800365c:	2300      	movs	r3, #0
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003660:	2300      	movs	r3, #0
 8003662:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003668:	4b79      	ldr	r3, [pc, #484]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d00d      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x40>
 8003674:	2b08      	cmp	r3, #8
 8003676:	f200 80e1 	bhi.w	800383c <HAL_RCC_GetSysClockFreq+0x1ec>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 800367e:	2b04      	cmp	r3, #4
 8003680:	d003      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x3a>
 8003682:	e0db      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b73      	ldr	r3, [pc, #460]	; (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003688:	e0db      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368a:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_RCC_GetSysClockFreq+0x208>)
 800368c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800368e:	e0d8      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369a:	4b6d      	ldr	r3, [pc, #436]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d063      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	2200      	movs	r2, #0
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	0159      	lsls	r1, r3, #5
 80036d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d4:	0150      	lsls	r0, r2, #5
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4621      	mov	r1, r4
 80036dc:	1a51      	subs	r1, r2, r1
 80036de:	6139      	str	r1, [r7, #16]
 80036e0:	4629      	mov	r1, r5
 80036e2:	eb63 0301 	sbc.w	r3, r3, r1
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f4:	4659      	mov	r1, fp
 80036f6:	018b      	lsls	r3, r1, #6
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fe:	4651      	mov	r1, sl
 8003700:	018a      	lsls	r2, r1, #6
 8003702:	4651      	mov	r1, sl
 8003704:	ebb2 0801 	subs.w	r8, r2, r1
 8003708:	4659      	mov	r1, fp
 800370a:	eb63 0901 	sbc.w	r9, r3, r1
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003722:	4690      	mov	r8, r2
 8003724:	4699      	mov	r9, r3
 8003726:	4623      	mov	r3, r4
 8003728:	eb18 0303 	adds.w	r3, r8, r3
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	462b      	mov	r3, r5
 8003730:	eb49 0303 	adc.w	r3, r9, r3
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003742:	4629      	mov	r1, r5
 8003744:	024b      	lsls	r3, r1, #9
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374c:	4621      	mov	r1, r4
 800374e:	024a      	lsls	r2, r1, #9
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
 800375a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800375c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003760:	f7fc fd44 	bl	80001ec <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376c:	e058      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	2200      	movs	r2, #0
 8003776:	4618      	mov	r0, r3
 8003778:	4611      	mov	r1, r2
 800377a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	0159      	lsls	r1, r3, #5
 8003796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379a:	0150      	lsls	r0, r2, #5
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4641      	mov	r1, r8
 80037a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037c0:	ebb2 040a 	subs.w	r4, r2, sl
 80037c4:	eb63 050b 	sbc.w	r5, r3, fp
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	00eb      	lsls	r3, r5, #3
 80037d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d6:	00e2      	lsls	r2, r4, #3
 80037d8:	4614      	mov	r4, r2
 80037da:	461d      	mov	r5, r3
 80037dc:	4643      	mov	r3, r8
 80037de:	18e3      	adds	r3, r4, r3
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	464b      	mov	r3, r9
 80037e4:	eb45 0303 	adc.w	r3, r5, r3
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037f6:	4629      	mov	r1, r5
 80037f8:	028b      	lsls	r3, r1, #10
 80037fa:	4621      	mov	r1, r4
 80037fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003800:	4621      	mov	r1, r4
 8003802:	028a      	lsls	r2, r1, #10
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	61fa      	str	r2, [r7, #28]
 8003810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003814:	f7fc fcea 	bl	80001ec <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	3301      	adds	r3, #1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800383a:	e002      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003844:	4618      	mov	r0, r3
 8003846:	3750      	adds	r7, #80	; 0x50
 8003848:	46bd      	mov	sp, r7
 800384a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	2000000c 	.word	0x2000000c

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	080039c0 	.word	0x080039c0

0800389c <main>:
  * @retval None
  */

reloj reloj1;

int main(void){
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  //uint8_t encoder,val;
  HAL_Init();
 80038a0:	f7fd fe84 	bl	80015ac <HAL_Init>
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80038a4:	f7fc fe24 	bl	80004f0 <SystemClock_Config>
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 80038a8:	2001      	movs	r0, #1
 80038aa:	f7fd fdb1 	bl	8001410 <BSP_LED_Init>
  //BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
  if(Init_Lcd()==LCD_ERROR)Error_Handler();
 80038ae:	f7fd f849 	bl	8000944 <Init_Lcd>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <main+0x20>
 80038b8:	f7fc fe7c 	bl	80005b4 <Error_Handler>
  RelojInit(&reloj1);
 80038bc:	4808      	ldr	r0, [pc, #32]	; (80038e0 <main+0x44>)
 80038be:	f7fd fa23 	bl	8000d08 <RelojInit>
  ClrLcd();
 80038c2:	f7fd f909 	bl	8000ad8 <ClrLcd>
  Init_Enc();
 80038c6:	f7fc ffcb 	bl	8000860 <Init_Enc>
  debounceFSM_init();
 80038ca:	f7fc fe79 	bl	80005c0 <debounceFSM_init>
  while (true){
	  RelojFSM_Update(&reloj1);
 80038ce:	4804      	ldr	r0, [pc, #16]	; (80038e0 <main+0x44>)
 80038d0:	f7fd fa44 	bl	8000d5c <RelojFSM_Update>
  	  EncFSM_Update();
 80038d4:	f7fc ffd6 	bl	8000884 <EncFSM_Update>
  	  debounceFSM_update();
 80038d8:	f7fc fe82 	bl	80005e0 <debounceFSM_update>
	  RelojFSM_Update(&reloj1);
 80038dc:	e7f7      	b.n	80038ce <main+0x32>
 80038de:	bf00      	nop
 80038e0:	200000b0 	.word	0x200000b0

080038e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80038e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800391c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038ea:	e003      	b.n	80038f4 <LoopCopyDataInit>

080038ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038f2:	3104      	adds	r1, #4

080038f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038f4:	480b      	ldr	r0, [pc, #44]	; (8003924 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038fc:	d3f6      	bcc.n	80038ec <CopyDataInit>
  ldr  r2, =_sbss
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003900:	e002      	b.n	8003908 <LoopFillZerobss>

08003902 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003902:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003904:	f842 3b04 	str.w	r3, [r2], #4

08003908 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800390a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800390c:	d3f9      	bcc.n	8003902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800390e:	f7fd fde9 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003912:	f000 f811 	bl	8003938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003916:	f7ff ffc1 	bl	800389c <main>
  bx  lr    
 800391a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800391c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003920:	080039d8 	.word	0x080039d8
  ldr  r0, =_sdata
 8003924:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003928:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800392c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8003930:	200000b8 	.word	0x200000b8

08003934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003934:	e7fe      	b.n	8003934 <ADC_IRQHandler>
	...

08003938 <__libc_init_array>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4d0d      	ldr	r5, [pc, #52]	; (8003970 <__libc_init_array+0x38>)
 800393c:	4c0d      	ldr	r4, [pc, #52]	; (8003974 <__libc_init_array+0x3c>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	2600      	movs	r6, #0
 8003944:	42a6      	cmp	r6, r4
 8003946:	d109      	bne.n	800395c <__libc_init_array+0x24>
 8003948:	4d0b      	ldr	r5, [pc, #44]	; (8003978 <__libc_init_array+0x40>)
 800394a:	4c0c      	ldr	r4, [pc, #48]	; (800397c <__libc_init_array+0x44>)
 800394c:	f000 f818 	bl	8003980 <_init>
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	2600      	movs	r6, #0
 8003956:	42a6      	cmp	r6, r4
 8003958:	d105      	bne.n	8003966 <__libc_init_array+0x2e>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003960:	4798      	blx	r3
 8003962:	3601      	adds	r6, #1
 8003964:	e7ee      	b.n	8003944 <__libc_init_array+0xc>
 8003966:	f855 3b04 	ldr.w	r3, [r5], #4
 800396a:	4798      	blx	r3
 800396c:	3601      	adds	r6, #1
 800396e:	e7f2      	b.n	8003956 <__libc_init_array+0x1e>
 8003970:	080039d0 	.word	0x080039d0
 8003974:	080039d0 	.word	0x080039d0
 8003978:	080039d0 	.word	0x080039d0
 800397c:	080039d4 	.word	0x080039d4

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
