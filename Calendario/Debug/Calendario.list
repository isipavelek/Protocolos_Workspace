
Calendario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000400c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004268  08004268  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000ac  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a055  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222f  00000000  00000000  0002a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000900  00000000  00000000  0002cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278e1  00000000  00000000  0002d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012de5  00000000  00000000  00054ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2917  00000000  00000000  00067cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a5dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000260c  00000000  00000000  0014a630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080041a0 	.word	0x080041a0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080041a0 	.word	0x080041a0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <I2C_HW_init>:
 **********************************************************************************/


static void GPIO_I2C(I2C_HandleTypeDef  *hi2c);

_Bool I2C_HW_init(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <I2C_HW_init+0x58>)
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <I2C_HW_init+0x5c>)
 80004f8:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <I2C_HW_init+0x58>)
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <I2C_HW_init+0x60>)
 80004fe:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <I2C_HW_init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <I2C_HW_init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <I2C_HW_init+0x58>)
 800050e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000512:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <I2C_HW_init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <I2C_HW_init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <I2C_HW_init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <I2C_HW_init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
	  GPIO_I2C(&hi2c1);
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <I2C_HW_init+0x58>)
 800052e:	f000 f811 	bl	8000554 <GPIO_I2C>
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)return HAL_ERROR;
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <I2C_HW_init+0x58>)
 8000534:	f001 ff9e 	bl	8002474 <HAL_I2C_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <I2C_HW_init+0x52>
 800053e:	2301      	movs	r3, #1
 8000540:	e000      	b.n	8000544 <I2C_HW_init+0x54>
	  return HAL_OK;
 8000542:	2300      	movs	r3, #0

}
 8000544:	4618      	mov	r0, r3
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000034 	.word	0x20000034
 800054c:	40005400 	.word	0x40005400
 8000550:	000186a0 	.word	0x000186a0

08000554 <GPIO_I2C>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
static void GPIO_I2C(I2C_HandleTypeDef  *hi2c){
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <GPIO_I2C+0x6c>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <GPIO_I2C+0x6c>)
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <GPIO_I2C+0x6c>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	f003 0302 	and.w	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	693b      	ldr	r3, [r7, #16]

	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800057c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057e:	2312      	movs	r3, #18
 8000580:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800058a:	2304      	movs	r3, #4
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <GPIO_I2C+0x70>)
 8000596:	f001 fd8f 	bl	80020b8 <HAL_GPIO_Init>

	     /* Peripheral clock enable */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <GPIO_I2C+0x6c>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <GPIO_I2C+0x6c>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6413      	str	r3, [r2, #64]	; 0x40
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <GPIO_I2C+0x6c>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40020400 	.word	0x40020400

080005c8 <SystemClock_Config>:
  */

#include "API_init.h"

void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <SystemClock_Config+0xbc>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <SystemClock_Config+0xbc>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xbc>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <SystemClock_Config+0xc0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a25      	ldr	r2, [pc, #148]	; (8000688 <SystemClock_Config+0xc0>)
 80005f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xc0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800060a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800060e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061a:	2308      	movs	r3, #8
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800061e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000628:	2307      	movs	r3, #7
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f8bf 	bl	80037b4 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 800063c:	f000 f826 	bl	800068c <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000640:	f003 f868 	bl	8003714 <HAL_PWREx_EnableOverDrive>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800064a:	f000 f81f 	bl	800068c <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800064e:	230f      	movs	r3, #15
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066a:	2105      	movs	r1, #5
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fb19 	bl	8003ca4 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xb4>
    Error_Handler();
 8000678:	f000 f808 	bl	800068c <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 fb1d 	bl	8001cd0 <BSP_LED_On>
  while (1);
 8000696:	e7fe      	b.n	8000696 <Error_Handler+0xa>

08000698 <debounceFSM_init>:
 * Fecha 13/4/23
  *
 **********************************************************************************/


void debounceFSM_init(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	delayInit(&tiempo1,DEMORA_BASE);
 800069c:	2128      	movs	r1, #40	; 0x28
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <debounceFSM_init+0x20>)
 80006a0:	f000 f8a8 	bl	80007f4 <delayInit>
	delayInit(&tiempo2,DEMORA_LARGA);
 80006a4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <debounceFSM_init+0x24>)
 80006aa:	f000 f8a3 	bl	80007f4 <delayInit>

	estado=BUTTON_UP;
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <debounceFSM_init+0x28>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000008c 	.word	0x2000008c
 80006bc:	20000098 	.word	0x20000098
 80006c0:	20000088 	.word	0x20000088

080006c4 <debounceFSM_update>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void debounceFSM_update(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	switch (estado){
 80006c8:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <debounceFSM_update+0xec>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d86d      	bhi.n	80007ac <debounceFSM_update+0xe8>
 80006d0:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <debounceFSM_update+0x14>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	080006e9 	.word	0x080006e9
 80006dc:	08000701 	.word	0x08000701
 80006e0:	08000733 	.word	0x08000733
 80006e4:	08000763 	.word	0x08000763
			case (BUTTON_UP): if(Leer_Enc_Sw()==true){
 80006e8:	f000 f920 	bl	800092c <Leer_Enc_Sw>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d055      	beq.n	800079e <debounceFSM_update+0xda>
								estado=BUTTON_FALLING;
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <debounceFSM_update+0xec>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
								delayRead(&tiempo1);
 80006f8:	482e      	ldr	r0, [pc, #184]	; (80007b4 <debounceFSM_update+0xf0>)
 80006fa:	f000 f88c 	bl	8000816 <delayRead>
							  }
							  break;
 80006fe:	e04e      	b.n	800079e <debounceFSM_update+0xda>
			case (BUTTON_FALLING): if(delayRead(&tiempo1)){
 8000700:	482c      	ldr	r0, [pc, #176]	; (80007b4 <debounceFSM_update+0xf0>)
 8000702:	f000 f888 	bl	8000816 <delayRead>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d04a      	beq.n	80007a2 <debounceFSM_update+0xde>
									 if(Leer_Enc_Sw()==false)estado=BUTTON_UP;
 800070c:	f000 f90e 	bl	800092c <Leer_Enc_Sw>
 8000710:	4603      	mov	r3, r0
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <debounceFSM_update+0x60>
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <debounceFSM_update+0xec>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
									 else {
										 estado=BUTTON_DOWN;
										 delayRead(&tiempo2);
									 }
									}
									break;
 8000722:	e03e      	b.n	80007a2 <debounceFSM_update+0xde>
										 estado=BUTTON_DOWN;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <debounceFSM_update+0xec>)
 8000726:	2202      	movs	r2, #2
 8000728:	701a      	strb	r2, [r3, #0]
										 delayRead(&tiempo2);
 800072a:	4823      	ldr	r0, [pc, #140]	; (80007b8 <debounceFSM_update+0xf4>)
 800072c:	f000 f873 	bl	8000816 <delayRead>
									break;
 8000730:	e037      	b.n	80007a2 <debounceFSM_update+0xde>
			case (BUTTON_DOWN):if(Leer_Enc_Sw()==false){
 8000732:	f000 f8fb 	bl	800092c <Leer_Enc_Sw>
 8000736:	4603      	mov	r3, r0
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d005      	beq.n	800074e <debounceFSM_update+0x8a>
									estado=BUTTON_RAISING;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <debounceFSM_update+0xec>)
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]
									delayRead(&tiempo1);
 8000748:	481a      	ldr	r0, [pc, #104]	; (80007b4 <debounceFSM_update+0xf0>)
 800074a:	f000 f864 	bl	8000816 <delayRead>


								}
			 	 	 	 	 	if(delayRead(&tiempo2))tecla=PRES_LARGO_TIEMPO;
 800074e:	481a      	ldr	r0, [pc, #104]	; (80007b8 <debounceFSM_update+0xf4>)
 8000750:	f000 f861 	bl	8000816 <delayRead>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d025      	beq.n	80007a6 <debounceFSM_update+0xe2>
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <debounceFSM_update+0xf8>)
 800075c:	2202      	movs	r2, #2
 800075e:	701a      	strb	r2, [r3, #0]
								break;
 8000760:	e021      	b.n	80007a6 <debounceFSM_update+0xe2>
			case (BUTTON_RAISING):
								if(delayRead(&tiempo1)){
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <debounceFSM_update+0xf0>)
 8000764:	f000 f857 	bl	8000816 <delayRead>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01d      	beq.n	80007aa <debounceFSM_update+0xe6>
									 if(Leer_Enc_Sw()==true)estado=BUTTON_DOWN;
 800076e:	f000 f8dd 	bl	800092c <Leer_Enc_Sw>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <debounceFSM_update+0xbc>
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <debounceFSM_update+0xec>)
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]
										 else tecla=SUELTO;
										 estado=BUTTON_UP;
									 }

								}
								break;
 800077e:	e014      	b.n	80007aa <debounceFSM_update+0xe6>
										 if(tecla!=PRES_LARGO_TIEMPO)tecla=PRESIONADO;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <debounceFSM_update+0xf8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d003      	beq.n	8000790 <debounceFSM_update+0xcc>
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <debounceFSM_update+0xf8>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e002      	b.n	8000796 <debounceFSM_update+0xd2>
										 else tecla=SUELTO;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <debounceFSM_update+0xf8>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
										 estado=BUTTON_UP;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <debounceFSM_update+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
								break;
 800079c:	e005      	b.n	80007aa <debounceFSM_update+0xe6>
							  break;
 800079e:	bf00      	nop
 80007a0:	e004      	b.n	80007ac <debounceFSM_update+0xe8>
									break;
 80007a2:	bf00      	nop
 80007a4:	e002      	b.n	80007ac <debounceFSM_update+0xe8>
								break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <debounceFSM_update+0xe8>
								break;
 80007aa:	bf00      	nop


	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000088 	.word	0x20000088
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	20000098 	.word	0x20000098
 80007bc:	200000a4 	.word	0x200000a4

080007c0 <LeerSW>:
  *
 **********************************************************************************/



estado_boton LeerSW(void){
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

	if(tecla==PRESIONADO){
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <LeerSW+0x30>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d104      	bne.n	80007d6 <LeerSW+0x16>
		tecla=SUELTO;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <LeerSW+0x30>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
		return PRESIONADO;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e006      	b.n	80007e4 <LeerSW+0x24>
	}
	if(tecla==PRES_LARGO_TIEMPO){
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <LeerSW+0x30>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d101      	bne.n	80007e2 <LeerSW+0x22>
		return PRES_LARGO_TIEMPO;
 80007de:	2302      	movs	r3, #2
 80007e0:	e000      	b.n	80007e4 <LeerSW+0x24>
	}

	return SUELTO;
 80007e2:	2300      	movs	r3, #0

}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000a4 	.word	0x200000a4

080007f4 <delayInit>:
 */

#include "API_delay.h"


void delayInit( delay_t * delay, tick_t duration ){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	721a      	strb	r2, [r3, #8]

}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <delayRead>:
bool_t delayRead( delay_t * delay ){
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	if((delay->running)==false){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7a1b      	ldrb	r3, [r3, #8]
 8000822:	f083 0301 	eor.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <delayRead+0x28>
		delay->running=true;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	721a      	strb	r2, [r3, #8]
		delay->startTime=HAL_GetTick();
 8000832:	f001 fb2b 	bl	8001e8c <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	e00e      	b.n	800085c <delayRead+0x46>

	}
	else{
		if(HAL_GetTick()-delay->startTime>=delay->duration){
 800083e:	f001 fb25 	bl	8001e8c <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	1ad2      	subs	r2, r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d304      	bcc.n	800085c <delayRead+0x46>
			delay->running=false;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	721a      	strb	r2, [r3, #8]
			return true;
 8000858:	2301      	movs	r3, #1
 800085a:	e000      	b.n	800085e <delayRead+0x48>
		}
	}
	return false;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <Init_Enc_port>:
 *  Created on: 1 abr. 2023
 *      Author: ipave
 */
#include "API_enc_port.h"

_Bool Init_Enc_port(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct;

	  /* Enable the BUTTON Clock */
  	__HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <Init_Enc_port+0x80>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <Init_Enc_port+0x80>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <Init_Enc_port+0x80>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]

	    /* Configure Button pin as input */
	GPIO_InitStruct.Pin = PINCLK| PINDT;
 800088a:	2303      	movs	r3, #3
 800088c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORTCLK, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <Init_Enc_port+0x84>)
 80008a2:	f001 fc09 	bl	80020b8 <HAL_GPIO_Init>
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <Init_Enc_port+0x80>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <Init_Enc_port+0x80>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <Init_Enc_port+0x80>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = PINSW;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORTSW, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <Init_Enc_port+0x88>)
 80008da:	f001 fbed 	bl	80020b8 <HAL_GPIO_Init>
	return 0;
 80008de:	2300      	movs	r3, #0

}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021800 	.word	0x40021800

080008f4 <Leer_Enc_Pin>:

uint8_t Leer_Enc_Pin(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	uint8_t estado=0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	71fb      	strb	r3, [r7, #7]
	estado=HAL_GPIO_ReadPin(PORTCLK,PINCLK);
 80008fe:	2101      	movs	r1, #1
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <Leer_Enc_Pin+0x34>)
 8000902:	f001 fd85 	bl	8002410 <HAL_GPIO_ReadPin>
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	estado+=(HAL_GPIO_ReadPin(PORTDT,PINDT)<<1);
 800090a:	2102      	movs	r1, #2
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <Leer_Enc_Pin+0x34>)
 800090e:	f001 fd7f 	bl	8002410 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4413      	add	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	return estado;
 800091e:	79fb      	ldrb	r3, [r7, #7]

}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40020c00 	.word	0x40020c00

0800092c <Leer_Enc_Sw>:

_Bool Leer_Enc_Sw(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	return !HAL_GPIO_ReadPin(PORTSW,PINSW);
 8000930:	2101      	movs	r1, #1
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <Leer_Enc_Sw+0x1c>)
 8000934:	f001 fd6c 	bl	8002410 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3

}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021800 	.word	0x40021800

0800094c <Init_Enc>:

static uint8_t estado;
static uint8_t giro=NOGIRA;
static delay_t encoder_time;

_Bool Init_Enc(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	Init_Enc_port();
 8000950:	f7ff ff8a 	bl	8000868 <Init_Enc_port>
    delayInit(&encoder_time,DEMORA_BASE);
 8000954:	2128      	movs	r1, #40	; 0x28
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <Init_Enc+0x1c>)
 8000958:	f7ff ff4c 	bl	80007f4 <delayInit>
    estado=INI;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <Init_Enc+0x20>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
	return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000a8 	.word	0x200000a8
 800096c:	200000a5 	.word	0x200000a5

08000970 <EncFSM_Update>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
void EncFSM_Update(){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

	uint8_t estados_pines=Leer_Enc_Pin();
 8000976:	f7ff ffbd 	bl	80008f4 <Leer_Enc_Pin>
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	switch (estado){
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <EncFSM_Update+0x12c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b06      	cmp	r3, #6
 8000984:	f200 8086 	bhi.w	8000a94 <EncFSM_Update+0x124>
 8000988:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <EncFSM_Update+0x20>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009ad 	.word	0x080009ad
 8000994:	080009c7 	.word	0x080009c7
 8000998:	08000a61 	.word	0x08000a61
 800099c:	08000a21 	.word	0x08000a21
 80009a0:	08000a01 	.word	0x08000a01
 80009a4:	080009e1 	.word	0x080009e1
 80009a8:	08000a41 	.word	0x08000a41
		case INI: if(estados_pines==PINDT+PINCLK)estado=E11;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d102      	bne.n	80009b8 <EncFSM_Update+0x48>
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <EncFSM_Update+0x12c>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	701a      	strb	r2, [r3, #0]
				  if(estados_pines==NOENC)estado=E00;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d15d      	bne.n	8000a7a <EncFSM_Update+0x10a>
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <EncFSM_Update+0x12c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
				  break;
 80009c4:	e059      	b.n	8000a7a <EncFSM_Update+0x10a>
		case E00:if(estados_pines==PINCLK)estado=E01Der;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d102      	bne.n	80009d2 <EncFSM_Update+0x62>
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <EncFSM_Update+0x12c>)
 80009ce:	2203      	movs	r2, #3
 80009d0:	701a      	strb	r2, [r3, #0]
				  if(estados_pines==PINDT)estado=E10Izq;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d152      	bne.n	8000a7e <EncFSM_Update+0x10e>
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <EncFSM_Update+0x12c>)
 80009da:	2206      	movs	r2, #6
 80009dc:	701a      	strb	r2, [r3, #0]
				  break;
 80009de:	e04e      	b.n	8000a7e <EncFSM_Update+0x10e>
		case E01Izq:if(estados_pines==PINDT+PINCLK)estado=E11;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d102      	bne.n	80009ec <EncFSM_Update+0x7c>
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <EncFSM_Update+0x12c>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	701a      	strb	r2, [r3, #0]
				  if(estados_pines==NOENC){
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d147      	bne.n	8000a82 <EncFSM_Update+0x112>
					  giro=IZQ;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <EncFSM_Update+0x130>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
					  estado=E00;
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <EncFSM_Update+0x12c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 80009fe:	e040      	b.n	8000a82 <EncFSM_Update+0x112>
		case E10Der:
				  if(estados_pines==NOENC){
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d105      	bne.n	8000a12 <EncFSM_Update+0xa2>
					  giro=DER;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <EncFSM_Update+0x130>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]
					  estado=E00;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
				  }
				  if(estados_pines==PINDT+PINCLK)estado=E11;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d136      	bne.n	8000a86 <EncFSM_Update+0x116>
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	701a      	strb	r2, [r3, #0]
				  break;
 8000a1e:	e032      	b.n	8000a86 <EncFSM_Update+0x116>

		case E01Der:if(estados_pines==PINDT+PINCLK){
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d105      	bne.n	8000a32 <EncFSM_Update+0xc2>
						giro=DER;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <EncFSM_Update+0x130>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	701a      	strb	r2, [r3, #0]
						estado=E11;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	701a      	strb	r2, [r3, #0]
					}
				  if(estados_pines==NOENC)estado=E00;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d128      	bne.n	8000a8a <EncFSM_Update+0x11a>
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
				  break;
 8000a3e:	e024      	b.n	8000a8a <EncFSM_Update+0x11a>
		case E10Izq:if(estados_pines==PINDT+PINCLK){
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d105      	bne.n	8000a52 <EncFSM_Update+0xe2>
					giro=IZQ;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <EncFSM_Update+0x130>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
					estado=E11;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]
				  }
				  if(estados_pines==NOENC)estado=E00;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d11a      	bne.n	8000a8e <EncFSM_Update+0x11e>
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
				  break;
 8000a5e:	e016      	b.n	8000a8e <EncFSM_Update+0x11e>
		case E11: if(estados_pines==PINCLK)estado=E01Izq;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d102      	bne.n	8000a6c <EncFSM_Update+0xfc>
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a68:	2205      	movs	r2, #5
 8000a6a:	701a      	strb	r2, [r3, #0]
				  if(estados_pines==PINDT)estado=E10Der;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d10f      	bne.n	8000a92 <EncFSM_Update+0x122>
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <EncFSM_Update+0x12c>)
 8000a74:	2204      	movs	r2, #4
 8000a76:	701a      	strb	r2, [r3, #0]
				  break;
 8000a78:	e00b      	b.n	8000a92 <EncFSM_Update+0x122>
				  break;
 8000a7a:	bf00      	nop
 8000a7c:	e00a      	b.n	8000a94 <EncFSM_Update+0x124>
				  break;
 8000a7e:	bf00      	nop
 8000a80:	e008      	b.n	8000a94 <EncFSM_Update+0x124>
				  break;
 8000a82:	bf00      	nop
 8000a84:	e006      	b.n	8000a94 <EncFSM_Update+0x124>
				  break;
 8000a86:	bf00      	nop
 8000a88:	e004      	b.n	8000a94 <EncFSM_Update+0x124>
				  break;
 8000a8a:	bf00      	nop
 8000a8c:	e002      	b.n	8000a94 <EncFSM_Update+0x124>
				  break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <EncFSM_Update+0x124>
				  break;
 8000a92:	bf00      	nop

	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000a5 	.word	0x200000a5
 8000aa0:	200000a6 	.word	0x200000a6

08000aa4 <LeerEncoder>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

giro_encoder_t LeerEncoder(){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
	uint8_t aux=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
	aux=giro;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <LeerEncoder+0x24>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
	giro=NOGIRA;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <LeerEncoder+0x24>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	return aux;
 8000aba:	79fb      	ldrb	r3, [r7, #7]

}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	200000a6 	.word	0x200000a6

08000acc <Init_Lcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

_Bool Init_Lcd(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

   if(I2C_HW_init()==LCD_ERROR)return LCD_ERROR;
 8000ad2:	f7ff fd0d 	bl	80004f0 <I2C_HW_init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <Init_Lcd+0x14>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e02b      	b.n	8000b38 <Init_Lcd+0x6c>
   DelayLcd(DELAY20ms);
 8000ae0:	2014      	movs	r0, #20
 8000ae2:	f000 f82f 	bl	8000b44 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2030      	movs	r0, #48	; 0x30
 8000aea:	f000 f895 	bl	8000c18 <Envia4bitsLcd>
   DelayLcd(DELAY10ms);
 8000aee:	200a      	movs	r0, #10
 8000af0:	f000 f828 	bl	8000b44 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2030      	movs	r0, #48	; 0x30
 8000af8:	f000 f88e 	bl	8000c18 <Envia4bitsLcd>
   DelayLcd(DELAY1ms);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 f821 	bl	8000b44 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2030      	movs	r0, #48	; 0x30
 8000b06:	f000 f887 	bl	8000c18 <Envia4bitsLcd>
   Envia4bitsLcd(COMANDO_INI2,CONTROL);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2020      	movs	r0, #32
 8000b0e:	f000 f883 	bl	8000c18 <Envia4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e008      	b.n	8000b2a <Init_Lcd+0x5e>
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <Init_Lcd+0x74>)
 8000b1c:	5cd3      	ldrb	r3, [r2, r3]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f81b 	bl	8000b5a <ControlLcd>
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	3301      	adds	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b05      	cmp	r3, #5
 8000b2e:	d9f3      	bls.n	8000b18 <Init_Lcd+0x4c>
   DelayLcd(DELAY2ms);
 8000b30:	2002      	movs	r0, #2
 8000b32:	f000 f807 	bl	8000b44 <DelayLcd>
   return LCD_OK;
 8000b36:	2300      	movs	r3, #0

}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	080041f4 	.word	0x080041f4

08000b44 <DelayLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void DelayLcd(uint32_t demora){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f001 f9a9 	bl	8001ea4 <HAL_Delay>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <ControlLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void ControlLcd(uint8_t valor){
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(valor,CONTROL);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f838 	bl	8000bde <Envia8bitsLcd>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <DatoLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void DatoLcd (uint8_t dato){
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato,DATOS);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f82a 	bl	8000bde <Envia8bitsLcd>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <DatoAsciiLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void DatoAsciiLcd (uint8_t dato){
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato+ '0',DATOS);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3330      	adds	r3, #48	; 0x30
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f81a 	bl	8000bde <Envia8bitsLcd>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <DatoBCD>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void DatoBCD (uint8_t dato){
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]

	  DatoAsciiLcd((((dato)&0xf0)>>4));
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffe5 	bl	8000b92 <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffde 	bl	8000b92 <DatoAsciiLcd>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <Envia8bitsLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void Envia8bitsLcd (uint8_t valor,_Bool tipo){
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	460a      	mov	r2, r1
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	4613      	mov	r3, r2
 8000bec:	71bb      	strb	r3, [r7, #6]
	Envia4bitsLcd(valor&HIGH_NIBBLE,tipo); 		//me con quedo y envio los 4 bits más significaticos.
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f023 030f 	bic.w	r3, r3, #15
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	79ba      	ldrb	r2, [r7, #6]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f80c 	bl	8000c18 <Envia4bitsLcd>
	Envia4bitsLcd(valor<<LOW_NIBBLE,tipo);   	//me quedo y envio los 4 bits menos significativos.
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f804 	bl	8000c18 <Envia4bitsLcd>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Envia4bitsLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void Envia4bitsLcd (uint8_t valor,_Bool tipo){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]

	LCD_Write_Byte(valor+tipo+EN+BL);
 8000c28:	79ba      	ldrb	r2, [r7, #6]
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	330c      	adds	r3, #12
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f861 	bl	8000cfc <LCD_Write_Byte>
	DelayLcd(DelayTime);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff ff82 	bl	8000b44 <DelayLcd>
	LCD_Write_Byte(valor+tipo+BL);
 8000c40:	79ba      	ldrb	r2, [r7, #6]
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	3308      	adds	r3, #8
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f855 	bl	8000cfc <LCD_Write_Byte>
	DelayLcd(DelayTime);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff ff76 	bl	8000b44 <DelayLcd>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SacaTextoLcd>:
 * Fecha 13/4/23
  *
 **********************************************************************************/


void SacaTextoLcd (uint8_t *texto){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	while(*texto)DatoLcd(*texto++);
 8000c68:	e006      	b.n	8000c78 <SacaTextoLcd+0x18>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff7f 	bl	8000b76 <DatoLcd>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f4      	bne.n	8000c6a <SacaTextoLcd+0xa>
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <ClrLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void ClrLcd(void){
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
   ControlLcd(CLR_LCD);				//	Display Clear.
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff ff63 	bl	8000b5a <ControlLcd>
   DelayLcd(DELAY2ms);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff ff55 	bl	8000b44 <DelayLcd>

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <PosCaracHLcd>:
 * Fecha 13/4/23
  *
 **********************************************************************************/


void PosCaracHLcd(uint8_t posH){
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff52 	bl	8000b5a <ControlLcd>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <PosCaracLLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void PosCaracLLcd(uint8_t posL){
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff42 	bl	8000b5a <ControlLcd>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <CursorOffLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void CursorOffLcd(void){
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
	ControlLcd(DISPLAY_CONTROL+DISPLAY_ON);
 8000ce2:	200c      	movs	r0, #12
 8000ce4:	f7ff ff39 	bl	8000b5a <ControlLcd>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <CursorOnLcd>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void CursorOnLcd(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	ControlLcd(DISPLAY_CONTROL+CURSOR_ON+DISPLAY_ON+CURSOR_BLINK);
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	f7ff ff32 	bl	8000b5a <ControlLcd>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <LCD_Write_Byte>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void LCD_Write_Byte(uint8_t valor){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,0x27<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	214e      	movs	r1, #78	; 0x4e
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <LCD_Write_Byte+0x30>)
 8000d14:	f001 fcfc 	bl	8002710 <HAL_I2C_Master_Transmit>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <LCD_Write_Byte+0x26>
 8000d1e:	f7ff fcb5 	bl	800068c <Error_Handler>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000034 	.word	0x20000034

08000d30 <PresentaTempLCD>:
 * Version: 1.0
 * Fecha 16/4/23
  *
 **********************************************************************************/

static void PresentaTempLCD(uint8_t pos){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]

	temp_t temp=RTC_Read_Temp();
 8000d3a:	f000 ff55 	bl	8001be8 <RTC_Read_Temp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	81bb      	strh	r3, [r7, #12]
	PosCaracHLcd(POSTEMPTIT);
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff ffab 	bl	8000c9e <PosCaracHLcd>
	if(idioma==ESP)SacaTextoLcd((uint8_t*)"Temperatura:");
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <PresentaTempLCD+0xf0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <PresentaTempLCD+0x2e>
 8000d56:	4833      	ldr	r0, [pc, #204]	; (8000e24 <PresentaTempLCD+0xf4>)
 8000d58:	f7ff ff82 	bl	8000c60 <SacaTextoLcd>
 8000d5c:	e002      	b.n	8000d64 <PresentaTempLCD+0x34>
	else SacaTextoLcd((uint8_t*)"Temperature:");
 8000d5e:	4832      	ldr	r0, [pc, #200]	; (8000e28 <PresentaTempLCD+0xf8>)
 8000d60:	f7ff ff7e 	bl	8000c60 <SacaTextoLcd>
	PosCaracLLcd(POSTEMP);
 8000d64:	2005      	movs	r0, #5
 8000d66:	f7ff ffaa 	bl	8000cbe <PosCaracLLcd>
	DatoAsciiLcd(temp.temp_ent/10);				//me quedo con las decenas y presento
 8000d6a:	7b3b      	ldrb	r3, [r7, #12]
 8000d6c:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <PresentaTempLCD+0xfc>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff0b 	bl	8000b92 <DatoAsciiLcd>
	DatoAsciiLcd(temp.temp_ent%10);				//me quedo con las unidades  y presento
 8000d7c:	7b3a      	ldrb	r2, [r7, #12]
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <PresentaTempLCD+0xfc>)
 8000d80:	fba3 1302 	umull	r1, r3, r3, r2
 8000d84:	08d9      	lsrs	r1, r3, #3
 8000d86:	460b      	mov	r3, r1
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fefd 	bl	8000b92 <DatoAsciiLcd>
	DatoLcd('.');
 8000d98:	202e      	movs	r0, #46	; 0x2e
 8000d9a:	f7ff feec 	bl	8000b76 <DatoLcd>
	temp.temp_dec=((temp.temp_dec&bit7)>>7)*50+((temp.temp_dec&bit6)>>6)*25;  //como los bits mas significativos de esta posicion
 8000d9e:	7b7b      	ldrb	r3, [r7, #13]
 8000da0:	09db      	lsrs	r3, r3, #7
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	461a      	mov	r2, r3
 8000dac:	0091      	lsls	r1, r2, #2
 8000dae:	461a      	mov	r2, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	119b      	asrs	r3, r3, #6
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	0089      	lsls	r1, r1, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	0088      	lsls	r0, r1, #2
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	440b      	add	r3, r1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	737b      	strb	r3, [r7, #13]
																	//representan los bits luego de la coma de acuerdo
																	//a si están en 1 o 0resicion de .25ºC)
																	//me quedo con  es el peso que representan en el formato de
																	//coma fija .50 o .25 (pcada bit y lo llevo al peso que corresponde
	DatoAsciiLcd(temp.temp_dec/10);				//me quedo con las decenas  y presento
 8000ddc:	7b7b      	ldrb	r3, [r7, #13]
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <PresentaTempLCD+0xfc>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fed2 	bl	8000b92 <DatoAsciiLcd>
	DatoAsciiLcd(temp.temp_dec%10);				//me quedo con las unidades  y presento
 8000dee:	7b7a      	ldrb	r2, [r7, #13]
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <PresentaTempLCD+0xfc>)
 8000df2:	fba3 1302 	umull	r1, r3, r3, r2
 8000df6:	08d9      	lsrs	r1, r3, #3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fec4 	bl	8000b92 <DatoAsciiLcd>
	DatoLcd(GRADOS);
 8000e0a:	20df      	movs	r0, #223	; 0xdf
 8000e0c:	f7ff feb3 	bl	8000b76 <DatoLcd>
	DatoLcd('C');
 8000e10:	2043      	movs	r0, #67	; 0x43
 8000e12:	f7ff feb0 	bl	8000b76 <DatoLcd>

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000b4 	.word	0x200000b4
 8000e24:	080041b8 	.word	0x080041b8
 8000e28:	080041c8 	.word	0x080041c8
 8000e2c:	cccccccd 	.word	0xcccccccd

08000e30 <PresentaFechaLCD>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void PresentaFechaLCD(reloj* reloj1,uint8_t pos,uint8_t linea){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	70bb      	strb	r3, [r7, #2]

	  if(linea==1)PosCaracHLcd(pos);
 8000e40:	78bb      	ldrb	r3, [r7, #2]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d104      	bne.n	8000e50 <PresentaFechaLCD+0x20>
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff28 	bl	8000c9e <PosCaracHLcd>
 8000e4e:	e003      	b.n	8000e58 <PresentaFechaLCD+0x28>
	  else PosCaracLLcd(pos);
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff33 	bl	8000cbe <PosCaracLLcd>
	  calcula_dia_semana(reloj1);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 fdff 	bl	8001a5c <calcula_dia_semana>
	  SacaTextoLcd((uint8_t *)dia[idioma][(reloj1->diasem)-1]);
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <PresentaFechaLCD+0xac>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	1a5b      	subs	r3, r3, r1
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <PresentaFechaLCD+0xb0>)
 8000e76:	4413      	add	r3, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fef1 	bl	8000c60 <SacaTextoLcd>
	  DatoLcd(' ');
 8000e7e:	2020      	movs	r0, #32
 8000e80:	f7ff fe79 	bl	8000b76 <DatoLcd>
	  if(idioma==ENG){
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <PresentaFechaLCD+0xac>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00d      	beq.n	8000ea8 <PresentaFechaLCD+0x78>
		  DatoBCD (reloj1->mes);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe8e 	bl	8000bb2 <DatoBCD>
		  DatoLcd('/');
 8000e96:	202f      	movs	r0, #47	; 0x2f
 8000e98:	f7ff fe6d 	bl	8000b76 <DatoLcd>
		  DatoBCD (reloj1->dia);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe86 	bl	8000bb2 <DatoBCD>
 8000ea6:	e00c      	b.n	8000ec2 <PresentaFechaLCD+0x92>

	  }else{
		  DatoBCD (reloj1->dia);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe80 	bl	8000bb2 <DatoBCD>
		  DatoLcd('/');
 8000eb2:	202f      	movs	r0, #47	; 0x2f
 8000eb4:	f7ff fe5f 	bl	8000b76 <DatoLcd>
		  DatoBCD (reloj1->mes);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	795b      	ldrb	r3, [r3, #5]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe78 	bl	8000bb2 <DatoBCD>
	  }
	  DatoLcd('/');
 8000ec2:	202f      	movs	r0, #47	; 0x2f
 8000ec4:	f7ff fe57 	bl	8000b76 <DatoLcd>
	  DatoBCD (reloj1->anio);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe70 	bl	8000bb2 <DatoBCD>

}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000b4 	.word	0x200000b4
 8000ee0:	08004200 	.word	0x08004200

08000ee4 <PresentaHoraLCD>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void PresentaHoraLCD(reloj* reloj1,uint8_t pos,uint8_t linea){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	70bb      	strb	r3, [r7, #2]

	  if(linea==1)PosCaracHLcd(pos);
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d104      	bne.n	8000f04 <PresentaHoraLCD+0x20>
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fece 	bl	8000c9e <PosCaracHLcd>
 8000f02:	e003      	b.n	8000f0c <PresentaHoraLCD+0x28>
	  else PosCaracLLcd(pos);
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fed9 	bl	8000cbe <PosCaracLLcd>
	  DatoBCD (reloj1->hora);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe4e 	bl	8000bb2 <DatoBCD>
	  DatoLcd(':');
 8000f16:	203a      	movs	r0, #58	; 0x3a
 8000f18:	f7ff fe2d 	bl	8000b76 <DatoLcd>
	  DatoBCD (reloj1->min);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fe46 	bl	8000bb2 <DatoBCD>
	  DatoLcd(':');
 8000f26:	203a      	movs	r0, #58	; 0x3a
 8000f28:	f7ff fe25 	bl	8000b76 <DatoLcd>
	  DatoBCD (reloj1->seg);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe3e 	bl	8000bb2 <DatoBCD>

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <RelojInit>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
void RelojInit(reloj* reloj1){
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	estado_reloj=PRESENTARHORA;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <RelojInit+0x1c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	reloj1->diasem=0;
	reloj1->dia=1;
	reloj1->mes=1;
	reloj1->anio=0;*/

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200000b5 	.word	0x200000b5

08000f60 <Reloj_Read>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void Reloj_Read(reloj* reloj1){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	RTC_Read_Cal(reloj1);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fe21 	bl	8001bb0 <RTC_Read_Cal>

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <Reloj_Write>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void Reloj_Write(reloj reloj1){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	e883 0003 	stmia.w	r3, {r0, r1}
	RTC_Write_Cal(reloj1);
 8000f82:	463b      	mov	r3, r7
 8000f84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f88:	f000 fdf4 	bl	8001b74 <RTC_Write_Cal>

}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <RelojFSM_Update>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void RelojFSM_Update(reloj* reloj1){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	switch(estado_reloj){
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <RelojFSM_Update+0xac>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b0b      	cmp	r3, #11
 8000fa2:	d849      	bhi.n	8001038 <RelojFSM_Update+0xa4>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <RelojFSM_Update+0x18>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fe5 	.word	0x08000fe5
 8000fb0:	08000fdd 	.word	0x08000fdd
 8000fb4:	08000fed 	.word	0x08000fed
 8000fb8:	08000ff5 	.word	0x08000ff5
 8000fbc:	08000ffd 	.word	0x08000ffd
 8000fc0:	08001005 	.word	0x08001005
 8000fc4:	0800100d 	.word	0x0800100d
 8000fc8:	08001015 	.word	0x08001015
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	08001025 	.word	0x08001025
 8000fd4:	0800102d 	.word	0x0800102d
 8000fd8:	08001033 	.word	0x08001033
		case PRESENTARHORA:
						PresentarHoraYFecha(reloj1);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f877 	bl	80010d0 <PresentarHoraYFecha>
						break;
 8000fe2:	e029      	b.n	8001038 <RelojFSM_Update+0xa4>
		case PRESENTARTEMP:
						PresentarTempe(reloj1);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f82d 	bl	8001044 <PresentarTempe>
						break;
 8000fea:	e025      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_DIA_ESP:
						ConfiguraDiaEsp(reloj1);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f8bb 	bl	8001168 <ConfiguraDiaEsp>
						break;
 8000ff2:	e021      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_DIA_ENG:
						ConfiguraDiaEng(reloj1);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f989 	bl	800130c <ConfiguraDiaEng>
						break;
 8000ffa:	e01d      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_MES_ESP:
						ConfiguraMesEsp(reloj1);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fa23 	bl	8001448 <ConfiguraMesEsp>
						break;
 8001002:	e019      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_MES_ENG:
						ConfiguraMesEng(reloj1);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f917 	bl	8001238 <ConfiguraMesEng>
						break;
 800100a:	e015      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_ANIO:
						ConfiguraAnio(reloj1);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fac3 	bl	8001598 <ConfiguraAnio>
						break;
 8001012:	e011      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_HORA:
						ConfiguraHora(reloj1);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 fb27 	bl	8001668 <ConfiguraHora>
						break;
 800101a:	e00d      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_MIN:
						ConfiguraMin(reloj1);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fb5d 	bl	80016dc <ConfiguraMin>
						break;
 8001022:	e009      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_SEG:
						ConfiguraSeg(reloj1);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fb93 	bl	8001750 <ConfiguraSeg>
						break;
 800102a:	e005      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_IDIOMA_INI:
						Configuro_idioma_ini();
 800102c:	f000 fbda 	bl	80017e4 <Configuro_idioma_ini>
						break;
 8001030:	e002      	b.n	8001038 <RelojFSM_Update+0xa4>
		case CONFIGURAR_IDIOMA:
						Configuro_idioma();
 8001032:	f000 fc01 	bl	8001838 <Configuro_idioma>
						break;
 8001036:	bf00      	nop

	}


}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000b5 	.word	0x200000b5

08001044 <PresentarTempe>:

static void PresentarTempe(reloj* reloj1){
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	uint8_t SW;
	Reloj_Read(reloj1);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff87 	bl	8000f60 <Reloj_Read>
	PresentaTempLCD(POSTEMP);
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff fe6c 	bl	8000d30 <PresentaTempLCD>
	SW=LeerSW();
 8001058:	f7ff fbb2 	bl	80007c0 <LeerSW>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
	if(SW==PRESIONADO){
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d11a      	bne.n	800109c <PresentarTempe+0x58>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001066:	2201      	movs	r2, #1
 8001068:	2102      	movs	r1, #2
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fee0 	bl	8000e30 <PresentaFechaLCD>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001070:	2202      	movs	r2, #2
 8001072:	2104      	movs	r1, #4
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff35 	bl	8000ee4 <PresentaHoraLCD>
		CursorOnLcd();
 800107a:	f7ff fe37 	bl	8000cec <CursorOnLcd>
		if(idioma==ESP)estado_reloj=CONFIGURAR_DIA_ESP;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <PresentarTempe+0x84>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <PresentarTempe+0x50>
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <PresentarTempe+0x88>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e009      	b.n	80010a8 <PresentarTempe+0x64>
		else estado_reloj=CONFIGURAR_MES_ENG;
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <PresentarTempe+0x88>)
 8001096:	2205      	movs	r2, #5
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e005      	b.n	80010a8 <PresentarTempe+0x64>
	}else if(SW==PRES_LARGO_TIEMPO){
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d102      	bne.n	80010a8 <PresentarTempe+0x64>

		estado_reloj=CONFIGURAR_IDIOMA_INI;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <PresentarTempe+0x88>)
 80010a4:	220a      	movs	r2, #10
 80010a6:	701a      	strb	r2, [r3, #0]
	}
	if(((reloj1->seg)&0x0f)==9){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	d104      	bne.n	80010be <PresentarTempe+0x7a>
		ClrLcd();
 80010b4:	f7ff fde9 	bl	8000c8a <ClrLcd>
		estado_reloj=PRESENTARHORA;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <PresentarTempe+0x88>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
	}


}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000b4 	.word	0x200000b4
 80010cc:	200000b5 	.word	0x200000b5

080010d0 <PresentarHoraYFecha>:
 * Version: 1.0
 * Fecha 16/4/23
  *
 **********************************************************************************/

static void PresentarHoraYFecha(reloj* reloj1){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t SW;
	Reloj_Read(reloj1);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff41 	bl	8000f60 <Reloj_Read>
	PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80010de:	2201      	movs	r2, #1
 80010e0:	2102      	movs	r1, #2
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fea4 	bl	8000e30 <PresentaFechaLCD>
	PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 80010e8:	2202      	movs	r2, #2
 80010ea:	2104      	movs	r1, #4
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fef9 	bl	8000ee4 <PresentaHoraLCD>
	SW=LeerSW();
 80010f2:	f7ff fb65 	bl	80007c0 <LeerSW>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
	if(SW==PRESIONADO){
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d11a      	bne.n	8001136 <PresentarHoraYFecha+0x66>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001100:	2201      	movs	r2, #1
 8001102:	2102      	movs	r1, #2
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff fe93 	bl	8000e30 <PresentaFechaLCD>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 800110a:	2202      	movs	r2, #2
 800110c:	2104      	movs	r1, #4
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fee8 	bl	8000ee4 <PresentaHoraLCD>
		CursorOnLcd();
 8001114:	f7ff fdea 	bl	8000cec <CursorOnLcd>
		if(idioma==ESP)estado_reloj=CONFIGURAR_DIA_ESP;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <PresentarHoraYFecha+0x90>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f083 0301 	eor.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <PresentarHoraYFecha+0x5e>
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <PresentarHoraYFecha+0x94>)
 8001128:	2202      	movs	r2, #2
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e009      	b.n	8001142 <PresentarHoraYFecha+0x72>
		else estado_reloj=CONFIGURAR_MES_ENG;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <PresentarHoraYFecha+0x94>)
 8001130:	2205      	movs	r2, #5
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <PresentarHoraYFecha+0x72>
	}else if(SW==PRES_LARGO_TIEMPO){
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d102      	bne.n	8001142 <PresentarHoraYFecha+0x72>

		estado_reloj=CONFIGURAR_IDIOMA_INI;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <PresentarHoraYFecha+0x94>)
 800113e:	220a      	movs	r2, #10
 8001140:	701a      	strb	r2, [r3, #0]
	}
	if(((reloj1->seg)&0x0f)==4){
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	2b04      	cmp	r3, #4
 800114c:	d104      	bne.n	8001158 <PresentarHoraYFecha+0x88>
		ClrLcd();
 800114e:	f7ff fd9c 	bl	8000c8a <ClrLcd>
		estado_reloj=PRESENTARTEMP;
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <PresentarHoraYFecha+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	}
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000b4 	.word	0x200000b4
 8001164:	200000b5 	.word	0x200000b5

08001168 <ConfiguraDiaEsp>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void ConfiguraDiaEsp(reloj* reloj1){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSFECHA);
 8001174:	2007      	movs	r0, #7
 8001176:	f7ff fd92 	bl	8000c9e <PosCaracHLcd>
	if(LeerSW()==PRESIONADO){
 800117a:	f7ff fb21 	bl	80007c0 <LeerSW>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d130      	bne.n	80011e6 <ConfiguraDiaEsp+0x7e>
		if(reloj1->dia==0x30 && reloj1->mes==FEBRERO)reloj1->mes=MARZO;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	2b30      	cmp	r3, #48	; 0x30
 800118a:	d106      	bne.n	800119a <ConfiguraDiaEsp+0x32>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	795b      	ldrb	r3, [r3, #5]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d102      	bne.n	800119a <ConfiguraDiaEsp+0x32>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	715a      	strb	r2, [r3, #5]
		if(reloj1->dia==0x31 && (reloj1->mes==FEBRERO || reloj1->mes==ABRIL || reloj1->mes==JUNIO || reloj1->mes==SEPTIEMBRE || reloj1->mes==NOVIEMBRE))(reloj1->mes)++;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	2b31      	cmp	r3, #49	; 0x31
 80011a0:	d119      	bne.n	80011d6 <ConfiguraDiaEsp+0x6e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d00f      	beq.n	80011ca <ConfiguraDiaEsp+0x62>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	795b      	ldrb	r3, [r3, #5]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d00b      	beq.n	80011ca <ConfiguraDiaEsp+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	795b      	ldrb	r3, [r3, #5]
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d007      	beq.n	80011ca <ConfiguraDiaEsp+0x62>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	795b      	ldrb	r3, [r3, #5]
 80011be:	2b09      	cmp	r3, #9
 80011c0:	d003      	beq.n	80011ca <ConfiguraDiaEsp+0x62>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	795b      	ldrb	r3, [r3, #5]
 80011c6:	2b11      	cmp	r3, #17
 80011c8:	d105      	bne.n	80011d6 <ConfiguraDiaEsp+0x6e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	795b      	ldrb	r3, [r3, #5]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	715a      	strb	r2, [r3, #5]
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2102      	movs	r1, #2
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fe28 	bl	8000e30 <PresentaFechaLCD>
		estado_reloj=CONFIGURAR_MES_ESP;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <ConfiguraDiaEsp+0xcc>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	701a      	strb	r2, [r3, #0]
	}
	encoder=LeerEncoder();
 80011e6:	f7ff fc5d 	bl	8000aa4 <LeerEncoder>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10b      	bne.n	800120c <ConfiguraDiaEsp+0xa4>
		Decrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3304      	adds	r3, #4
 80011f8:	221f      	movs	r2, #31
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fb83 	bl	8001908 <Decrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe12 	bl	8000e30 <PresentaFechaLCD>
	}
	if(encoder==DER){
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d10b      	bne.n	800122a <ConfiguraDiaEsp+0xc2>
		Incrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	221f      	movs	r2, #31
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fbb8 	bl	8001990 <Incrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001220:	2201      	movs	r2, #1
 8001222:	2102      	movs	r1, #2
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fe03 	bl	8000e30 <PresentaFechaLCD>
	}

}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000b5 	.word	0x200000b5

08001238 <ConfiguraMesEng>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
static void ConfiguraMesEng(reloj* reloj1){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSMESENG);
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fd2a 	bl	8000c9e <PosCaracHLcd>
	if(LeerSW()==PRESIONADO){
 800124a:	f7ff fab9 	bl	80007c0 <LeerSW>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d133      	bne.n	80012bc <ConfiguraMesEng+0x84>
		if((reloj1->mes==FEBRERO || reloj1->mes==ABRIL || reloj1->mes==JUNIO || reloj1->mes==SEPTIEMBRE || reloj1->mes==NOVIEMBRE) && reloj1->dia==0x31)(reloj1->dia)--;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	795b      	ldrb	r3, [r3, #5]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d00f      	beq.n	800127c <ConfiguraMesEng+0x44>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	795b      	ldrb	r3, [r3, #5]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d00b      	beq.n	800127c <ConfiguraMesEng+0x44>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	795b      	ldrb	r3, [r3, #5]
 8001268:	2b06      	cmp	r3, #6
 800126a:	d007      	beq.n	800127c <ConfiguraMesEng+0x44>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	795b      	ldrb	r3, [r3, #5]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d003      	beq.n	800127c <ConfiguraMesEng+0x44>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	795b      	ldrb	r3, [r3, #5]
 8001278:	2b11      	cmp	r3, #17
 800127a:	d109      	bne.n	8001290 <ConfiguraMesEng+0x58>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	791b      	ldrb	r3, [r3, #4]
 8001280:	2b31      	cmp	r3, #49	; 0x31
 8001282:	d105      	bne.n	8001290 <ConfiguraMesEng+0x58>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	791b      	ldrb	r3, [r3, #4]
 8001288:	3b01      	subs	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	711a      	strb	r2, [r3, #4]
		if(reloj1->mes==FEBRERO && reloj1->dia==0x30)(reloj1->dia)--;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	795b      	ldrb	r3, [r3, #5]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d109      	bne.n	80012ac <ConfiguraMesEng+0x74>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	2b30      	cmp	r3, #48	; 0x30
 800129e:	d105      	bne.n	80012ac <ConfiguraMesEng+0x74>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	711a      	strb	r2, [r3, #4]
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2102      	movs	r1, #2
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fdbd 	bl	8000e30 <PresentaFechaLCD>
		estado_reloj=CONFIGURAR_DIA_ENG;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <ConfiguraMesEng+0xd0>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	701a      	strb	r2, [r3, #0]
	}
	encoder=LeerEncoder();
 80012bc:	f7ff fbf2 	bl	8000aa4 <LeerEncoder>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10b      	bne.n	80012e2 <ConfiguraMesEng+0xaa>
		Decrementa(&(reloj1->mes),MESMIN,MESMAX);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3305      	adds	r3, #5
 80012ce:	220c      	movs	r2, #12
 80012d0:	2101      	movs	r1, #1
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fb18 	bl	8001908 <Decrementa>

		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80012d8:	2201      	movs	r2, #1
 80012da:	2102      	movs	r1, #2
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fda7 	bl	8000e30 <PresentaFechaLCD>
	}
	if(encoder==DER){
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d10b      	bne.n	8001300 <ConfiguraMesEng+0xc8>
		Incrementa(&(reloj1->mes),MESMIN,MESMAX);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3305      	adds	r3, #5
 80012ec:	220c      	movs	r2, #12
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb4d 	bl	8001990 <Incrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2102      	movs	r1, #2
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fd98 	bl	8000e30 <PresentaFechaLCD>
	}

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200000b5 	.word	0x200000b5

0800130c <ConfiguraDiaEng>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
static void ConfiguraDiaEng(reloj* reloj1){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSFECHAENG);
 8001318:	200a      	movs	r0, #10
 800131a:	f7ff fcc0 	bl	8000c9e <PosCaracHLcd>
	if(LeerSW()==PRESIONADO){
 800131e:	f7ff fa4f 	bl	80007c0 <LeerSW>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d107      	bne.n	8001338 <ConfiguraDiaEng+0x2c>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001328:	2201      	movs	r2, #1
 800132a:	2102      	movs	r1, #2
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fd7f 	bl	8000e30 <PresentaFechaLCD>
		estado_reloj=CONFIGURAR_ANIO;
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <ConfiguraDiaEng+0x138>)
 8001334:	2206      	movs	r2, #6
 8001336:	701a      	strb	r2, [r3, #0]
	}
	encoder=LeerEncoder();
 8001338:	f7ff fbb4 	bl	8000aa4 <LeerEncoder>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d13b      	bne.n	80013be <ConfiguraDiaEng+0xb2>

		if(reloj1->mes==ENERO || reloj1->mes==MARZO || reloj1->mes==MAYO || reloj1->mes==JULIO || reloj1->mes==AGOSTO || reloj1->mes==OCTUBRE || reloj1->mes==DICIEMBRE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	795b      	ldrb	r3, [r3, #5]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d017      	beq.n	800137e <ConfiguraDiaEng+0x72>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	795b      	ldrb	r3, [r3, #5]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d013      	beq.n	800137e <ConfiguraDiaEng+0x72>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	795b      	ldrb	r3, [r3, #5]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d00f      	beq.n	800137e <ConfiguraDiaEng+0x72>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d00b      	beq.n	800137e <ConfiguraDiaEng+0x72>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	795b      	ldrb	r3, [r3, #5]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d007      	beq.n	800137e <ConfiguraDiaEng+0x72>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	795b      	ldrb	r3, [r3, #5]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d003      	beq.n	800137e <ConfiguraDiaEng+0x72>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	795b      	ldrb	r3, [r3, #5]
 800137a:	2b12      	cmp	r3, #18
 800137c:	d107      	bne.n	800138e <ConfiguraDiaEng+0x82>
			Decrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	221f      	movs	r2, #31
 8001384:	2101      	movs	r1, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fabe 	bl	8001908 <Decrementa>
 800138c:	e012      	b.n	80013b4 <ConfiguraDiaEng+0xa8>
		else if(reloj1->mes==FEBRERO)Decrementa(&(reloj1->dia),DIAMIN,DIAMAX-2);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	795b      	ldrb	r3, [r3, #5]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d107      	bne.n	80013a6 <ConfiguraDiaEng+0x9a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	221d      	movs	r2, #29
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fab2 	bl	8001908 <Decrementa>
 80013a4:	e006      	b.n	80013b4 <ConfiguraDiaEng+0xa8>
		else Decrementa(&(reloj1->dia),DIAMIN,DIAMAX-1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3304      	adds	r3, #4
 80013aa:	221e      	movs	r2, #30
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 faaa 	bl	8001908 <Decrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2102      	movs	r1, #2
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fd39 	bl	8000e30 <PresentaFechaLCD>
	}
	if(encoder==DER){
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d13b      	bne.n	800143c <ConfiguraDiaEng+0x130>

		if(reloj1->mes==ENERO || reloj1->mes==MARZO || reloj1->mes==MAYO || reloj1->mes==JULIO || reloj1->mes==AGOSTO || reloj1->mes==OCTUBRE || reloj1->mes==DICIEMBRE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	795b      	ldrb	r3, [r3, #5]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d017      	beq.n	80013fc <ConfiguraDiaEng+0xf0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	795b      	ldrb	r3, [r3, #5]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d013      	beq.n	80013fc <ConfiguraDiaEng+0xf0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d00f      	beq.n	80013fc <ConfiguraDiaEng+0xf0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	795b      	ldrb	r3, [r3, #5]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d00b      	beq.n	80013fc <ConfiguraDiaEng+0xf0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	795b      	ldrb	r3, [r3, #5]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d007      	beq.n	80013fc <ConfiguraDiaEng+0xf0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	795b      	ldrb	r3, [r3, #5]
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d003      	beq.n	80013fc <ConfiguraDiaEng+0xf0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	795b      	ldrb	r3, [r3, #5]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d107      	bne.n	800140c <ConfiguraDiaEng+0x100>
			Incrementa(&(reloj1->dia),DIAMIN,DIAMAX);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3304      	adds	r3, #4
 8001400:	221f      	movs	r2, #31
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fac3 	bl	8001990 <Incrementa>
 800140a:	e012      	b.n	8001432 <ConfiguraDiaEng+0x126>
		else if(reloj1->mes==FEBRERO)Incrementa(&(reloj1->dia),DIAMIN,DIAMAX-2);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	795b      	ldrb	r3, [r3, #5]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d107      	bne.n	8001424 <ConfiguraDiaEng+0x118>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	221d      	movs	r2, #29
 800141a:	2101      	movs	r1, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fab7 	bl	8001990 <Incrementa>
 8001422:	e006      	b.n	8001432 <ConfiguraDiaEng+0x126>
		else Incrementa(&(reloj1->dia),DIAMIN,DIAMAX-1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	221e      	movs	r2, #30
 800142a:	2101      	movs	r1, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f000 faaf 	bl	8001990 <Incrementa>

		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001432:	2201      	movs	r2, #1
 8001434:	2102      	movs	r1, #2
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fcfa 	bl	8000e30 <PresentaFechaLCD>
	}
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000b5 	.word	0x200000b5

08001448 <ConfiguraMesEsp>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void ConfiguraMesEsp(reloj* reloj1){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSMES);
 8001454:	200a      	movs	r0, #10
 8001456:	f7ff fc22 	bl	8000c9e <PosCaracHLcd>
	if(LeerSW()==PRESIONADO){
 800145a:	f7ff f9b1 	bl	80007c0 <LeerSW>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d11d      	bne.n	80014a0 <ConfiguraMesEsp+0x58>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	795b      	ldrb	r3, [r3, #5]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d111      	bne.n	8001490 <ConfiguraMesEsp+0x48>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	2b29      	cmp	r3, #41	; 0x29
 8001472:	d10d      	bne.n	8001490 <ConfiguraMesEsp+0x48>
			do Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3306      	adds	r3, #6
 8001478:	2263      	movs	r2, #99	; 0x63
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fa87 	bl	8001990 <Incrementa>
			while((reloj1->anio)%4);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	799b      	ldrb	r3, [r3, #6]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f1      	bne.n	8001474 <ConfiguraMesEsp+0x2c>
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001490:	2201      	movs	r2, #1
 8001492:	2102      	movs	r1, #2
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fccb 	bl	8000e30 <PresentaFechaLCD>

		estado_reloj=CONFIGURAR_ANIO;
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <ConfiguraMesEsp+0x148>)
 800149c:	2206      	movs	r2, #6
 800149e:	701a      	strb	r2, [r3, #0]

	}
	encoder=LeerEncoder();
 80014a0:	f7ff fb00 	bl	8000aa4 <LeerEncoder>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
	 * o incrementar tengo que tener en cuenta lo ingresado en el dia.
	 * Si el dia fue 31 solo tengo unos meses
	 * si el dia tenia 30 solo queda exceptuado febrero
	 * en cualquier otro caso puedo ingresar cualquier mes
	 * */
	if(encoder==IZQ){
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d134      	bne.n	8001518 <ConfiguraMesEsp+0xd0>
		if((reloj1->dia)<0x31){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	791b      	ldrb	r3, [r3, #4]
 80014b2:	2b30      	cmp	r3, #48	; 0x30
 80014b4:	d815      	bhi.n	80014e2 <ConfiguraMesEsp+0x9a>
		    Decrementa(&(reloj1->mes),MESMIN,MESMAX);	//si el mes no tiene 31, lo dejo decrementar libremente
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3305      	adds	r3, #5
 80014ba:	220c      	movs	r2, #12
 80014bc:	2101      	movs	r1, #1
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fa22 	bl	8001908 <Decrementa>
			if((reloj1->dia)==0x30)if(reloj1->mes==0x02)reloj1->mes--;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	2b30      	cmp	r3, #48	; 0x30
 80014ca:	d120      	bne.n	800150e <ConfiguraMesEsp+0xc6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d11c      	bne.n	800150e <ConfiguraMesEsp+0xc6>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	795b      	ldrb	r3, [r3, #5]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	715a      	strb	r2, [r3, #5]
 80014e0:	e015      	b.n	800150e <ConfiguraMesEsp+0xc6>
		}
		else{
			uint8_t indice=buscar_indice((uint8_t *)mes31,reloj1->mes,sizeof(mes31));  //busco el limite
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	2207      	movs	r2, #7
 80014e8:	4619      	mov	r1, r3
 80014ea:	482a      	ldr	r0, [pc, #168]	; (8001594 <ConfiguraMesEsp+0x14c>)
 80014ec:	f000 fa92 	bl	8001a14 <buscar_indice>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73bb      	strb	r3, [r7, #14]
			if(indice==0)reloj1->mes=mes31[sizeof(mes31)-1];
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <ConfiguraMesEsp+0xba>
 80014fa:	2212      	movs	r2, #18
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	715a      	strb	r2, [r3, #5]
 8001500:	e005      	b.n	800150e <ConfiguraMesEsp+0xc6>
			else reloj1->mes=mes31[indice-1];
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	3b01      	subs	r3, #1
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <ConfiguraMesEsp+0x14c>)
 8001508:	5cd2      	ldrb	r2, [r2, r3]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	715a      	strb	r2, [r3, #5]
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 800150e:	2201      	movs	r2, #1
 8001510:	2102      	movs	r1, #2
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fc8c 	bl	8000e30 <PresentaFechaLCD>
	}
	if(encoder==DER){
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d134      	bne.n	8001588 <ConfiguraMesEsp+0x140>
		if((reloj1->dia)<0x31){
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	2b30      	cmp	r3, #48	; 0x30
 8001524:	d815      	bhi.n	8001552 <ConfiguraMesEsp+0x10a>
			Incrementa(&(reloj1->mes),MESMIN,MESMAX); //si el mes no tiene 31, lo dejo incrementar  libremente
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3305      	adds	r3, #5
 800152a:	220c      	movs	r2, #12
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fa2e 	bl	8001990 <Incrementa>
			if((reloj1->dia)==0x30)if(reloj1->mes==0x02)reloj1->mes++;;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	2b30      	cmp	r3, #48	; 0x30
 800153a:	d120      	bne.n	800157e <ConfiguraMesEsp+0x136>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d11c      	bne.n	800157e <ConfiguraMesEsp+0x136>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	795b      	ldrb	r3, [r3, #5]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	715a      	strb	r2, [r3, #5]
 8001550:	e015      	b.n	800157e <ConfiguraMesEsp+0x136>
		}
		else{
			uint8_t indice=buscar_indice((uint8_t *)mes31,reloj1->mes,sizeof(mes31)); //busco el limite
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	795b      	ldrb	r3, [r3, #5]
 8001556:	2207      	movs	r2, #7
 8001558:	4619      	mov	r1, r3
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <ConfiguraMesEsp+0x14c>)
 800155c:	f000 fa5a 	bl	8001a14 <buscar_indice>
 8001560:	4603      	mov	r3, r0
 8001562:	737b      	strb	r3, [r7, #13]
			if(indice==sizeof(mes31)-1)reloj1->mes=mes31[0];
 8001564:	7b7b      	ldrb	r3, [r7, #13]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d103      	bne.n	8001572 <ConfiguraMesEsp+0x12a>
 800156a:	2201      	movs	r2, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	715a      	strb	r2, [r3, #5]
 8001570:	e005      	b.n	800157e <ConfiguraMesEsp+0x136>
			else reloj1->mes=mes31[indice+1];
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	3301      	adds	r3, #1
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <ConfiguraMesEsp+0x14c>)
 8001578:	5cd2      	ldrb	r2, [r2, r3]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	715a      	strb	r2, [r3, #5]
		}
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 800157e:	2201      	movs	r2, #1
 8001580:	2102      	movs	r1, #2
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fc54 	bl	8000e30 <PresentaFechaLCD>
	}
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000b5 	.word	0x200000b5
 8001594:	08004238 	.word	0x08004238

08001598 <ConfiguraAnio>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void ConfiguraAnio(reloj* reloj1){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]

	PosCaracHLcd(POSANIO);
 80015a4:	200d      	movs	r0, #13
 80015a6:	f7ff fb7a 	bl	8000c9e <PosCaracHLcd>
	if(LeerSW()==PRESIONADO)estado_reloj=CONFIGURAR_HORA;
 80015aa:	f7ff f909 	bl	80007c0 <LeerSW>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <ConfiguraAnio+0x22>
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <ConfiguraAnio+0xcc>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	701a      	strb	r2, [r3, #0]
	encoder=LeerEncoder();
 80015ba:	f7ff fa73 	bl	8000aa4 <LeerEncoder>
 80015be:	4603      	mov	r3, r0
 80015c0:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d122      	bne.n	800160e <ConfiguraAnio+0x76>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	795b      	ldrb	r3, [r3, #5]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d112      	bne.n	80015f6 <ConfiguraAnio+0x5e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	791b      	ldrb	r3, [r3, #4]
 80015d4:	2b29      	cmp	r3, #41	; 0x29
 80015d6:	d10e      	bne.n	80015f6 <ConfiguraAnio+0x5e>
			do{
				Decrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3306      	adds	r3, #6
 80015dc:	2263      	movs	r2, #99	; 0x63
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f991 	bl	8001908 <Decrementa>
			}while((reloj1->anio)%4);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	799b      	ldrb	r3, [r3, #6]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f1      	bne.n	80015d8 <ConfiguraAnio+0x40>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 80015f4:	e006      	b.n	8001604 <ConfiguraAnio+0x6c>
		}
		else Decrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3306      	adds	r3, #6
 80015fa:	2263      	movs	r2, #99	; 0x63
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f982 	bl	8001908 <Decrementa>

		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001604:	2201      	movs	r2, #1
 8001606:	2102      	movs	r1, #2
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fc11 	bl	8000e30 <PresentaFechaLCD>
	}
	if(encoder==DER){
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d122      	bne.n	800165a <ConfiguraAnio+0xc2>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	795b      	ldrb	r3, [r3, #5]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d112      	bne.n	8001642 <ConfiguraAnio+0xaa>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b29      	cmp	r3, #41	; 0x29
 8001622:	d10e      	bne.n	8001642 <ConfiguraAnio+0xaa>
			do{
				Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3306      	adds	r3, #6
 8001628:	2263      	movs	r2, #99	; 0x63
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f9af 	bl	8001990 <Incrementa>
			}while((reloj1->anio)%4);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	799b      	ldrb	r3, [r3, #6]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f1      	bne.n	8001624 <ConfiguraAnio+0x8c>
		if(reloj1->mes==FEBRERO && reloj1->dia==0x29){
 8001640:	e006      	b.n	8001650 <ConfiguraAnio+0xb8>
		}
		else Incrementa(&(reloj1->anio),ANIOMIN,ANIOMAX);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3306      	adds	r3, #6
 8001646:	2263      	movs	r2, #99	; 0x63
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f9a0 	bl	8001990 <Incrementa>
		PresentaFechaLCD(reloj1,POSCOMIENZAFECHA,LINEA_1);
 8001650:	2201      	movs	r2, #1
 8001652:	2102      	movs	r1, #2
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fbeb 	bl	8000e30 <PresentaFechaLCD>
	}
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000b5 	.word	0x200000b5

08001668 <ConfiguraHora>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void ConfiguraHora(reloj* reloj1){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSHORA);
 8001674:	2005      	movs	r0, #5
 8001676:	f7ff fb22 	bl	8000cbe <PosCaracLLcd>
	if(LeerSW()==PRESIONADO)estado_reloj=CONFIGURAR_MIN;
 800167a:	f7ff f8a1 	bl	80007c0 <LeerSW>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d102      	bne.n	800168a <ConfiguraHora+0x22>
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <ConfiguraHora+0x70>)
 8001686:	2208      	movs	r2, #8
 8001688:	701a      	strb	r2, [r3, #0]
	encoder=LeerEncoder();
 800168a:	f7ff fa0b 	bl	8000aa4 <LeerEncoder>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10b      	bne.n	80016b0 <ConfiguraHora+0x48>
		Decrementa(&(reloj1->hora),HORAMIN,HORAMAX);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3302      	adds	r3, #2
 800169c:	2217      	movs	r2, #23
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f931 	bl	8001908 <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 80016a6:	2202      	movs	r2, #2
 80016a8:	2104      	movs	r1, #4
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fc1a 	bl	8000ee4 <PresentaHoraLCD>
	}
	if(encoder==DER){
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d10b      	bne.n	80016ce <ConfiguraHora+0x66>
		Incrementa(&(reloj1->hora),HORAMIN,HORAMAX);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3302      	adds	r3, #2
 80016ba:	2217      	movs	r2, #23
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f966 	bl	8001990 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 80016c4:	2202      	movs	r2, #2
 80016c6:	2104      	movs	r1, #4
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fc0b 	bl	8000ee4 <PresentaHoraLCD>
	}
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000b5 	.word	0x200000b5

080016dc <ConfiguraMin>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static void ConfiguraMin(reloj* reloj1){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSMIN);
 80016e8:	2008      	movs	r0, #8
 80016ea:	f7ff fae8 	bl	8000cbe <PosCaracLLcd>
	if(LeerSW()==PRESIONADO)estado_reloj=CONFIGURAR_SEG;
 80016ee:	f7ff f867 	bl	80007c0 <LeerSW>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <ConfiguraMin+0x22>
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <ConfiguraMin+0x70>)
 80016fa:	2209      	movs	r2, #9
 80016fc:	701a      	strb	r2, [r3, #0]
	encoder=LeerEncoder();
 80016fe:	f7ff f9d1 	bl	8000aa4 <LeerEncoder>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10b      	bne.n	8001724 <ConfiguraMin+0x48>
		Decrementa(&(reloj1->min),MINMIN,MINMAX);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	223b      	movs	r2, #59	; 0x3b
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f8f7 	bl	8001908 <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 800171a:	2202      	movs	r2, #2
 800171c:	2104      	movs	r1, #4
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fbe0 	bl	8000ee4 <PresentaHoraLCD>
	}
	if(encoder==DER){
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d10b      	bne.n	8001742 <ConfiguraMin+0x66>
		Incrementa(&(reloj1->min),MINMIN,MINMAX);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	223b      	movs	r2, #59	; 0x3b
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f92c 	bl	8001990 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 8001738:	2202      	movs	r2, #2
 800173a:	2104      	movs	r1, #4
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fbd1 	bl	8000ee4 <PresentaHoraLCD>
	}
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000b5 	.word	0x200000b5

08001750 <ConfiguraSeg>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
static void ConfiguraSeg(reloj* reloj1){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	uint8_t encoder=0;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

	PosCaracLLcd(POSSEG);
 800175c:	200b      	movs	r0, #11
 800175e:	f7ff faae 	bl	8000cbe <PosCaracLLcd>
	if(LeerSW()==PRESIONADO){
 8001762:	f7ff f82d 	bl	80007c0 <LeerSW>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d114      	bne.n	8001796 <ConfiguraSeg+0x46>
		CursorOffLcd();
 800176c:	f7ff fab7 	bl	8000cde <CursorOffLcd>
		Reloj_Write(*reloj1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4610      	mov	r0, r2
 8001776:	791a      	ldrb	r2, [r3, #4]
 8001778:	7959      	ldrb	r1, [r3, #5]
 800177a:	0209      	lsls	r1, r1, #8
 800177c:	430a      	orrs	r2, r1
 800177e:	799b      	ldrb	r3, [r3, #6]
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	2300      	movs	r3, #0
 8001786:	f362 0317 	bfi	r3, r2, #0, #24
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff fbf3 	bl	8000f76 <Reloj_Write>
		estado_reloj=PRESENTARHORA;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <ConfiguraSeg+0x90>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
	}
	encoder=LeerEncoder();
 8001796:	f7ff f985 	bl	8000aa4 <LeerEncoder>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
	if(encoder==IZQ){
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10a      	bne.n	80017ba <ConfiguraSeg+0x6a>
		Decrementa(&(reloj1->seg),SEGMIN,SEGMAX);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	223b      	movs	r2, #59	; 0x3b
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f8ac 	bl	8001908 <Decrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 80017b0:	2202      	movs	r2, #2
 80017b2:	2104      	movs	r1, #4
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fb95 	bl	8000ee4 <PresentaHoraLCD>
	}
	if(encoder==DER){
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d10a      	bne.n	80017d6 <ConfiguraSeg+0x86>
		Incrementa(&(reloj1->seg),SEGMIN,SEGMAX);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	223b      	movs	r2, #59	; 0x3b
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f8e2 	bl	8001990 <Incrementa>
		PresentaHoraLCD(reloj1,POSCOMIENZAHORA,LINEA_2);
 80017cc:	2202      	movs	r2, #2
 80017ce:	2104      	movs	r1, #4
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fb87 	bl	8000ee4 <PresentaHoraLCD>
	}

}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200000b5 	.word	0x200000b5

080017e4 <Configuro_idioma_ini>:
 * Version: 1.0
 * Fecha 16/4/23
  *
 **********************************************************************************/

static void Configuro_idioma_ini(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	ClrLcd();
 80017e8:	f7ff fa4f 	bl	8000c8a <ClrLcd>
	PosCaracHLcd(POSIDIOMA);
 80017ec:	2005      	movs	r0, #5
 80017ee:	f7ff fa56 	bl	8000c9e <PosCaracHLcd>
	SacaTextoLcd((uint8_t *)"IDIOMA");
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <Configuro_idioma_ini+0x40>)
 80017f4:	f7ff fa34 	bl	8000c60 <SacaTextoLcd>
	PosCaracLLcd(0);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fa60 	bl	8000cbe <PosCaracLLcd>
	SacaTextoLcd((uint8_t *)"  ESP      ENG  ");
 80017fe:	480a      	ldr	r0, [pc, #40]	; (8001828 <Configuro_idioma_ini+0x44>)
 8001800:	f7ff fa2e 	bl	8000c60 <SacaTextoLcd>
	PosCaracLLcd(POSIDIOMA_SELEC[idioma]);
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <Configuro_idioma_ini+0x48>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <Configuro_idioma_ini+0x4c>)
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fa55 	bl	8000cbe <PosCaracLLcd>
	DatoLcd('>');
 8001814:	203e      	movs	r0, #62	; 0x3e
 8001816:	f7ff f9ae 	bl	8000b76 <DatoLcd>
	estado_reloj=CONFIGURAR_IDIOMA;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <Configuro_idioma_ini+0x50>)
 800181c:	220b      	movs	r2, #11
 800181e:	701a      	strb	r2, [r3, #0]

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	080041d8 	.word	0x080041d8
 8001828:	080041e0 	.word	0x080041e0
 800182c:	200000b4 	.word	0x200000b4
 8001830:	080041fc 	.word	0x080041fc
 8001834:	200000b5 	.word	0x200000b5

08001838 <Configuro_idioma>:
 * Version: 1.0
 * Fecha 16/4/23
  *
 **********************************************************************************/

static void Configuro_idioma(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0

	if(LeerSW()==PRESIONADO){
 800183e:	f7fe ffbf 	bl	80007c0 <LeerSW>
 8001842:	4603      	mov	r3, r0
 8001844:	2b01      	cmp	r3, #1
 8001846:	d106      	bne.n	8001856 <Configuro_idioma+0x1e>
			CursorOffLcd();
 8001848:	f7ff fa49 	bl	8000cde <CursorOffLcd>
				ClrLcd();
 800184c:	f7ff fa1d 	bl	8000c8a <ClrLcd>
			estado_reloj=PRESENTARHORA;
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <Configuro_idioma+0xc4>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
	}
	uint8_t encoder=LeerEncoder();
 8001856:	f7ff f925 	bl	8000aa4 <LeerEncoder>
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	if(encoder==IZQ){
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d121      	bne.n	80018a8 <Configuro_idioma+0x70>
		Decrementa((uint8_t *)&idioma,0,CANT_IDIOMAS-1);
 8001864:	2201      	movs	r2, #1
 8001866:	2100      	movs	r1, #0
 8001868:	4825      	ldr	r0, [pc, #148]	; (8001900 <Configuro_idioma+0xc8>)
 800186a:	f000 f84d 	bl	8001908 <Decrementa>

		for(int i=0;i<sizeof(POSIDIOMA_SELEC);i++){
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e016      	b.n	80018a2 <Configuro_idioma+0x6a>
			PosCaracLLcd(POSIDIOMA_SELEC[i]);
 8001874:	4a23      	ldr	r2, [pc, #140]	; (8001904 <Configuro_idioma+0xcc>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fa1e 	bl	8000cbe <PosCaracLLcd>
			if(i==idioma)DatoLcd('>');
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <Configuro_idioma+0xc8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4293      	cmp	r3, r2
 800188c:	d103      	bne.n	8001896 <Configuro_idioma+0x5e>
 800188e:	203e      	movs	r0, #62	; 0x3e
 8001890:	f7ff f971 	bl	8000b76 <DatoLcd>
 8001894:	e002      	b.n	800189c <Configuro_idioma+0x64>
			else DatoLcd(' ');
 8001896:	2020      	movs	r0, #32
 8001898:	f7ff f96d 	bl	8000b76 <DatoLcd>
		for(int i=0;i<sizeof(POSIDIOMA_SELEC);i++){
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d9e5      	bls.n	8001874 <Configuro_idioma+0x3c>
		}
	}
	if(encoder==DER){
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d121      	bne.n	80018f2 <Configuro_idioma+0xba>
		Incrementa((uint8_t *)&idioma,0,CANT_IDIOMAS-1);
 80018ae:	2201      	movs	r2, #1
 80018b0:	2100      	movs	r1, #0
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <Configuro_idioma+0xc8>)
 80018b4:	f000 f86c 	bl	8001990 <Incrementa>
		for(int i=0;i<sizeof(POSIDIOMA_SELEC);i++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	e016      	b.n	80018ec <Configuro_idioma+0xb4>
			PosCaracLLcd(POSIDIOMA_SELEC[i]);
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <Configuro_idioma+0xcc>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f9f9 	bl	8000cbe <PosCaracLLcd>
			if(i==idioma)DatoLcd('>');
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <Configuro_idioma+0xc8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d103      	bne.n	80018e0 <Configuro_idioma+0xa8>
 80018d8:	203e      	movs	r0, #62	; 0x3e
 80018da:	f7ff f94c 	bl	8000b76 <DatoLcd>
 80018de:	e002      	b.n	80018e6 <Configuro_idioma+0xae>
			else DatoLcd(' ');
 80018e0:	2020      	movs	r0, #32
 80018e2:	f7ff f948 	bl	8000b76 <DatoLcd>
		for(int i=0;i<sizeof(POSIDIOMA_SELEC);i++){
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d9e5      	bls.n	80018be <Configuro_idioma+0x86>
		}

	}

}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200000b5 	.word	0x200000b5
 8001900:	200000b4 	.word	0x200000b4
 8001904:	080041fc 	.word	0x080041fc

08001908 <Decrementa>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
static void Decrementa(uint8_t * valor,uint8_t limiteInf,uint8_t limiteSup){
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	4613      	mov	r3, r2
 8001916:	70bb      	strb	r3, [r7, #2]

	uint8_t aux;
	aux=(*valor&0x0f)+(((*valor&0xf0)>>4)*10);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4619      	mov	r1, r3
 800192c:	0089      	lsls	r1, r1, #2
 800192e:	440b      	add	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	73fb      	strb	r3, [r7, #15]
	if(aux==limiteInf)aux=limiteSup;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	429a      	cmp	r2, r3
 800193e:	d102      	bne.n	8001946 <Decrementa+0x3e>
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e002      	b.n	800194c <Decrementa+0x44>
	else aux--;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	3b01      	subs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
	*valor=((aux/10)<<4)|(aux%10);
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <Decrementa+0x84>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	b258      	sxtb	r0, r3
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <Decrementa+0x84>)
 8001960:	fba3 1302 	umull	r1, r3, r3, r2
 8001964:	08d9      	lsrs	r1, r3, #3
 8001966:	460b      	mov	r3, r1
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4303      	orrs	r3, r0
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2da      	uxtb	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	701a      	strb	r2, [r3, #0]

}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	cccccccd 	.word	0xcccccccd

08001990 <Incrementa>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
static void Incrementa(uint8_t * valor,uint8_t limiteInf,uint8_t limiteSup){
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
 800199c:	4613      	mov	r3, r2
 800199e:	70bb      	strb	r3, [r7, #2]
	uint8_t aux;
	aux=(*valor&0x0f)+(((*valor&0xf0)>>4)*10);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	0089      	lsls	r1, r1, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	73fb      	strb	r3, [r7, #15]
	aux++;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	3301      	adds	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
	if(aux>limiteSup)aux=limiteInf;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	78bb      	ldrb	r3, [r7, #2]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d901      	bls.n	80019d2 <Incrementa+0x42>
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	73fb      	strb	r3, [r7, #15]
	*valor=((aux/10)<<4)|(aux%10);
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <Incrementa+0x80>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	b258      	sxtb	r0, r3
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <Incrementa+0x80>)
 80019e6:	fba3 1302 	umull	r1, r3, r3, r2
 80019ea:	08d9      	lsrs	r1, r3, #3
 80019ec:	460b      	mov	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	4303      	orrs	r3, r0
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	701a      	strb	r2, [r3, #0]

}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	cccccccd 	.word	0xcccccccd

08001a14 <buscar_indice>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

static uint8_t buscar_indice (uint8_t * valor,uint8_t abuscar,uint8_t limite){
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
 8001a20:	4613      	mov	r3, r2
 8001a22:	70bb      	strb	r3, [r7, #2]

	for(int i=0;i<limite;i++)if(valor[i]==abuscar)return i;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e00c      	b.n	8001a44 <buscar_indice+0x30>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d102      	bne.n	8001a3e <buscar_indice+0x2a>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	e007      	b.n	8001a4e <buscar_indice+0x3a>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	78bb      	ldrb	r3, [r7, #2]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbee      	blt.n	8001a2a <buscar_indice+0x16>
	return ERROR;
 8001a4c:	23ff      	movs	r3, #255	; 0xff


}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <calcula_dia_semana>:
 * Fecha 16/4/23
  *
  *Referncia de la congruencia de Zeller: https://es.wikipedia.org/wiki/Congruencia_de_Zeller
 **********************************************************************************/

static void calcula_dia_semana(reloj* reloj1){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	int dia,n,anio,mes;
	dia=BCD_a_Dec(reloj1->dia);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f869 	bl	8001b40 <BCD_a_Dec>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	617b      	str	r3, [r7, #20]
	mes=BCD_a_Dec(reloj1->mes);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	795b      	ldrb	r3, [r3, #5]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f862 	bl	8001b40 <BCD_a_Dec>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]
	anio=BCD_a_Dec(reloj1->anio)+2000 ; 		//supone que todos los calendarios que se utilizaran son a partir del 2000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	799b      	ldrb	r3, [r3, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f85b 	bl	8001b40 <BCD_a_Dec>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a90:	60fb      	str	r3, [r7, #12]
	n = ((14 - mes) / 12);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f1c3 030e 	rsb	r3, r3, #14
 8001a98:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <calcula_dia_semana+0xd8>)
 8001a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9e:	1052      	asrs	r2, r2, #1
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	60bb      	str	r3, [r7, #8]
	anio = (anio - n);
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	60fb      	str	r3, [r7, #12]
	mes = (mes + (12 * n) - 2);
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	3b02      	subs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
	reloj1->diasem=(((dia + anio + (anio / 4) - (anio / 100) + (anio / 400) + ((31 * mes) / 12))%7 )+1);
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da00      	bge.n	8001ad0 <calcula_dia_semana+0x74>
 8001ace:	3303      	adds	r3, #3
 8001ad0:	109b      	asrs	r3, r3, #2
 8001ad2:	441a      	add	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4918      	ldr	r1, [pc, #96]	; (8001b38 <calcula_dia_semana+0xdc>)
 8001ad8:	fb81 0103 	smull	r0, r1, r1, r3
 8001adc:	1149      	asrs	r1, r1, #5
 8001ade:	17db      	asrs	r3, r3, #31
 8001ae0:	1a5b      	subs	r3, r3, r1
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4914      	ldr	r1, [pc, #80]	; (8001b38 <calcula_dia_semana+0xdc>)
 8001ae8:	fb81 0103 	smull	r0, r1, r1, r3
 8001aec:	11c9      	asrs	r1, r1, #7
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1acb      	subs	r3, r1, r3
 8001af2:	18d1      	adds	r1, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4613      	mov	r3, r2
 8001af8:	015b      	lsls	r3, r3, #5
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <calcula_dia_semana+0xd8>)
 8001afe:	fb82 0203 	smull	r0, r2, r2, r3
 8001b02:	1052      	asrs	r2, r2, #1
 8001b04:	17db      	asrs	r3, r3, #31
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	18ca      	adds	r2, r1, r3
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <calcula_dia_semana+0xe0>)
 8001b0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b10:	4413      	add	r3, r2
 8001b12:	1099      	asrs	r1, r3, #2
 8001b14:	17d3      	asrs	r3, r2, #31
 8001b16:	1ac9      	subs	r1, r1, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a5b      	subs	r3, r3, r1
 8001b1e:	1ad1      	subs	r1, r2, r3
 8001b20:	b2cb      	uxtb	r3, r1
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	70da      	strb	r2, [r3, #3]

}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2aaaaaab 	.word	0x2aaaaaab
 8001b38:	51eb851f 	.word	0x51eb851f
 8001b3c:	92492493 	.word	0x92492493

08001b40 <BCD_a_Dec>:
 * Fecha 16/4/23
  *
  *
 **********************************************************************************/

static uint8_t BCD_a_Dec (uint8_t dato){
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
	return ((((dato&0xf0)>>4)*10) + (dato&0x0f));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b2db      	uxtb	r3, r3

}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <RTC_Write_Cal>:
 * Realizada por:Israel Pavelek
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/
void RTC_Write_Cal(reloj reloj1){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af04      	add	r7, sp, #16
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	e883 0003 	stmia.w	r3, {r0, r1}

	if(HAL_I2C_Mem_Write(&hi2c1,RTC_DIR<<1,0,I2C_MEMADD_SIZE_8BIT,(uint8_t *)&reloj1,sizeof(reloj),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	2307      	movs	r3, #7
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2200      	movs	r2, #0
 8001b92:	21d0      	movs	r1, #208	; 0xd0
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <RTC_Write_Cal+0x38>)
 8001b96:	f000 feb9 	bl	800290c <HAL_I2C_Mem_Write>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <RTC_Write_Cal+0x30>
 8001ba0:	f7fe fd74 	bl	800068c <Error_Handler>

}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000034 	.word	0x20000034

08001bb0 <RTC_Read_Cal>:
 * Version: 1.0
 * Fecha 13/4/23
  *
 **********************************************************************************/

void RTC_Read_Cal(reloj * reloj1){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1,RTC_DIR<<1,RTC_DIR_SEG,I2C_MEMADD_SIZE_8BIT,(uint8_t *)reloj1,sizeof(reloj),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	21d0      	movs	r1, #208	; 0xd0
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <RTC_Read_Cal+0x34>)
 8001bce:	f000 ff97 	bl	8002b00 <HAL_I2C_Mem_Read>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <RTC_Read_Cal+0x2c>
 8001bd8:	f7fe fd58 	bl	800068c <Error_Handler>

}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000034 	.word	0x20000034

08001be8 <RTC_Read_Temp>:
void RTC_Read_Byte(uint8_t * valor,uint8_t dir){
	if(HAL_I2C_Mem_Read(&hi2c1,RTC_DIR<<1,dir,I2C_MEMADD_SIZE_8BIT,(uint8_t *)valor,1,HAL_MAX_DELAY)!=HAL_OK)Error_Handler();

}

temp_t RTC_Read_Temp(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af04      	add	r7, sp, #16
	temp_t temp;
	if(HAL_I2C_Mem_Read(&hi2c1,RTC_DIR<<1,RTC_TEMP_DIR,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&temp,sizeof(temp),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	2211      	movs	r2, #17
 8001c00:	21d0      	movs	r1, #208	; 0xd0
 8001c02:	480a      	ldr	r0, [pc, #40]	; (8001c2c <RTC_Read_Temp+0x44>)
 8001c04:	f000 ff7c 	bl	8002b00 <HAL_I2C_Mem_Read>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <RTC_Read_Temp+0x2a>
 8001c0e:	f7fe fd3d 	bl	800068c <Error_Handler>
	return temp;
 8001c12:	883b      	ldrh	r3, [r7, #0]
 8001c14:	80bb      	strh	r3, [r7, #4]
 8001c16:	2300      	movs	r3, #0
 8001c18:	793a      	ldrb	r2, [r7, #4]
 8001c1a:	f362 0307 	bfi	r3, r2, #0, #8
 8001c1e:	797a      	ldrb	r2, [r7, #5]
 8001c20:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000034 	.word	0x20000034

08001c30 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10e      	bne.n	8001c5e <BSP_LED_Init+0x2e>
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <BSP_LED_Init+0x94>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <BSP_LED_Init+0x94>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <BSP_LED_Init+0x94>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	e00d      	b.n	8001c7a <BSP_LED_Init+0x4a>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <BSP_LED_Init+0x94>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <BSP_LED_Init+0x94>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <BSP_LED_Init+0x94>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <BSP_LED_Init+0x98>)
 8001c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <BSP_LED_Init+0x9c>)
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	f107 0214 	add.w	r2, r7, #20
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fa0a 	bl	80020b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <BSP_LED_Init+0x9c>)
 8001ca8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <BSP_LED_Init+0x98>)
 8001cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f000 fbc2 	bl	8002440 <HAL_GPIO_WritePin>
}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08004240 	.word	0x08004240
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <BSP_LED_On+0x2c>)
 8001cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <BSP_LED_On+0x30>)
 8001ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4619      	mov	r1, r3
 8001cee:	f000 fba7 	bl	8002440 <HAL_GPIO_WritePin>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	08004240 	.word	0x08004240

08001d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <SystemInit+0x60>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <SystemInit+0x60>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <SystemInit+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <SystemInit+0x64>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <SystemInit+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <SystemInit+0x64>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <SystemInit+0x64>)
 8001d30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <SystemInit+0x64>)
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <SystemInit+0x68>)
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <SystemInit+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <SystemInit+0x64>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <SystemInit+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SystemInit+0x60>)
 8001d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d58:	609a      	str	r2, [r3, #8]
#endif
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	24003010 	.word	0x24003010

08001d70 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001dc4:	f000 f84e 	bl	8001e64 <HAL_IncTick>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_Init+0x34>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x34>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x34>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f931 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f000 f808 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f001 fc87 	bl	8003706 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x54>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x58>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f93b 	bl	800209e <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f911 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	20000010 	.word	0x20000010

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000014 	.word	0x20000014
 8001e88:	200000b8 	.word	0x200000b8

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200000b8 	.word	0x200000b8

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000014 	.word	0x20000014

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff47 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff5c 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb0 	bl	800200c <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e177      	b.n	80023c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8166 	bne.w	80023be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	2b02      	cmp	r3, #2
 8002108:	d130      	bne.n	800216c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0201 	and.w	r2, r3, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b03      	cmp	r3, #3
 8002176:	d017      	beq.n	80021a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80c0 	beq.w	80023be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a61      	ldr	r2, [pc, #388]	; (80023e0 <HAL_GPIO_Init+0x328>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_GPIO_Init+0x32c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d037      	beq.n	80022f6 <HAL_GPIO_Init+0x23e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a57      	ldr	r2, [pc, #348]	; (80023e8 <HAL_GPIO_Init+0x330>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d031      	beq.n	80022f2 <HAL_GPIO_Init+0x23a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a56      	ldr	r2, [pc, #344]	; (80023ec <HAL_GPIO_Init+0x334>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02b      	beq.n	80022ee <HAL_GPIO_Init+0x236>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a55      	ldr	r2, [pc, #340]	; (80023f0 <HAL_GPIO_Init+0x338>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d025      	beq.n	80022ea <HAL_GPIO_Init+0x232>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a54      	ldr	r2, [pc, #336]	; (80023f4 <HAL_GPIO_Init+0x33c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_Init+0x22e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a53      	ldr	r2, [pc, #332]	; (80023f8 <HAL_GPIO_Init+0x340>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x22a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a52      	ldr	r2, [pc, #328]	; (80023fc <HAL_GPIO_Init+0x344>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x226>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a51      	ldr	r2, [pc, #324]	; (8002400 <HAL_GPIO_Init+0x348>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x222>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a50      	ldr	r2, [pc, #320]	; (8002404 <HAL_GPIO_Init+0x34c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x21e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4f      	ldr	r2, [pc, #316]	; (8002408 <HAL_GPIO_Init+0x350>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x21a>
 80022ce:	2309      	movs	r3, #9
 80022d0:	e012      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022d2:	230a      	movs	r3, #10
 80022d4:	e010      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022d6:	2308      	movs	r3, #8
 80022d8:	e00e      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022da:	2307      	movs	r3, #7
 80022dc:	e00c      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022de:	2306      	movs	r3, #6
 80022e0:	e00a      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022f6:	2300      	movs	r3, #0
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002308:	4935      	ldr	r1, [pc, #212]	; (80023e0 <HAL_GPIO_Init+0x328>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_GPIO_Init+0x354>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_GPIO_Init+0x354>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_GPIO_Init+0x354>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002364:	4a29      	ldr	r2, [pc, #164]	; (800240c <HAL_GPIO_Init+0x354>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_GPIO_Init+0x354>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_GPIO_Init+0x354>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_GPIO_Init+0x354>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_GPIO_Init+0x354>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f ae84 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40021400 	.word	0x40021400
 80023fc:	40021800 	.word	0x40021800
 8002400:	40021c00 	.word	0x40021c00
 8002404:	40022000 	.word	0x40022000
 8002408:	40022400 	.word	0x40022400
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e12b      	b.n	80026de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f92e 	bl	80026fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	; 0x24
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d8:	f001 fddc 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a81      	ldr	r2, [pc, #516]	; (80026e8 <HAL_I2C_Init+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d807      	bhi.n	80024f8 <HAL_I2C_Init+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a80      	ldr	r2, [pc, #512]	; (80026ec <HAL_I2C_Init+0x278>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e006      	b.n	8002506 <HAL_I2C_Init+0x92>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a7d      	ldr	r2, [pc, #500]	; (80026f0 <HAL_I2C_Init+0x27c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0e7      	b.n	80026de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a78      	ldr	r2, [pc, #480]	; (80026f4 <HAL_I2C_Init+0x280>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_I2C_Init+0x274>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d802      	bhi.n	8002548 <HAL_I2C_Init+0xd4>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	e009      	b.n	800255c <HAL_I2C_Init+0xe8>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_I2C_Init+0x284>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800256e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	495c      	ldr	r1, [pc, #368]	; (80026e8 <HAL_I2C_Init+0x274>)
 8002578:	428b      	cmp	r3, r1
 800257a:	d819      	bhi.n	80025b0 <HAL_I2C_Init+0x13c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fbb1 f3f3 	udiv	r3, r1, r3
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_I2C_Init+0x138>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e59      	subs	r1, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	e051      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e04f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <HAL_I2C_Init+0x168>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e012      	b.n	8002602 <HAL_I2C_Init+0x18e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x196>
 8002606:	2301      	movs	r3, #1
 8002608:	e022      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <HAL_I2C_Init+0x1bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e58      	subs	r0, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	e00f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6809      	ldr	r1, [r1, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800267e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6911      	ldr	r1, [r2, #16]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	000186a0 	.word	0x000186a0
 80026ec:	001e847f 	.word	0x001e847f
 80026f0:	003d08ff 	.word	0x003d08ff
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	461a      	mov	r2, r3
 800271c:	460b      	mov	r3, r1
 800271e:	817b      	strh	r3, [r7, #10]
 8002720:	4613      	mov	r3, r2
 8002722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff fbb2 	bl	8001e8c <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b20      	cmp	r3, #32
 8002734:	f040 80e0 	bne.w	80028f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2319      	movs	r3, #25
 800273e:	2201      	movs	r2, #1
 8002740:	4970      	ldr	r1, [pc, #448]	; (8002904 <HAL_I2C_Master_Transmit+0x1f4>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fe02 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	e0d3      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x50>
 800275c:	2302      	movs	r3, #2
 800275e:	e0cc      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d007      	beq.n	8002786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2210      	movs	r2, #16
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	893a      	ldrh	r2, [r7, #8]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_I2C_Master_Transmit+0x1f8>)
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fbbc 	bl	8002f4c <I2C_MasterRequestWrite>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e08d      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027f4:	e066      	b.n	80028c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fe7c 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b04      	cmp	r3, #4
 800280c:	d107      	bne.n	800281e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06b      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d11b      	bne.n	8002898 <HAL_I2C_Master_Transmit+0x188>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6a39      	ldr	r1, [r7, #32]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fe6c 	bl	800357a <I2C_WaitOnBTFFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e01a      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d194      	bne.n	80027f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000

0800290c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002926:	f7ff fab1 	bl	8001e8c <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 80d9 	bne.w	8002aec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2319      	movs	r3, #25
 8002940:	2201      	movs	r2, #1
 8002942:	496d      	ldr	r1, [pc, #436]	; (8002af8 <HAL_I2C_Mem_Write+0x1ec>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fd01 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	e0cc      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_I2C_Mem_Write+0x56>
 800295e:	2302      	movs	r3, #2
 8002960:	e0c5      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d007      	beq.n	8002988 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	; 0x21
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_I2C_Mem_Write+0x1f0>)
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ca:	88f8      	ldrh	r0, [r7, #6]
 80029cc:	893a      	ldrh	r2, [r7, #8]
 80029ce:	8979      	ldrh	r1, [r7, #10]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4603      	mov	r3, r0
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fb38 	bl	8003050 <I2C_RequestMemoryWrite>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d052      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e081      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fd82 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d107      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06b      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11b      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x180>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1aa      	bne.n	80029ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fd6e 	bl	800357a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e016      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	00100002 	.word	0x00100002
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	4608      	mov	r0, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	460b      	mov	r3, r1
 8002b14:	813b      	strh	r3, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1a:	f7ff f9b7 	bl	8001e8c <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	f040 8208 	bne.w	8002f3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2319      	movs	r3, #25
 8002b34:	2201      	movs	r2, #1
 8002b36:	497b      	ldr	r1, [pc, #492]	; (8002d24 <HAL_I2C_Mem_Read+0x224>)
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fc07 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	e1fb      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Mem_Read+0x56>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e1f4      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d007      	beq.n	8002b7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2222      	movs	r2, #34	; 0x22
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_I2C_Mem_Read+0x228>)
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bbe:	88f8      	ldrh	r0, [r7, #6]
 8002bc0:	893a      	ldrh	r2, [r7, #8]
 8002bc2:	8979      	ldrh	r1, [r7, #10]
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4603      	mov	r3, r0
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fad4 	bl	800317c <I2C_RequestMemoryRead>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1b0      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d113      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e184      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d11b      	bne.n	8002c4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e164      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d11b      	bne.n	8002c8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	e144      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ca4:	e138      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	f200 80f1 	bhi.w	8002e92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d123      	bne.n	8002d00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fc9d 	bl	80035fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e139      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cfe:	e10b      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d14e      	bne.n	8002da6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <HAL_I2C_Mem_Read+0x22c>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb1a 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e10e      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
 8002d22:	bf00      	nop
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000
 8002d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002da4:	e0b8      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	2200      	movs	r2, #0
 8002dae:	4966      	ldr	r1, [pc, #408]	; (8002f48 <HAL_I2C_Mem_Read+0x448>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 facb 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0bf      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2200      	movs	r2, #0
 8002e0a:	494f      	ldr	r1, [pc, #316]	; (8002f48 <HAL_I2C_Mem_Read+0x448>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa9d 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e091      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e90:	e042      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fbb0 	bl	80035fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04c      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d118      	bne.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f aec2 	bne.w	8002ca6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010004 	.word	0x00010004

08002f4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d006      	beq.n	8002f76 <I2C_MasterRequestWrite+0x2a>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d003      	beq.n	8002f76 <I2C_MasterRequestWrite+0x2a>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f74:	d108      	bne.n	8002f88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e00b      	b.n	8002fa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	d107      	bne.n	8002fa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f9cd 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc6:	d103      	bne.n	8002fd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e035      	b.n	8003040 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fdc:	d108      	bne.n	8002ff0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fec:	611a      	str	r2, [r3, #16]
 8002fee:	e01b      	b.n	8003028 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ff0:	897b      	ldrh	r3, [r7, #10]
 8002ff2:	11db      	asrs	r3, r3, #7
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0306 	and.w	r3, r3, #6
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f063 030f 	orn	r3, r3, #15
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	490e      	ldr	r1, [pc, #56]	; (8003048 <I2C_MasterRequestWrite+0xfc>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f9f3 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e010      	b.n	8003040 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <I2C_MasterRequestWrite+0x100>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f9e3 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	00010008 	.word	0x00010008
 800304c:	00010002 	.word	0x00010002

08003050 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	2200      	movs	r2, #0
 8003082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f960 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a0:	d103      	bne.n	80030aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e05f      	b.n	800316e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ae:	897b      	ldrh	r3, [r7, #10]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	6a3a      	ldr	r2, [r7, #32]
 80030c2:	492d      	ldr	r1, [pc, #180]	; (8003178 <I2C_RequestMemoryWrite+0x128>)
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f998 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04c      	b.n	800316e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	6a39      	ldr	r1, [r7, #32]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa02 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02b      	b.n	800316e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	e021      	b.n	800316c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b29b      	uxth	r3, r3
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f9dc 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e005      	b.n	800316e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003162:	893b      	ldrh	r3, [r7, #8]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	00010002 	.word	0x00010002

0800317c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	2200      	movs	r2, #0
 80031be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8c2 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d103      	bne.n	80031e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0aa      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ea:	897b      	ldrh	r3, [r7, #10]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	4952      	ldr	r1, [pc, #328]	; (8003348 <I2C_RequestMemoryRead+0x1cc>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f8fa 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e097      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	6a39      	ldr	r1, [r7, #32]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f964 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b04      	cmp	r3, #4
 800323c:	d107      	bne.n	800324e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e076      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]
 8003262:	e021      	b.n	80032a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f93e 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e050      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329e:	893b      	ldrh	r3, [r7, #8]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f923 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e035      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f82b 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d103      	bne.n	8003314 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e013      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	4906      	ldr	r1, [pc, #24]	; (8003348 <I2C_RequestMemoryRead+0x1cc>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f863 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	00010002 	.word	0x00010002

0800334c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335c:	e025      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d021      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fd91 	bl	8001e8c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e023      	b.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4013      	ands	r3, r2
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	e00c      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d0b6      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003408:	e051      	b.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d123      	bne.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003432:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f043 0204 	orr.w	r2, r3, #4
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e046      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d021      	beq.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe fd0f 	bl	8001e8c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d116      	bne.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e020      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10c      	bne.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e00b      	b.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	43da      	mvns	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d18d      	bne.n	800340a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003504:	e02d      	b.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f8ce 	bl	80036a8 <I2C_IsAcknowledgeFailed>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e02d      	b.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d021      	beq.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fe fcb5 	bl	8001e8c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d116      	bne.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e007      	b.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d1ca      	bne.n	8003506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003586:	e02d      	b.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f88d 	bl	80036a8 <I2C_IsAcknowledgeFailed>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e02d      	b.n	80035f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d021      	beq.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fe fc74 	bl	8001e8c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e007      	b.n	80035f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d1ca      	bne.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003608:	e042      	b.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d119      	bne.n	800364c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0210 	mvn.w	r2, #16
 8003620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e029      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7fe fc1e 	bl	8001e8c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d1b5      	bne.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d11b      	bne.n	80036f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0

}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003740:	f7fe fba4 	bl	8001e8c <HAL_GetTick>
 8003744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003746:	e009      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003748:	f7fe fba0 	bl	8001e8c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003756:	d901      	bls.n	800375c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e01f      	b.n	800379c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_PWREx_EnableOverDrive+0x98>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d1ee      	bne.n	8003748 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7fe fb8c 	bl	8001e8c <HAL_GetTick>
 8003774:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003776:	e009      	b.n	800378c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003778:	f7fe fb88 	bl	8001e8c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003786:	d901      	bls.n	800378c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e007      	b.n	800379c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_PWREx_EnableOverDrive+0x98>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003798:	d1ee      	bne.n	8003778 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	420e0040 	.word	0x420e0040
 80037ac:	40007000 	.word	0x40007000
 80037b0:	420e0044 	.word	0x420e0044

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e267      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d075      	beq.n	80038be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037d2:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d00c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d112      	bne.n	8003810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ea:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f6:	d10b      	bne.n	8003810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05b      	beq.n	80038bc <HAL_RCC_OscConfig+0x108>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d157      	bne.n	80038bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e242      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	d106      	bne.n	8003828 <HAL_RCC_OscConfig+0x74>
 800381a:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a75      	ldr	r2, [pc, #468]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e01d      	b.n	8003864 <HAL_RCC_OscConfig+0xb0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x98>
 8003832:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6f      	ldr	r2, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6c      	ldr	r2, [pc, #432]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0xb0>
 800384c:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a68      	ldr	r2, [pc, #416]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 800385e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fb0e 	bl	8001e8c <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe fb0a 	bl	8001e8c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e207      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0xc0>
 8003892:	e014      	b.n	80038be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe fafa 	bl	8001e8c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389c:	f7fe faf6 	bl	8001e8c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1f3      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0xe8>
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d063      	beq.n	8003992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ca:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d11c      	bne.n	800391c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e2:	4b44      	ldr	r3, [pc, #272]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d116      	bne.n	800391c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_RCC_OscConfig+0x152>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1c7      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4937      	ldr	r1, [pc, #220]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	e03a      	b.n	8003992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x244>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fe faaf 	bl	8001e8c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003932:	f7fe faab 	bl	8001e8c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e1a8      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4925      	ldr	r1, [pc, #148]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]
 8003964:	e015      	b.n	8003992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_OscConfig+0x244>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fa8e 	bl	8001e8c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003974:	f7fe fa8a 	bl	8001e8c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e187      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d036      	beq.n	8003a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_RCC_OscConfig+0x248>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fe fa6e 	bl	8001e8c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b4:	f7fe fa6a 	bl	8001e8c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e167      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x240>)
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x200>
 80039d2:	e01b      	b.n	8003a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_OscConfig+0x248>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7fe fa57 	bl	8001e8c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	e00e      	b.n	8003a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e2:	f7fe fa53 	bl	8001e8c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d907      	bls.n	8003a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e150      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	42470000 	.word	0x42470000
 80039fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ea      	bne.n	80039e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8097 	beq.w	8003b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1e:	4b81      	ldr	r3, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b7d      	ldr	r3, [pc, #500]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a7c      	ldr	r2, [pc, #496]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b7a      	ldr	r3, [pc, #488]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4a:	4b77      	ldr	r3, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x474>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d118      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a56:	4b74      	ldr	r3, [pc, #464]	; (8003c28 <HAL_RCC_OscConfig+0x474>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a73      	ldr	r2, [pc, #460]	; (8003c28 <HAL_RCC_OscConfig+0x474>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a62:	f7fe fa13 	bl	8001e8c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6a:	f7fe fa0f 	bl	8001e8c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e10c      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_OscConfig+0x474>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x2ea>
 8003a90:	4b64      	ldr	r3, [pc, #400]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4a63      	ldr	r2, [pc, #396]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9c:	e01c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x324>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x30c>
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5e      	ldr	r2, [pc, #376]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a5b      	ldr	r2, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x324>
 8003ac0:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
 8003acc:	4b55      	ldr	r3, [pc, #340]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a54      	ldr	r2, [pc, #336]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f023 0304 	bic.w	r3, r3, #4
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d015      	beq.n	8003b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fe f9d4 	bl	8001e8c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe f9d0 	bl	8001e8c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0cb      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ee      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x334>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0c:	f7fe f9be 	bl	8001e8c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fe f9ba 	bl	8001e8c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0b5      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2a:	4b3e      	ldr	r3, [pc, #248]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ee      	bne.n	8003b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	4a38      	ldr	r2, [pc, #224]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a1 	beq.w	8003c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b52:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d05c      	beq.n	8003c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d141      	bne.n	8003bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <HAL_RCC_OscConfig+0x478>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f98e 	bl	8001e8c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fe f98a 	bl	8001e8c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e087      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	3b01      	subs	r3, #1
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	491b      	ldr	r1, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x478>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe f963 	bl	8001e8c <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fe f95f 	bl	8001e8c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e05c      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x416>
 8003be8:	e054      	b.n	8003c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <HAL_RCC_OscConfig+0x478>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe f94c 	bl	8001e8c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fe f948 	bl	8001e8c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e045      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x444>
 8003c16:	e03d      	b.n	8003c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e038      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x4ec>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d028      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d121      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d11a      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d111      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cc      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d90c      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0b8      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf8:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a52      	ldr	r2, [pc, #328]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	494d      	ldr	r1, [pc, #308]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d044      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d119      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e06f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e067      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4934      	ldr	r1, [pc, #208]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d94:	f7fe f87a 	bl	8001e8c <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fe f876 	bl	8001e8c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e04f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d20c      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e032      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4916      	ldr	r1, [pc, #88]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	490e      	ldr	r1, [pc, #56]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e2a:	f000 f821 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	490a      	ldr	r1, [pc, #40]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	5ccb      	ldrb	r3, [r1, r3]
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd ffda 	bl	8001e04 <HAL_InitTick>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023c00 	.word	0x40023c00
 8003e60:	40023800 	.word	0x40023800
 8003e64:	08004248 	.word	0x08004248
 8003e68:	2000000c 	.word	0x2000000c
 8003e6c:	20000010 	.word	0x20000010

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b094      	sub	sp, #80	; 0x50
 8003e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e80:	2300      	movs	r3, #0
 8003e82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e88:	4b79      	ldr	r3, [pc, #484]	; (8004070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d00d      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	f200 80e1 	bhi.w	800405c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea2:	e0db      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b73      	ldr	r3, [pc, #460]	; (8004074 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ea8:	e0db      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eaa:	4b73      	ldr	r3, [pc, #460]	; (8004078 <HAL_RCC_GetSysClockFreq+0x208>)
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eae:	e0d8      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb0:	4b6f      	ldr	r3, [pc, #444]	; (8004070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eba:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	2200      	movs	r2, #0
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eda:	2300      	movs	r3, #0
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	f04f 0000 	mov.w	r0, #0
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	0159      	lsls	r1, r3, #5
 8003ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef4:	0150      	lsls	r0, r2, #5
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4621      	mov	r1, r4
 8003efc:	1a51      	subs	r1, r2, r1
 8003efe:	6139      	str	r1, [r7, #16]
 8003f00:	4629      	mov	r1, r5
 8003f02:	eb63 0301 	sbc.w	r3, r3, r1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f14:	4659      	mov	r1, fp
 8003f16:	018b      	lsls	r3, r1, #6
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1e:	4651      	mov	r1, sl
 8003f20:	018a      	lsls	r2, r1, #6
 8003f22:	4651      	mov	r1, sl
 8003f24:	ebb2 0801 	subs.w	r8, r2, r1
 8003f28:	4659      	mov	r1, fp
 8003f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f42:	4690      	mov	r8, r2
 8003f44:	4699      	mov	r9, r3
 8003f46:	4623      	mov	r3, r4
 8003f48:	eb18 0303 	adds.w	r3, r8, r3
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	462b      	mov	r3, r5
 8003f50:	eb49 0303 	adc.w	r3, r9, r3
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f62:	4629      	mov	r1, r5
 8003f64:	024b      	lsls	r3, r1, #9
 8003f66:	4621      	mov	r1, r4
 8003f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	024a      	lsls	r2, r1, #9
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f76:	2200      	movs	r2, #0
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f80:	f7fc f934 	bl	80001ec <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4613      	mov	r3, r2
 8003f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f8c:	e058      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8e:	4b38      	ldr	r3, [pc, #224]	; (8004070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	2200      	movs	r2, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	4611      	mov	r1, r2
 8003f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	f04f 0000 	mov.w	r0, #0
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	0159      	lsls	r1, r3, #5
 8003fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fba:	0150      	lsls	r0, r2, #5
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8003fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	00eb      	lsls	r3, r5, #3
 8003ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff6:	00e2      	lsls	r2, r4, #3
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	461d      	mov	r5, r3
 8003ffc:	4643      	mov	r3, r8
 8003ffe:	18e3      	adds	r3, r4, r3
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	464b      	mov	r3, r9
 8004004:	eb45 0303 	adc.w	r3, r5, r3
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004016:	4629      	mov	r1, r5
 8004018:	028b      	lsls	r3, r1, #10
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004020:	4621      	mov	r1, r4
 8004022:	028a      	lsls	r2, r1, #10
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	61fa      	str	r2, [r7, #28]
 8004030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004034:	f7fc f8da 	bl	80001ec <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800405a:	e002      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetSysClockFreq+0x204>)
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004064:	4618      	mov	r0, r3
 8004066:	3750      	adds	r7, #80	; 0x50
 8004068:	46bd      	mov	sp, r7
 800406a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	00f42400 	.word	0x00f42400
 8004078:	007a1200 	.word	0x007a1200

0800407c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCC_GetHCLKFreq+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000000c 	.word	0x2000000c

08004094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004098:	f7ff fff0 	bl	800407c <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	08004258 	.word	0x08004258

080040bc <main>:
  */

reloj reloj1;


int main(void){
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  HAL_Init();
 80040c0:	f7fd fe84 	bl	8001dcc <HAL_Init>
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80040c4:	f7fc fa80 	bl	80005c8 <SystemClock_Config>
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 80040c8:	2001      	movs	r0, #1
 80040ca:	f7fd fdb1 	bl	8001c30 <BSP_LED_Init>
  //BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
  if(Init_Lcd()==LCD_ERROR)Error_Handler();
 80040ce:	f7fc fcfd 	bl	8000acc <Init_Lcd>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <main+0x20>
 80040d8:	f7fc fad8 	bl	800068c <Error_Handler>
  RelojInit(&reloj1);			//inicializo el reloj
 80040dc:	4808      	ldr	r0, [pc, #32]	; (8004100 <main+0x44>)
 80040de:	f7fc ff2f 	bl	8000f40 <RelojInit>
  ClrLcd();
 80040e2:	f7fc fdd2 	bl	8000c8a <ClrLcd>
  Init_Enc();					//inicializo el encoder
 80040e6:	f7fc fc31 	bl	800094c <Init_Enc>
  debounceFSM_init();			//inicializo el debounce del pulsador del enconder
 80040ea:	f7fc fad5 	bl	8000698 <debounceFSM_init>
  while (true){

	  RelojFSM_Update(&reloj1);		//actualizo la MEF del reloj
 80040ee:	4804      	ldr	r0, [pc, #16]	; (8004100 <main+0x44>)
 80040f0:	f7fc ff50 	bl	8000f94 <RelojFSM_Update>
  	  EncFSM_Update();				//actualizo la MEF del enconder
 80040f4:	f7fc fc3c 	bl	8000970 <EncFSM_Update>
  	  debounceFSM_update();			//actualizo la MEF del putlsador del enconder*/
 80040f8:	f7fc fae4 	bl	80006c4 <debounceFSM_update>
	  RelojFSM_Update(&reloj1);		//actualizo la MEF del reloj
 80040fc:	e7f7      	b.n	80040ee <main+0x32>
 80040fe:	bf00      	nop
 8004100:	200000bc 	.word	0x200000bc

08004104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800413c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800410a:	e003      	b.n	8004114 <LoopCopyDataInit>

0800410c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800410e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004112:	3104      	adds	r1, #4

08004114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004114:	480b      	ldr	r0, [pc, #44]	; (8004144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800411a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800411c:	d3f6      	bcc.n	800410c <CopyDataInit>
  ldr  r2, =_sbss
 800411e:	4a0b      	ldr	r2, [pc, #44]	; (800414c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004120:	e002      	b.n	8004128 <LoopFillZerobss>

08004122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004124:	f842 3b04 	str.w	r3, [r2], #4

08004128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800412a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800412c:	d3f9      	bcc.n	8004122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800412e:	f7fd fde9 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004132:	f000 f811 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004136:	f7ff ffc1 	bl	80040bc <main>
  bx  lr    
 800413a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800413c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004140:	08004270 	.word	0x08004270
  ldr  r0, =_sdata
 8004144:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004148:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800414c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8004150:	200000c4 	.word	0x200000c4

08004154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004154:	e7fe      	b.n	8004154 <ADC_IRQHandler>
	...

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4d0d      	ldr	r5, [pc, #52]	; (8004190 <__libc_init_array+0x38>)
 800415c:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <__libc_init_array+0x3c>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	2600      	movs	r6, #0
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	4d0b      	ldr	r5, [pc, #44]	; (8004198 <__libc_init_array+0x40>)
 800416a:	4c0c      	ldr	r4, [pc, #48]	; (800419c <__libc_init_array+0x44>)
 800416c:	f000 f818 	bl	80041a0 <_init>
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	2600      	movs	r6, #0
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08004268 	.word	0x08004268
 8004194:	08004268 	.word	0x08004268
 8004198:	08004268 	.word	0x08004268
 800419c:	0800426c 	.word	0x0800426c

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
